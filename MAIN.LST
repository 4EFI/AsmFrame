Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 1
main.asm



      1
      2				     .186
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals __
      8
      9				     include	     TOOLS.ASM			     ; Exit
1    10
1    11				     ;------------------------------------------------
1    12				     ;	     EXIT PROGRAM
1    13				     ;------------------------------------------------
1    14				     ; Entry:	     NONE
1    15				     ; EXIT:	     NONE
1    16				     ; DESTROYS: AX
1    17				     ;------------------------------------------------
1    18
1    19				     EXIT	     macro
1    20							     nop
1    21							     mov ax, 4c00h
1    22							     int 21h
1    23							     nop
1    24							     endm
1    25
1    26				     ;------------------------------------------------
     27
     28				     ;------------------------------------------------
     29
     30	0100  BB B800		     Start:	     mov bx, 0b800h	     ; ES = VideoSeg
     31	0103  8E C3					     mov es, bx
     32
     33	0105  B8 0020					     mov byte ptr ax, '	'
     34	0108  E8 001C					     call ClrScrn
     35
     36	010B  B7 00					     mov bh, 0d		     ; X
     37	010D  B3 04					     mov bl, 4d		     ; Y
     38	010F  B5 32					     mov ch, 50d	     ; WIDTH
     39	0111  B1 0A					     mov cl, 10d	     ; HEIGHT
     40	0113  E8 006C					     call PrintBox
     41
     42	0116  B7 01					     mov bh, 1d		     ; X
     43	0118  B3 05					     mov bl, 5d		     ; Y
     44	011A  B8 0065					     mov ax, 101d    ; NUM
     45	011D  E8 01C4					     call PrintNum
     46
     47							     EXIT
1    48	0120  90					     nop
1    49	0121  B8 4C00					     mov ax, 4c00h
1    50	0124  CD 21					     int 21h
1    51	0126  90					     nop
     52
     53				     ;------------------------------------------------
     54
     55				     include	     SCR_HNDL.ASM    ; Clear Screen function
1    56
1    57				     ; SCREEN HANDLER
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 2
main.asm



1    58
1    59				     ;------------------------------------------------
1    60				     ;	     CLEAR SCREEN BY SYM
1    61				     ;------------------------------------------------
1    62				     ; ENTRY:	     AH	= COLOR	ATTR
1    63				     ;			     Al	= SYM
1    64				     ; EXIT:	     NONE
1    65				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    66				     ; DESTROYS:     BX	CX
1    67				     ;------------------------------------------------
1    68
1    69	0127			     ClrScrn		     proc
1    70
1    71	0127  BB 0000						     mov bx, 0			     ; bx = 0
1    72	012A  B9 07D0						     mov cx, 80d * 25d
1    73
1    74	012D  26: 89 07						     __Next:		     mov es:[bx], ax
1    75	0130  83 C3 02										     add bx, 2
1    76
1    77	0133  E2 F8										     loop __Next
1    78
1    79	0135  C3						     ret
1    80	0136							     endp
1    81
1    82				     ;------------------------------------------------
1    83				     ;	     GET VIDEO POS FROM	(X; Y)
1    84				     ;------------------------------------------------
1    85				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1    86				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1    87				     ; EXIT:	     AX	= POS
1    88				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    89				     ; DESTROYS:     AX
1    90				     ;------------------------------------------------
1    91
1    92	0136			     GetVideoPos	     proc
1    93
1    94	0136  D0 E7						     shl bh, 1		     ; bh /= 2
1    95
1    96	0138  52						     push dx		     ; push (1)
1    97
1    98	0139  B0 A0						     mov al, 160d    ; ax = 160	* Y + 2	* X
1    99	013B  F6 E3						     mul bl
1   100	013D  BA 0000						     mov dx, 0
1   101	0140  02 D7						     add dl, bh
1   102	0142  03 C2						     add ax, dx
1   103
1   104	0144  5A						     pop dx		     ; pop  (1)
1   105
1   106	0145  D0 EF						     shr bh, 1		     ; bh *= 2
1   107
1   108	0147  C3						     ret
1   109	0148							     endp
1   110
1   111				     ;------------------------------------------------
1   112				     ;	     PRINT SYM IN (X; Y)
1   113				     ;------------------------------------------------
1   114				     ; ENTRY:	     AH	= SYM COLOR
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 3
main.asm



1   115				     ;			     AL	= SYM CHAR
1   116				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   117				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   118				     ; EXIT:	     NONE
1   119				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   120				     ; DESTROYS:     DI
1   121				     ;------------------------------------------------
1   122
1   123	0148			     PrintChar		     proc
1   124
1   125	0148  50						     push ax		     ; push (1)
1   126
1   127	0149  E8 FFEA						     call GetVideoPos
1   128
1   129	014C  8B F8						     mov di, ax		     ; print( ax )
1   130	014E  58						     pop ax		     ; pop  (1)
1   131	014F  AB						     stosw
1   132
1   133	0150  C3						     ret
1   134	0151							     endp
1   135
1   136				     ;------------------------------------------------
1   137				     ;	     PRINT HORIZONTAL LINE IN (X; Y)
1   138				     ;------------------------------------------------
1   139				     ; ENTRY:	     AH	= SYM COLOR
1   140				     ;			     AL	= SYM CHAR
1   141				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   142				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   143				     ;			     CH	= WIDTH
1   144				     ; EXIT:	     NONE
1   145				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   146				     ; DESTROYS:     DX	DI
1   147				     ;------------------------------------------------
1   148
1   149	0151			     PrintHrzLine    proc
1   150
1   151	0151  80 FD 00						     cmp ch, 0		     ; if( ch <= 0 ) ret
1   152	0154  76 0F						     jbe __End
1   153
1   154	0156  53						     push bx
1   155
1   156	0157  33 D2						     xor dx, dx		     ; i = 0
1   157
1   158	0159  E8 FFEC						     __Next:		     call PrintChar
1   159
1   160	015C  FE C7										     inc bh
1   161	015E  FE C6										     inc dh
1   162
1   163	0160  3A F5										     cmp dh, ch
1   164	0162  75 F5										     jne __Next
1   165	0164  5B						     pop bx
1   166
1   167	0165							     __End:
1   168	0165  C3						     ret
1   169	0166							     endp
1   170
1   171				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 4
main.asm



1   172				     ;	     PRINT VERTICAL LINE IN (X;	Y)
1   173				     ;------------------------------------------------
1   174				     ; ENTRY:	     AH	= SYM COLOR
1   175				     ;			     AL	= SYM CHAR
1   176				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   177				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   178				     ;			     CL	= HEIGHT
1   179				     ; EXIT:	     NONE
1   180				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   181				     ; DESTROYS:     DX	DI
1   182				     ;------------------------------------------------
1   183
1   184	0166			     PrintVrtLine    proc
1   185
1   186	0166  80 F9 00						     cmp cl, 0		     ; if( cl <= 0 ) ret
1   187	0169  76 0F						     jbe __End
1   188
1   189	016B  53						     push bx
1   190
1   191	016C  33 D2						     xor dx, dx		     ; i = 0
1   192
1   193	016E  E8 FFD7						     __Next:		     call PrintChar
1   194
1   195	0171  FE C3										     inc bl
1   196	0173  FE C2										     inc dl
1   197
1   198	0175  3A D1										     cmp dl, cl
1   199	0177  75 F5										     jne __Next
1   200	0179  5B						     pop bx
1   201
1   202	017A							     __End:
1   203	017A  C3						     ret
1   204	017B							     endp
1   205
1   206				     ;------------------------------------------------
1   207				     ;	     PRINT BOX
1   208				     ;------------------------------------------------
1   209				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1   210				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   211				     ;			     CH	= WIDTH
1   212				     ;			     CL	= HEIGHT
1   213				     ; EXIT:	     NONE
1   214				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   215				     ; DESTROYS:     AX	DX DI
1   216				     ;------------------------------------------------
1   217
1   218	017B  1F		     box_clr db		     01fh    ; yellow on red
1   219
1   220	017C  C9		     lt_ch   db		     0c9h    ; left  top  char
1   221	017D  C8		     ld_ch   db		     0c8h    ; left  down char
1   222	017E  BB		     rt_ch   db		     0bbh    ; right top  char
1   223	017F  BC		     rd_ch   db		     0bch    ; rigth down char
1   224
1   225	0180  BA		     v_ch    db		     0bah    ; vertical	      char
1   226	0181  CD		     h_ch    db		     0cdh    ; horizontal char
1   227
1   228	0182			     PrintBox		     proc
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 5
main.asm



1   229
1   230	0182  53						     push bx			     ; print left top char
1   231	0183  A0 017Cr						     mov al, lt_ch
1   232	0186  8A 26 017Br					     mov ah, box_clr
1   233	018A  E8 FFBB						     call PrintChar
1   234	018D  5B						     pop bx
1   235
1   236	018E  53						     push bx			     ; print left down char
1   237	018F  02 D9						     add bl, cl
1   238	0191  80 EB 01						     sub bl, 1
1   239	0194  A0 017Dr						     mov al, ld_ch
1   240	0197  8A 26 017Br					     mov ah, box_clr
1   241	019B  E8 FFAA						     call PrintChar
1   242	019E  5B						     pop bx
1   243
1   244	019F  53						     push bx			     ; print right top char
1   245	01A0  02 FD						     add bh, ch
1   246	01A2  80 EF 01						     sub bh, 1
1   247	01A5  A0 017Er						     mov al, rt_ch
1   248	01A8  8A 26 017Br					     mov ah, box_clr
1   249	01AC  E8 FF99						     call PrintChar
1   250	01AF  5B						     pop bx
1   251
1   252	01B0  53						     push bx			     ; print right down	char
1   253	01B1  02 FD						     add bh, ch
1   254	01B3  80 EF 01						     sub bh, 1
1   255	01B6  02 D9						     add bl, cl
1   256	01B8  80 EB 01						     sub bl, 1
1   257	01BB  A0 017Fr						     mov al, rd_ch
1   258	01BE  8A 26 017Br					     mov ah, box_clr
1   259	01C2  E8 FF83						     call PrintChar
1   260	01C5  5B						     pop bx
1   261
1   262	01C6  53						     push bx			     ; print top horizontal line
1   263	01C7  80 C7 01						     add bh, 1
1   264	01CA  A0 0181r						     mov al, h_ch
1   265	01CD  8A 26 017Br					     mov ah, box_clr
1   266	01D1  80 ED 02						     sub ch, 2
1   267	01D4  E8 FF7A						     call PrintHrzLine
1   268	01D7  80 C5 02						     add ch, 2
1   269	01DA  5B						     pop bx
1   270
1   271	01DB  53						     push bx			     ; print down horizontal line
1   272	01DC  80 C7 01						     add bh, 1
1   273	01DF  02 D9						     add bl, cl
1   274	01E1  80 EB 01						     sub bl, 1
1   275	01E4  A0 0181r						     mov al, h_ch
1   276	01E7  8A 26 017Br					     mov ah, box_clr
1   277	01EB  80 ED 02						     sub ch, 2
1   278	01EE  E8 FF60						     call PrintHrzLine
1   279	01F1  80 C5 02						     add ch, 2
1   280	01F4  5B						     pop bx
1   281
1   282	01F5  53						     push bx			     ; print left vertical line
1   283	01F6  80 C3 01						     add bl, 1
1   284	01F9  A0 0180r						     mov al, v_ch
1   285	01FC  8A 26 017Br					     mov ah, box_clr
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 6
main.asm



1   286	0200  80 E9 02						     sub cl, 2
1   287	0203  E8 FF60						     call PrintVrtLine
1   288	0206  80 C1 02						     add cl, 2
1   289	0209  5B						     pop bx
1   290
1   291	020A  53						     push bx			     ; print right vertical line
1   292	020B  80 C3 01						     add bl, 1
1   293	020E  02 FD						     add bh, ch
1   294	0210  80 EF 01						     sub bh, 1
1   295	0213  A0 0180r						     mov al, v_ch
1   296	0216  8A 26 017Br					     mov ah, box_clr
1   297	021A  80 E9 02						     sub cl, 2
1   298	021D  E8 FF46						     call PrintVrtLine
1   299	0220  80 C1 02						     add cl, 2
1   300	0223  5B						     pop bx
1   301
1   302	0224  C3						     ret
1   303	0225							     endp
1   304
1   305				     ;------------------------------------------------
    306				     include	     NUM_CNVR.ASM    ; Print AX	in BIN/DEC/HEX
1   307
1   308				     ;------------------------------------------------
1   309				     ;	     PRINT AX IN BIN
1   310				     ;------------------------------------------------
1   311				     ; ENTRY:	     AX	= NUM
1   312				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   313				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   314				     ; EXIT:	     NONE
1   315				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   316				     ; DESTROYS:     DX	DI
1   317				     ;------------------------------------------------
1   318
1   319	      =0010		     bin_len = 16d						     ; len of bin str
1   320
1   321	0225			     PrintBin		     proc
1   322	0225  50						     push ax				     ; push (1)
1   323
1   324	0226  E8 FF0D						     call GetVideoPos		     ; AX = Video position from	(X; +
    325				     Y)
1   326	0229  BF 0020						     mov di, bin_len * 2d    ; i = bin_len * 2 + AX
1   327	022C  03 F8						     add di, ax
1   328	022E  FD						     std
1   329
1   330	022F  58						     pop  ax				     ; pop  (1)
1   331
1   332	0230  33 D2						     xor dx, dx				     ; i = 0
1   333
1   334	0232  50						     push ax				     ; push (2)
1   335
1   336	0233  D1 E8						     __Next:		     shr ax, 1				    +
    337				     ; AX /= 2
1   338
1   339	0235  50										     push ax			    +
    340				     ; push (3)
1   341
1   342	0236  72 05										     jc	__One
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 7
main.asm



1   343
1   344	0238  B0 30										     __Zero:		     mov al,+
    345				     '0'		     ; '0'
1   346	023A  EB 03 90														    +
    347				     jmp __End
1   348
1   349	023D  B0 31										     __One:		     mov al,+
    350				     '1'		     ; '1'
1   351
1   352	023F  B4 70						     __End:		     mov ah, 70h			    +
    353				     ; black on	white
1   354
1   355	0241  83 EF 02										     sub di, 2			    +
    356				     ; print( ax ) // with 1 sym left( 2 bytes )
1   357	0244  AB										     stosw
1   358	0245  83 C7 02										     add di, 2
1   359
1   360	0248  58										     pop ax			    +
    361				     ; pop (3)
1   362
1   363	0249  42										     inc dx
1   364
1   365	024A  83 FA 10										     cmp dx, bin_len		    +
    366				     ; if( dx == bin_len )
1   367	024D  75 E4										     jne __Next
1   368
1   369	024F  58						     pop ax				     ; pop  (2)
1   370
1   371	0250  C3						     ret
1   372	0251							     endp
1   373
1   374				     ;------------------------------------------------
1   375				     ;	     PRINT AX IN HEX
1   376				     ;------------------------------------------------
1   377				     ; ENTRY:	     AX	= NUM
1   378				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   379				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   380				     ; EXIT:	     NONE
1   381				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   382				     ; DESTROYS:     CX	DX DI
1   383				     ;------------------------------------------------
1   384
1   385	      =0010		     hex_len = 16d						     ; len of hex str
1   386
1   387	0251			     PrintHex		     proc
1   388
1   389	0251  50						     push ax				     ; push (1)
1   390
1   391	0252  E8 FEE1						     call GetVideoPos		     ; AX = Video position from	(X; +
    392				     Y)
1   393	0255  BF 0020						     mov di, hex_len * 2d    ; i = hex_len * 2 + AX
1   394	0258  03 F8						     add di, ax
1   395	025A  FD						     std
1   396
1   397	025B  58						     pop  ax				     ; pop  (1)
1   398
1   399	025C  33 D2						     xor dx, dx				     ; i = 0
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 8
main.asm



1   400
1   401	025E  50						     push ax				     ; push (2)
1   402
1   403	025F  B9 0000						     __Next:		     mov cx, 0			     ;	    +
    404				     shifts counter
1   405
1   406	0262  52										     push dx			    +
    407				     ; push (4)
1   408	0263  BA 0000										     mov  dx, 0			    +
    409				     ; DX = 0
1   410
1   411	0266  D1 E8										     __Shift:		     shr ax,+
    412				     1		     ; AX /= 2
1   413
1   414	0268  73 09														    +
    415				     jnc __End
1   416
1   417	026A  50														    +
    418				     __One:		     push ax		     ; push (3)
1   419	026B  B8 0001														    +
    420				     mov  ax, 1		     ; AX = 0001b
1   421	026E  D3 E0														    +
    422				     shl  ax, cl	     ; DX += 2^CX
1   423	0270  03 D0														    +
    424				     add  dx, ax
1   425	0272  58														    +
    426				     pop      ax		     ; pop  (3)
1   427
1   428	0273  41										     __End:		     inc cx +
    429				     ; shifts counter ++
1   430	0274  83 F9 04														    +
    431				     cmp cx, 4d		     ; if( numShifts ==	4 )
1   432	0277  75 ED														    +
    433				     jne __Shift
1   434
1   435	0279  8B C8										     mov cx, ax			    +
    436				     ; CX = AX
1   437
1   438	027B  83 FA 0A										     cmp dx, 10d		    +
    439				     ; if( DX >= 10 )
1   440	027E  7D 08										     jge __Sym
1   441
1   442	0280  83 C2 30										     __Digit:		     add dx,+
    443				     48d	     ; print( DX + '0' )
1   444	0283  8A C2														    +
    445				     mov al, dl
1   446	0285  EB 09 90														    +
    447				     jmp __Print
1   448
1   449	0288  83 EA 0A										     __Sym:		     sub dx,+
    450				     10		     ; print( DX - 10 +	'A' )
1   451	028B  83 C2 41														    +
    452				     add dx, 65d
1   453	028E  8A C2														    +
    454				     mov al, dl
1   455
1   456	0290  5A						     __Print:		     pop dx			     ; pop  +
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 9
main.asm



    457				     (4)
1   458
1   459	0291  B4 70										     mov ah, 70h		    +
    460				     ; black on	white
1   461
1   462	0293  83 EF 02										     sub di, 2			    +
    463				     ; print( ax ) // with 1 sym left( 2 bytes )
1   464	0296  AB										     stosw
1   465	0297  83 C7 02										     add di, 2
1   466
1   467	029A  8B C1										     mov ax, cx			    +
    468				     ; AX = CX
1   469
1   470	029C  42										     inc dx			    +
    471				     ; i++
1   472
1   473	029D  83 FA 10										     cmp dx, hex_len	     ; if(  +
    474				     dx	== hex_len )
1   475	02A0  75 BD										     jne __Next
1   476
1   477	02A2  58						     pop ax				     ; pop  (2)
1   478
1   479	02A3  C3						     ret
1   480	02A4							     endp
1   481
1   482				     ;------------------------------------------------
1   483				     ;	     PRINT AX IN DEC
1   484				     ;------------------------------------------------
1   485				     ; ENTRY:	     AX	= NUM
1   486				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   487				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   488				     ; EXIT:	     NONE
1   489				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   490				     ; DESTROYS:     CX	DX DI
1   491				     ;------------------------------------------------
1   492
1   493	      =0005		     dec_len = 5d
1   494
1   495	02A4			     PrintDec		     proc
1   496
1   497	02A4  50						     push ax				     ; push (1)
1   498
1   499	02A5  E8 FE8E						     call GetVideoPos		     ; AX = Video position from	(X; +
    500				     Y)
1   501	02A8  BF 000A						     mov di, dec_len * 2d    ; i = dec_len * 2 + AX
1   502	02AB  03 F8						     add di, ax
1   503	02AD  FD						     std
1   504
1   505	02AE  58						     pop  ax				     ; pop  (1)
1   506
1   507	02AF  33 D2						     xor dx, dx				     ; i = 0
1   508
1   509	02B1  50						     push ax				     ; push (2)
1   510
1   511	02B2  B9 000A						     mov cx, 10d			     ; CX = 10
1   512
1   513	02B5  52						     __Next:		     push dx			     ; push +
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 10
main.asm



    514				     (3)
1   515
1   516	02B6  3D 000A										     cmp ax, 10d	     ; if(  +
    517				     ax	> 10 )
1   518	02B9  7F 0E										     jg	     __Num
1   519
1   520	02BB  8B D0										     __Digit:		     mov    +
    521				     dx, ax			; print( DL + '0' )
1   522	02BD  83 C2 30														    +
    523				     add  dx, 48d
1   524
1   525	02C0  B8 0000														    +
    526				     mov  ax, 0			     ; AX = 0
1   527	02C3  50														    +
    528				     push ax			     ; push (4.1)
1   529
1   530	02C4  8A C2														    +
    531				     mov  al, dl
1   532
1   533	02C6  EB 09 90														    +
    534				     jmp __End
1   535
1   536
1   537	02C9  F7 F1										     __Num:		     div  cx+
    538				     ; AX /= 10
1   539
1   540	02CB  50														    +
    541				     push ax			     ; push (4.2)
1   542
1   543	02CC  80 C2 30														    +
    544				     add  dl, 48d	     ; print( DL + '0' )
1   545	02CF  8A C2														    +
    546				     mov  al, dl
1   547
1   548	02D1  B4 70						     __End:		     mov  ah, 70h	     ; black on	    +
    549				     white
1   550
1   551	02D3  83 EF 02										     sub di, 2			    +
    552				     ; print( ax ) // with 1 sym left( 2 bytes )
1   553	02D6  AB										     stosw
1   554	02D7  83 C7 02										     add di, 2
1   555
1   556	02DA  58										     pop ax			    +
    557				     ; pop  (4)
1   558	02DB  5A										     pop dx			    +
    559				     ; pop  (3)
1   560
1   561	02DC  42										     inc dx
1   562
1   563	02DD  83 FA 05										     cmp dx, dec_len	     ; if(  +
    564				     dx	== dec_len )
1   565	02E0  75 D3										     jne __Next
1   566
1   567	02E2  58						     pop ax				     ; pop  (2)
1   568
1   569	02E3  C3						     ret
1   570	02E4							     endp
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 11
main.asm



1   571
1   572				     ;------------------------------------------------
1   573				     ;	     PRINT AX IN BIN/HEX/DEC
1   574				     ;------------------------------------------------
1   575				     ; ENTRY:	     AX	= NUM
1   576				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   577				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   578				     ; EXIT:	     NONE
1   579				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   580				     ; DESTROYS:     CX	DX DI
1   581				     ;------------------------------------------------
1   582
1   583	02E4			     PrintNum		     proc
1   584
1   585	02E4  53						     push bx				     ; push (1)
1   586
1   587	02E5  E8 FF3D						     call PrintBin
1   588
1   589	02E8  80 C7 11						     add bh, bin_len + 1d    ; X
1   590	02EB  E8 FF63						     call PrintHex
1   591
1   592	02EE  80 C7 11						     add bh, hex_len + 1d    ; X
1   593	02F1  E8 FFB0						     call PrintDec
1   594
1   595	02F4  5B						     pop bx				     ; pop  (1)
1   596
1   597	02F5  C3						     ret
1   598	02F6							     endp
1   599
1   600				     ;------------------------------------------------
    601
    602				     end		     Start
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 12
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/18/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "05:14:17"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BIN_LEN				  Number 0010
BOX_CLR				  Byte	 DGROUP:017B
CLRSCRN				  Near	 DGROUP:0127
DEC_LEN				  Number 0005
GETVIDEOPOS			  Near	 DGROUP:0136
HEX_LEN				  Number 0010
H_CH				  Byte	 DGROUP:0181
LD_CH				  Byte	 DGROUP:017D
LT_CH				  Byte	 DGROUP:017C
PRINTBIN			  Near	 DGROUP:0225
PRINTBOX			  Near	 DGROUP:0182
PRINTCHAR			  Near	 DGROUP:0148
PRINTDEC			  Near	 DGROUP:02A4
PRINTHEX			  Near	 DGROUP:0251
PRINTHRZLINE			  Near	 DGROUP:0151
PRINTNUM			  Near	 DGROUP:02E4
PRINTVRTLINE			  Near	 DGROUP:0166
RD_CH				  Byte	 DGROUP:017F
RT_CH				  Byte	 DGROUP:017E
START				  Near	 DGROUP:0100
V_CH				  Byte	 DGROUP:0180
__DIGIT				  Near	 DGROUP:0280
__DIGIT				  Near	 DGROUP:02BB
__END				  Near	 DGROUP:0165
__END				  Near	 DGROUP:017A
__END				  Near	 DGROUP:023F
__END				  Near	 DGROUP:0273
__END				  Near	 DGROUP:02D1
__NEXT				  Near	 DGROUP:012D
__NEXT				  Near	 DGROUP:0159
__NEXT				  Near	 DGROUP:016E
__NEXT				  Near	 DGROUP:0233
__NEXT				  Near	 DGROUP:025F
__NEXT				  Near	 DGROUP:02B5
__NUM				  Near	 DGROUP:02C9
__ONE				  Near	 DGROUP:023D
__ONE				  Near	 DGROUP:026A
__PRINT				  Near	 DGROUP:0290
Turbo Assembler	 Version 4.1	    02/18/23 05:14:17	    Page 13
Symbol Table



__SHIFT				  Near	 DGROUP:0266
__SYM				  Near	 DGROUP:0288
__ZERO				  Near	 DGROUP:0238

Macro Name

EXIT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  02F6 Word	  Public  CODE
