Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 1
main.asm



      1
      2				     .186
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals __
      8
      9				     include	     TOOLS.ASM					     ; Exit
1    10
1    11				     ;------------------------------------------------
1    12				     ;	     EXIT PROGRAM
1    13				     ;------------------------------------------------
1    14				     ; Entry:	     NONE
1    15				     ; EXIT:	     NONE
1    16				     ; DESTROYS: AX
1    17				     ;------------------------------------------------
1    18
1    19				     EXIT	     macro
1    20							     nop
1    21							     mov ax, 4c00h
1    22							     int 21h
1    23							     nop
1    24							     endm
1    25
1    26				     ;------------------------------------------------
     27
     28				     ;------------------------------------------------
     29
     30	0100  BB B800		     Start:	     mov bx, 0b800h			     ; ES = VideoSeg
     31	0103  8E C3					     mov es, bx
     32
     33	0105  B1 00					     mov cl, 0					     ; Cmd line	box handler
     34	0107  B5 06					     mov ch, 6
     35	0109  BB 0153r					     mov bx, offset CmdData
     36	010C  E8 02D6					     call CmdLineHndl
     37
     38	010F  80 3E 0158r 00				     cmp CmdData[Type_Num], 0	     ; if( Type	!= 0 )
     39	0114  75 0A					     jne     __NotUserType
     40
     41	0116  8A C8					     mov cl, al					     ; User's box handler
     42	0118  B5 09					     mov ch, 9
     43	011A  BB 0270r					     mov bx, offset Type_0
     44	011D  E8 02C5					     call CmdLineHndl
     45
     46	0120						     __NotUserType:
     47
     48	0120  50					     push ax
     49	0121  B8 0020					     mov  ax, '	'
     50	0124  E8 007E					     call ClrScreen
     51	0127  58					     pop  ax
     52
     53	0128  05 0083					     add ax, 83h
     54	012B  BB 0153r					     mov bx, offset CmdData
     55	012E  E8 0163					     call PrintBox
     56
     57	0131  BB 016Dr					     mov  bx, offset New
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 2
main.asm



     58	0134  B1 41					     mov  cl, 'A'
     59	0136  BA 0005					     mov  dx, 5d
     60	0139  E8 035A					     call MemSet
     61
     62	013C  B4 07					     mov  ah, 07h
     63	013E  33 DB					     xor  bx, bx
     64	0140  B9 016Dr					     mov  cx, offset New
     65							     ; call PrintStr
     66
     67	0143  BB 0167r					     mov  bx, offset Nam
     68	0146  B9 016Dr					     mov  cx, offset New
     69	0149  E8 03B5					     call StrCmp
     70
     71							     ; mov ax, 123d			     ; set NUM
     72							     ; mov bh, 1d			     ; X
     73							     ; mov bl, 5d			     ; Y
     74							     ; call PrintNum
     75
     76							     EXIT
1    77	014C  90					     nop
1    78	014D  B8 4C00					     mov ax, 4c00h
1    79	0150  CD 21					     int 21h
1    80	0152  90					     nop
     81
     82				     ;------------------------------------------------
     83
     84	0153  14*(00)		     CmdData db	     20	dup (0)		     ; Cmd line	data
     85
     86	0167  41 41 41 41 41 00	     Nam     db	     "AAAAA", 0
     87	016D  0A*(00)		     New     db	 10 dup	(0)
     88
     89				     include	     SCR_HNDL.ASM    ; Clear screen function
1    90
1    91				     ; SCREEN HANDLER
1    92
1    93				     ;------------------------------------------------
1    94				     ;	     FILL SCREEN BY SYM
1    95				     ;	     FROM ( X; Y ) to (	X + WIDTH; Y + HEIGHT )
1    96				     ;------------------------------------------------
1    97				     ; ENTRY:	     AH	= COLOR	ATTR
1    98				     ;			     AL	= SYM
1    99				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   100				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   101				     ;			     CH	= WIDTH
1   102				     ;			     CL	= HEIGHT
1   103				     ; EXIT:	     NONE
1   104				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   105				     ; DESTROYS:     NONE
1   106				     ;------------------------------------------------
1   107
1   108	0177			     FillScreen		     proc
1   109
1   110	0177  53						     push bx			     ; push (1)
1   111	0178  51						     push cx			     ; push (2)
1   112	0179  52						     push dx			     ; push (3)
1   113
1   114	017A  50						     push ax			     ; push (4)
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 3
main.asm



1   115	017B  E8 0035						     call GetVideoPos
1   116	017E  8B D8						     mov bx, ax
1   117	0180  58						     pop ax			     ; pop  (4)
1   118
1   119	0181  8A F5						     __NextLine:		     mov dh, ch		     ; i =  +
    120				     CH
1   121
1   122	0183  53											     push bx		    +
    123				     ; push (5)
1   124
1   125	0184  26: 89 07											     __Next:		    +
    126				     mov es:[bx], ax
1   127	0187  83 C3 02														    +
    128				     add bx, 2
1   129
1   130	018A  FE CE														    +
    131				     dec dh		     ; i--
1   132
1   133	018C  80 FE 00														    +
    134				     cmp dh, 0d		     ; if( dh == 0 )
1   135	018F  74 02														    +
    136				     je	__End
1   137
1   138	0191  EB F1														    +
    139				     jmp __Next
1   140	0193												     __End:
1   141
1   142	0193  5B											     pop bx		    +
    143				     ; pop  (5)
1   144
1   145	0194  81 C3 00A0										     add bx, 160d    ; BX +=+
    146				     2*80
1   147
1   148	0198  FE C9											     dec cl		    +
    149				     ; CL--
1   150
1   151	019A  80 F9 00											     cmp cl, 0d	     ; if(  +
    152				     CL	== 0 )
1   153	019D  74 02											     je	__EndNextLine
1   154
1   155	019F  EB E0											     jmp __NextLine
1   156	01A1							     __EndNextLine:
1   157
1   158	01A1  5A						     pop dx			     ; pop  (3)
1   159	01A2  59						     pop cx			     ; pop  (2)
1   160	01A3  5B						     pop bx			     ; pop  (1)
1   161
1   162	01A4  C3						     ret
1   163	01A5							     endp
1   164
1   165				     ;------------------------------------------------
1   166				     ;	     CLEAR SCREEN BY SYM
1   167				     ;------------------------------------------------
1   168				     ; ENTRY:	     AH	= COLOR	ATTR
1   169				     ;			     AL	= SYM
1   170				     ; EXIT:	     NONE
1   171				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 4
main.asm



1   172				     ; DESTROYS:     NONE
1   173				     ;------------------------------------------------
1   174
1   175	01A5			     ClrScreen		     proc
1   176
1   177	01A5  53						     push bx			     ; push (1)
1   178	01A6  51						     push cx			     ; push (2)
1   179
1   180	01A7  33 DB						     xor bx, bx			     ; X = 0; Y	= 0
1   181	01A9  B5 50						     mov ch, 80d
1   182	01AB  B1 19						     mov cl, 25d
1   183	01AD  E8 FFC7						     call FillScreen
1   184
1   185	01B0  59						     pop cx			     ; pop  (2)
1   186	01B1  5B						     pop bx			     ; pop  (1)
1   187
1   188	01B2  C3						     ret
1   189	01B3							     endp
1   190
1   191				     ;------------------------------------------------
1   192				     ;	     GET VIDEO POS FROM	(X; Y)
1   193				     ;------------------------------------------------
1   194				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1   195				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   196				     ; EXIT:	     AX	= POS
1   197				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   198				     ; DESTROYS:     AX
1   199				     ;------------------------------------------------
1   200
1   201	01B3			     GetVideoPos	     proc
1   202
1   203	01B3  D0 E7						     shl bh, 1		     ; bh /= 2
1   204
1   205	01B5  52						     push dx		     ; push (1)
1   206
1   207	01B6  B0 A0						     mov al, 160d    ; ax = 160	* Y + 2	* X
1   208	01B8  F6 E3						     mul bl
1   209	01BA  BA 0000						     mov dx, 0
1   210	01BD  02 D7						     add dl, bh
1   211	01BF  03 C2						     add ax, dx
1   212
1   213	01C1  5A						     pop dx		     ; pop  (1)
1   214
1   215	01C2  D0 EF						     shr bh, 1		     ; bh *= 2
1   216
1   217	01C4  C3						     ret
1   218	01C5							     endp
1   219
1   220				     ;------------------------------------------------
1   221				     ;	     PRINT SYM IN (X; Y)
1   222				     ;------------------------------------------------
1   223				     ; ENTRY:	     AH	= SYM COLOR
1   224				     ;			     AL	= SYM CHAR
1   225				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   226				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   227				     ; EXIT:	     NONE
1   228				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 5
main.asm



1   229				     ; DESTROYS:     NONE
1   230				     ;------------------------------------------------
1   231
1   232	01C5			     PrintChar		     proc
1   233
1   234	01C5  57						     push di		     ; push (1)
1   235	01C6  50						     push ax		     ; push (2)
1   236
1   237	01C7  E8 FFE9						     call GetVideoPos
1   238
1   239	01CA  8B F8						     mov di, ax		     ; print( ax )
1   240	01CC  58						     pop ax		     ; pop  (2)
1   241	01CD  AB						     stosw
1   242
1   243	01CE  5F						     pop di		     ; pop  (1)
1   244
1   245	01CF  C3						     ret
1   246	01D0							     endp
1   247
1   248				     ;------------------------------------------------
1   249				     ;	     PRINT STR IN (X; Y)
1   250				     ;------------------------------------------------
1   251				     ; ENTRY:	     AH	= SYM COLOR
1   252				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   253				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   254				     ;			     CX	= STR ADDR
1   255				     ; EXIT:	     NONE
1   256				     ; EXPECTS:	     ES	     = 0b800h (VIDEO SEGMENT)
1   257				     ;			     END SYM = '\0' || '$' || '\r'
1   258				     ; DESTROYS:     NONE
1   259				     ;------------------------------------------------
1   260
1   261	01D0			     PrintStr		     proc
1   262
1   263	01D0  50						     push ax		     ; push (1)
1   264	01D1  53						     push bx		     ; push (2)
1   265	01D2  52						     push dx		     ; push (3)
1   266	01D3  56						     push si		     ; push (4)
1   267
1   268	01D4  8B F1						     mov si, cx		     ; SI = StrAddr
1   269
1   270	01D6  8A 14						     __Next:		     mov dl, [si]    ; DX = CurrSym
1   271
1   272	01D8  80 FA 00										     cmp dl, 0d		     ; if(  +
    273				     DL	== 0 )
1   274	01DB  74 14										     je	__End
1   275	01DD  80 FA 0D										     cmp dl, 13d	     ; if(  +
    276				     DL	== '\r'	)
1   277	01E0  74 0F										     je	__End
1   278	01E2  80 FA 24										     cmp dl, '$'	     ; if(  +
    279				     DL	== '$' )
1   280	01E5  74 0A										     je	__End
1   281
1   282	01E7  8A 04										     mov al, [si]    ; AL = CurrSym
1   283	01E9  E8 FFD9										     call PrintChar
1   284
1   285	01EC  FE C7										     inc bh		     ; X++
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 6
main.asm



1   286	01EE  46										     inc si		     ;	    +
    287				     CurrSymPos++
1   288
1   289	01EF  E2 E5										     loop __Next
1   290	01F1							     __End:
1   291
1   292	01F1  5E						     pop si		     ; pop  (4)
1   293	01F2  5A						     pop dx		     ; pop  (3)
1   294	01F3  58						     pop ax		     ; pop  (2)
1   295	01F4  5B						     pop bx		     ; pop  (1)
1   296
1   297	01F5  C3						     ret
1   298	01F6							     endp
1   299
1   300				     ;------------------------------------------------
1   301				     ;	     PRINT HORIZONTAL LINE IN (X; Y)
1   302				     ;------------------------------------------------
1   303				     ; ENTRY:	     AH	= SYM COLOR
1   304				     ;			     AL	= SYM CHAR
1   305				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   306				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   307				     ;			     CH	= WIDTH
1   308				     ;			     DH	= LEFT	SYM
1   309				     ;			     DL	= RIGHT	SYM
1   310				     ; EXIT:	     NONE
1   311				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   312				     ; DESTROYS:     NONE
1   313				     ;------------------------------------------------
1   314
1   315	01F6			     PrintHrzLine    proc
1   316
1   317	01F6  80 FD 01						     cmp ch, 1			     ; if( ch <= 1 ) ret
1   318	01F9  76 37						     jbe __End
1   319
1   320	01FB  53						     push bx			     ; push (1)
1   321	01FC  52						     push dx			     ; push (2)
1   322
1   323
1   324	01FD  50						     push ax			     ; push (3)
1   325	01FE  8A C6						     mov al, dh			     ; printf( "%c", LeftSym )
1   326	0200  E8 FFC2						     call PrintChar
1   327	0203  58						     pop ax			     ; pop  (3)
1   328
1   329	0204  50						     push ax			     ; push (4)
1   330	0205  53						     push bx			     ; push (5)
1   331	0206  02 FD						     add bh, ch			     ; X += ( WIDTH - 1	)
1   332	0208  80 EF 01						     sub bh, 1
1   333	020B  8A C2						     mov al, dl			     ; printf( "%c", RightSym )
1   334	020D  E8 FFB5						     call PrintChar
1   335	0210  5B						     pop bx			     ; pop  (5)
1   336	0211  58						     pop ax			     ; pop  (4)
1   337
1   338	0212  53						     push bx			     ; push (6)
1   339	0213  51						     push cx			     ; push (7)
1   340
1   341	0214  80 C7 01						     add bh, 1			     ; X += 1
1   342	0217  80 ED 02						     sub ch, 2			     ; WIDTH -=	2
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 7
main.asm



1   343
1   344	021A  80 FD 00						     cmp ch, 0			     ; if( ch == 0 )
1   345	021D  74 0F						     je	     __EndPrinting
1   346
1   347	021F  33 D2						     xor dx, dx			     ; i = 0
1   348
1   349	0221  E8 FFA1						     __Next:		     call PrintChar
1   350
1   351	0224  FE C7										     inc bh
1   352	0226  FE C6										     inc dh
1   353
1   354	0228  3A F5										     cmp dh, ch
1   355	022A  74 02										     je	 __EndPrinting
1   356
1   357	022C  EB F3										     jmp __Next
1   358
1   359	022E							     __EndPrinting:
1   360
1   361	022E  59						     pop cx			     ; pop  (7)
1   362	022F  5B						     pop bx			     ; pop  (6)
1   363
1   364
1   365	0230  5A						     pop dx			     ; pop  (2)
1   366	0231  5B						     pop bx			     ; pop  (1)
1   367
1   368	0232							     __End:
1   369	0232  C3						     ret
1   370	0233							     endp
1   371
1   372				     ;------------------------------------------------
1   373				     ;	     PRINT VERTICAL LINE IN (X;	Y)
1   374				     ;------------------------------------------------
1   375				     ; ENTRY:	     AH	= SYM COLOR
1   376				     ;			     AL	= SYM CHAR
1   377				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   378				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   379				     ;			     CL	= HEIGHT
1   380				     ;			     DH	= TOP  SYM
1   381				     ;			     DL	= DOWN SYM
1   382				     ; EXIT:	     NONE
1   383				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   384				     ; DESTROYS:     NONE
1   385				     ;------------------------------------------------
1   386
1   387	0233			     PrintVrtLine    proc
1   388
1   389	0233  80 F9 01						     cmp cl, 1			     ; if( cl <= 1 ) ret
1   390	0236  76 37						     jbe __End
1   391
1   392	0238  53						     push bx			     ; push (1)
1   393	0239  52						     push dx			     ; push (2)
1   394
1   395
1   396	023A  50						     push ax			     ; push (3)
1   397	023B  8A C6						     mov al, dh			     ; printf( "%c", TopSym )
1   398	023D  E8 FF85						     call PrintChar
1   399	0240  58						     pop ax			     ; pop  (3)
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 8
main.asm



1   400
1   401	0241  50						     push ax			     ; push (4)
1   402	0242  53						     push bx			     ; push (5)
1   403	0243  02 D9						     add bl, cl			     ; Y += ( HEIGHT - 1 )
1   404	0245  80 EB 01						     sub bl, 1
1   405	0248  8A C2						     mov al, dl			     ; printf( "%c", DownSym )
1   406	024A  E8 FF78						     call PrintChar
1   407	024D  5B						     pop bx			     ; pop  (5)
1   408	024E  58						     pop ax			     ; pop  (4)
1   409
1   410	024F  53						     push bx			     ; push (6)
1   411	0250  51						     push cx			     ; push (7)
1   412
1   413	0251  80 C3 01						     add bl, 1			     ; Y += 1
1   414	0254  80 E9 02						     sub cl, 2			     ; HEIGHT -= 2
1   415
1   416	0257  80 F9 00						     cmp cl, 0			     ; if( cl == 0 )
1   417	025A  74 0F						     je	     __EndPrinting
1   418
1   419	025C  33 D2						     xor dx, dx			     ; i = 0
1   420
1   421	025E  E8 FF64						     __Next:		     call PrintChar
1   422
1   423	0261  FE C3										     inc bl
1   424	0263  FE C2										     inc dl
1   425
1   426	0265  3A D1										     cmp dl, cl
1   427	0267  74 02										     je	 __EndPrinting
1   428
1   429	0269  EB F3										     jmp __Next
1   430
1   431	026B							     __EndPrinting:
1   432
1   433	026B  59						     pop cx			     ; pop  (7)
1   434	026C  5B						     pop bx			     ; pop  (6)
1   435
1   436
1   437	026D  5A						     pop dx			     ; pop  (2)
1   438	026E  5B						     pop bx			     ; pop  (1)
1   439
1   440	026F							     __End:
1   441	026F  C3						     ret
1   442	0270							     endp
1   443
1   444				     ;------------------------------------------------
1   445				     ;	     PRINT BOX
1   446				     ;------------------------------------------------
1   447				     ; ENTRY:	     AX	= STR  ADDR
1   448				     ;			     BX	= DATA ADDR
1   449				     ; EXIT:	     NONE
1   450				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   451				     ; DESTROYS:     NONE
1   452				     ;------------------------------------------------
1   453
1   454				     ; User's type
1   455	0270  09*(00)		     Type_0  db		     9 dup (0)
1   456
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 9
main.asm



1   457				     ; Template	types
1   458				     ;				     0		     1		     2		     3		    +
    459				     4		     5		     6		     7		     9
1   460				     ;				     lt		     ld		     rt		     rd		    +
    461				     lv		     rv		     th		     dh		     fill
1   462	0279  C9 C8 BB BC BA BA	CD+  Type_1  db		     0c9h,   0c8h,   0bbh,   0bch,   0bah,   0bah,   0cdh,   0cdh,   0d
    463	      CD 00
1   464	0282  03 03 03 03 03 03	03+  Type_2  db		     003h,   003h,   003h,   003h,   003h,   003h,   003h,   003h,   0d
    465	      03 00
1   466	028B  BC BB C8 C9 CD CD	BA+  Type_3  db		     0bch,   0bbh,   0c8h,   0c9h,   0cdh,   0cdh,   0bah,   0bah,   0d
    467	      BA 00
1   468
1   469	      =0000		     X_Num    =	0
1   470	      =0001		     Y_Num    =	1
1   471	      =0002		     W_Num    =	2
1   472	      =0003		     H_Num    =	3
1   473	      =0004		     Clr_Num  =	4
1   474	      =0005		     Type_Num =	5
1   475
1   476	0294			     PrintBox		     proc
1   477
1   478	0294  50						     push ax				     ; push (1)
1   479	0295  53						     push bx				     ; push (2)
1   480	0296  51						     push cx				     ; push (3)
1   481	0297  52						     push dx				     ; push (4)
1   482	0298  56						     push si				     ; push (5)
1   483	0299  57						     push di				     ; push (6)
1   484	029A  55						     push bp				     ; push (7)
1   485
1   486	029B  50						     push ax				     ; push (8)	<> push	STR +
    487				     ADDR
1   488
1   489	029C  8B F3						     mov si, bx				     ; SI = DATA ADDR( BX )
1   490
1   491								     ; SET TYPE	BOX
1   492
1   493	029E  33 C0						     xor ax, ax				     ; BP = Type_0 + Type * 9
1   494	02A0  8A 47 05						     mov al, bx[Type_Num]
1   495	02A3  B9 0009						     mov cx, 9d
1   496	02A6  F7 E1						     mul cx
1   497	02A8  8B E8						     mov bp, ax
1   498	02AA  81 C5 0270r					     add bp, offset Type_0
1   499
1   500	02AE  8A 67 04						     mov ah, bx[Clr_Num]	     ; AH = Color
1   501
1   502	02B1  8A 6F 02						     mov ch, bx[W_Num]		     ; CH = WIDTH
1   503	02B4  8A 4F 03						     mov cl, bx[H_Num]		     ; CL = HEIGHT
1   504
1   505								     ; PRINT TOP HORIZONTAL LINE
1   506
1   507	02B7  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   508	02B9  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
1   509	02BC  8A 46 06						     mov  al, bp[6]		     ; AL = horizontal sym
1   510	02BF  8A 76 00						     mov  dh, bp[0]		     ; DH = left  top  sym
1   511	02C2  8A 56 02						     mov  dl, bp[2]		     ; DL = right top  sym
1   512	02C5  E8 FF2E						     call PrintHrzLine
1   513
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 10
main.asm



1   514								     ; PRINT LEFT VERTICAL LINE
1   515
1   516	02C8  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   517	02CA  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
1   518	02CD  8A 46 04						     mov  al, bp[4]		     ; AL = vertical  sym
1   519	02D0  8A 76 00						     mov  dh, bp[0]		     ; DH = left top  sym
1   520	02D3  8A 56 01						     mov  dl, bp[1]		     ; DL = left down sym
1   521	02D6  E8 FF5A						     call PrintVrtLine
1   522
1   523	02D9  53						     push bx				     ; push (9)	<> push	(X; +
    524				     Y)
1   525
1   526								     ; PRINT DOWN HORIZONTAL LINE
1   527
1   528	02DA  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   529	02DC  8A 54 01						     mov  dl, si[Y_Num]		 ; Y +=	( HEIGHT - 1 )
1   530	02DF  02 D1						     add  dl, cl
1   531	02E1  80 EA 01						     sub  dl, 1
1   532	02E4  8A DA						     mov  bl, dl			     ; BL = Y
1   533	02E6  8A 46 07						     mov  al, bp[7]		     ; AL = horizontal sym
1   534	02E9  8A 76 01						     mov  dh, bp[1]		     ; DH = left  down sym
1   535	02EC  8A 56 03						     mov  dl, bp[3]		     ; DL = right down sym
1   536	02EF  E8 FF04						     call PrintHrzLine
1   537
1   538								     ; PRINT RIGHT VERTICAL LINE
1   539
1   540	02F2  8A 14						     mov  dl, si[X_Num]		 ; X +=	( WIDTH	- 1 )
1   541	02F4  02 D5						     add  dl, ch
1   542	02F6  80 EA 01						     sub  dl, 1
1   543	02F9  8A FA						     mov  bh, dl			     ; BH = X
1   544	02FB  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
1   545	02FE  8A 46 05						     mov  al, bp[5]		     ; AL = vertical   sym
1   546	0301  8A 76 02						     mov  dh, bp[2]		     ; DH = right top  sym
1   547	0304  8A 56 03						     mov  dl, bp[3]		     ; DL = right down sym
1   548	0307  E8 FF29						     call PrintVrtLine
1   549
1   550								     ; FILL BOX
1   551
1   552	030A  53						     push bx				     ; push (10)
1   553	030B  51						     push cx				     ; push (11)
1   554	030C  8A 3C						     mov  bh, si[X_Num]		     ; BH = X +	1
1   555	030E  80 C7 01						     add  bh, 1
1   556	0311  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y +	1
1   557	0314  80 C3 01						     add  bl, 1
1   558	0317  8A 46 08						     mov  al, bp[8]		     ; AL = filling sym
1   559	031A  80 ED 02						     sub  ch, 2				     ; WIDTH  -= 2
1   560	031D  80 E9 02						     sub  cl, 2				     ; HEIGHT -= 2
1   561	0320  E8 FE54						     call FillScreen
1   562	0323  59						     pop  cx				     ; pop  (11)
1   563	0324  5B						     pop  bx				     ; pop  (10)
1   564
1   565	0325  5B						     pop  bx				     ; pop  (9)	<> pop (X; Y)
1   566	0326  58						     pop  ax				     ; pop  (8)	<> pop STR  +
    567				     ADDR
1   568
1   569								     ; PRINT STR
1   570
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 11
main.asm



1   571	0327  8B C8						     mov  cx, ax			     ; CX = STR	ADDR
1   572	0329  8B D8						     mov  bx, ax			     ; BX = STR	ADDR
1   573	032B  E8 0117						     call StrLen			     ; AX = len	of str
1   574	032E  F7 D8						     neg  ax				     ; AX = ( WIDTH - LEN ) +
    575				     / 2
1   576	0330  33 D2						     xor  dx, dx
1   577	0332  8A 54 02						     mov  dl, si[W_Num]
1   578	0335  03 C2						     add  ax, dx
1   579	0337  33 D2						     xor  dx, dx
1   580	0339  BD 0002						     mov  bp, 2d
1   581	033C  F7 F5						     div  bp
1   582	033E  8A 3C						     mov  bh, si[X_Num]		     ; X += AL
1   583	0340  02 F8						     add  bh, al
1   584	0342  33 C0						     xor  ax, ax			     ; AX = HEIGHT / 2
1   585	0344  8A 44 03						     mov  al, si[H_Num]
1   586	0347  33 D2						     xor  dx, dx
1   587	0349  BD 0002						     mov  bp, 2d
1   588	034C  F7 F5						     div  bp
1   589	034E  8A 5C 01						     mov  bl, si[Y_Num]		     ; Y += AL
1   590	0351  02 D8						     add  bl, al
1   591	0353  8A 64 04						     mov  ah, si[Clr_Num]    ; AH = color
1   592	0356  E8 FE77						     call PrintStr
1   593
1   594	0359  5D						     pop bp				     ; pop  (7)
1   595	035A  5F						     pop di				     ; pop  (6)
1   596	035B  5E						     pop si				     ; pop  (5)
1   597	035C  5A						     pop dx				     ; pop  (4)
1   598	035D  59						     pop cx				     ; pop  (3)
1   599	035E  5B						     pop bx				     ; pop  (2)
1   600	035F  58						     pop ax				     ; pop  (1)
1   601
1   602	0360  C3						     ret
1   603	0361							     endp
1   604
1   605				     ;------------------------------------------------
1   606				     ;	     INPUT STR
1   607				     ;------------------------------------------------
1   608				     ; ENTRY:	     NONE
1   609				     ; EXIT:	     AX	= STR LEN
1   610				     ; DESTROYS:     AX
1   611				     ;------------------------------------------------
1   612
1   613	      =0064		     InputLen =	100
1   614	0361  64*(00)		     InputStr db     InputLen dup (0)
1   615
1   616	03C5			     Input		     proc
1   617
1   618	03C5  52						     push dx		     ; push (1)
1   619	03C6  33 D2						     xor  dx, dx	     ; i = 0
1   620
1   621	03C8  B4 01						     __Next:		     mov ah, 01h			    +
    622				     ; input char
1   623	03CA  CD 21										     int 21h
1   624
1   625	03CC  56										     push si			    +
    626				     ; push (2)
1   627
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 12
main.asm



1   628	03CD  33 F6										     xor si, si			    +
    629				     ; SI = 0
1   630
1   631	03CF  BE 0361r										     mov si, offset InputStr	    +
    632				     ; SI = InputStr + DX
1   633	03D2  03 F2										     add si, dx
1   634
1   635	03D4  88 04										     mov [si], al
1   636
1   637	03D6  5E										     pop si			    +
    638				     ; pop  (2)
1   639
1   640	03D7  3C 0D										     cmp al, 13d		    +
    641				     ; if( al == '\r' )
1   642	03D9  74 06										     je	__End
1   643
1   644	03DB  42										     inc dx			    +
    645				     ; i++
1   646	03DC  83 FA 64										     cmp dx, InputLen		    +
    647				     ; if( i ==	InputLen )
1   648	03DF  75 E7										     jne __Next
1   649
1   650	03E1							     __End:
1   651
1   652	03E1  8B C2						     mov ax, dx
1   653	03E3  5A						     pop dx		     ; pop  (1)
1   654
1   655	03E4  C3						     ret
1   656	03E5							     endp
1   657
1   658				     ;------------------------------------------------
1   659
    660				     include	     CMD_HNDL.ASM    ; CMD line	handler
1   661
1   662				     ;------------------------------------------------
1   663				     ;	     DIVIDE CMD	LINE ARGS ( FROM 82h + CL )
1   664				     ;	 TO ARRAY ( BYTE PTR )
1   665				     ;------------------------------------------------
1   666				     ; ENTRY:	 BX = ARR ADDR ( ARGS )
1   667				     ;		 CL = CMD LINE OFFSET
1   668				     ;		 CH = AMOUNT OF	NUMBERS	TO HANDLE
1   669				     ; EXIT:	     AX	= NEW CMD LINE OFFSET
1   670				     ; DESTROYS:     AX
1   671				     ;------------------------------------------------
1   672
1   673	03E5			     CmdLineHndl     proc
1   674
1   675	03E5  33 C0				     xor ax, ax	     ; AX = 0 (	num args counter = 0 )
1   676
1   677	03E7  51				     push cx	     ; push (1)
1   678	03E8  56				     push si	     ; push (2)
1   679
1   680	03E9  51				     push cx	     ; push (3)
1   681	03EA  32 ED				     xor  ch, ch     ; CH = 0
1   682	03EC  BE 0082				     mov  si, 82h    ; CurrSymPos = 82h	+ offset
1   683	03EF  03 F1				     add  si, cx
1   684	03F1  59				     pop  cx	     ; pop  (3)
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 13
main.asm



1   685
1   686	03F2  80 FD 00				     cmp ch, 0	     ; if( CH =	0 )
1   687	03F5  74 46				     je	__EndNum
1   688
1   689	03F7  51				     __NextNum:		 push cx	 ; push	(4)
1   690	03F8  33 C9							 xor  cx, cx	 ; i = 0
1   691
1   692	03FA  80 3C 20							 __Next:	 cmp byte ptr [si], ' '	     ; if( CurrSym  +
    693				     ==	' ' )
1   694	03FD  74 13									 je __End
1   695	03FF  80 3C 09									 cmp byte ptr [si], 9d	     ; if( CurrSym  +
    696				     ==	'\t' )
1   697	0402  74 0E									 je __End
1   698	0404  80 3C 00									 cmp byte ptr [si], 0d	     ; if( CurrSym  +
    699				     ==	'\0' )
1   700	0407  74 09									 je __End
1   701	0409  80 3C 0D									 cmp byte ptr [si], 13d	     ; if( CurrSym  +
    702				     ==	'\r' )
1   703	040C  74 04									 je __End
1   704
1   705
1   706	040E  41									 inc cx			     ; i++
1   707	040F  46									 inc si			     ; CurrSymPos++
1   708
1   709	0410  EB E8									 jmp __Next
1   710	0412								 __End:
1   711
1   712	0412  83 F9 00							 cmp cx, 0	 ; if( i == 0 )
1   713	0415  74 14							 je __EndArgsCheck
1   714
1   715									 ; STR to NUM
1   716	0417  53							 push bx	 ; push	(5)
1   717	0418  50							 push ax	 ; push	(6)
1   718	0419  8B DE							 mov  bx, si	 ; BX =	SI - i
1   719	041B  2B D9							 sub  bx, cx
1   720	041D  E8 0103							 call Atoi
1   721	0420  8B C8							 mov  cx, ax	 ; CX =	AX
1   722	0422  58							 pop  ax	 ; pop	(6)
1   723	0423  5B							 pop  bx	 ; pop	(5)
1   724
1   725									 ; put NUM to ARR
1   726	0424  53							 push bx		     ; push (7)
1   727	0425  03 D8							 add  bx, ax		     ; BX += CurrNumArg
1   728	0427  88 0F							 mov  byte ptr [bx], cl	     ; arr[AX] = NUM
1   729	0429  5B							 pop  bx		     ; pop  (7)
1   730
1   731	042A  40							 inc ax			     ; NumArgs++
1   732
1   733	042B								 __EndArgsCheck:
1   734
1   735	042B  59							 pop cx			     ; pop (4)
1   736
1   737	042C  3A C5							 cmp al, ch		     ; if( AL == CH )
1   738	042E  74 0D							 je __EndNum
1   739
1   740	0430  80 3C 0D							 cmp byte ptr [si], 13d	     ; if( CurrSym == '\r' )
1   741	0433  74 08							 je __EndNum
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 14
main.asm



1   742	0435  80 3C 00							 cmp byte ptr [si], 0d	     ; if( CurrSym == '\0' )
1   743	0438  74 03							 je __EndNum
1   744
1   745	043A  46							 inc si			     ; CurrSymPos++
1   746
1   747	043B  EB BA							 jmp __NextNum
1   748	043D					     __EndNum:
1   749
1   750	043D  8B C6				     mov ax, si	     ; AX = SI - 82h
1   751	043F  2D 0082				     sub ax, 82h
1   752
1   753	0442  5E				     pop si	     ; pop  (2)
1   754	0443  59				     pop cx	     ; pop  (1)
1   755
1   756	0444  C3				     ret
1   757	0445					     endp
1   758
1   759				     ;------------------------------------------------
    760				     include	     STR_HNDL.ASM    ; Str handler
1   761
1   762				     ;------------------------------------------------
1   763				     ;	     GET STR LEN
1   764				     ;------------------------------------------------
1   765				     ; ENTRY:	     BX	= STR ADDR
1   766				     ; EXIT:	     AX	= LEN
1   767				     ; EXPECTS:	 END SYM '$' ||	'\0' ||	'\r'
1   768				     ; DESTROYS: AX
1   769				     ;------------------------------------------------
1   770
1   771	0445			     StrLen	     proc
1   772
1   773	0445  33 C0				     xor ax, ax	     ; i = 0
1   774
1   775	0447  51						     push cx		     ; push (1)
1   776	0448  56						     push si		     ; push (2)
1   777
1   778	0449  8B F3				     __Next:		     mov  si, bx     ; SI = BX + i
1   779	044B  03 F0										 add  si, ax
1   780
1   781	044D  40										     inc  ax		     ; i++
1   782	044E  8B 0C										     mov  cx, [si]   ; CX = current +
    783				     symbol
1   784
1   785	0450  80 FD 24										     cmp  ch, '$'    ; if( ch == '$'+
    786				     )
1   787	0453  74 0C										     je	__End
1   788	0455  80 FD 00										     cmp  ch, 0d     ; if( ch ==    +
    789				     '\0' )
1   790	0458  74 07										     je	__End
1   791	045A  80 FD 0D										     cmp  ch, 13d    ; if( ch ==    +
    792				     '\r' )
1   793	045D  74 02										     je	__End
1   794
1   795	045F  EB E8										     jmp __Next
1   796
1   797	0461							     __End:
1   798	0461  5E						     pop si		     ; pop  (2)
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 15
main.asm



1   799	0462  59						     pop cx		     ; pop  (1)
1   800
1   801	0463  C3				     ret
1   802	0464					     endp
1   803
1   804				     ;------------------------------------------------
1   805				     ;	     GET ADDR OF CHR IN	ARR
1   806				     ;	     RET NULL IF NOT FOUND
1   807				     ;------------------------------------------------
1   808				     ; ENTRY:	     BX	= ARR ADDR
1   809				     ;			     CL	= CHR
1   810				     ;			     DX	= LEN OF THE COMPARED PART (IN BYTES)
1   811				     ; EXIT:	     AX	= ADDR OF CHR
1   812				     ; DESTROYS: AX
1   813				     ;------------------------------------------------
1   814
1   815	0464			     MemChr		     proc
1   816
1   817	0464  56						     push si		     ; push (1)
1   818
1   819	0465  33 C0						     xor ax, ax		     ; AX = NULL
1   820	0467  33 F6						     xor si, si		     ; i  = 0
1   821
1   822	0469  83 FA 00						     cmp dx, 0d		     ; if( len == 0 )
1   823	046C  74 0F						     je	__End
1   824
1   825	046E  38 08						     __Next:		     cmp bx[si], cl	     ; if( Addr[i]  +
    826				     ==	CHR )
1   827	0470  74 07										     je	__Found
1   828
1   829	0472  46										     inc si
1   830
1   831	0473  3B F2										     cmp si, dx
1   832	0475  74 06										     je	__End
1   833
1   834	0477  EB F5										     jmp __Next
1   835
1   836	0479  8B C3						     __Found:		     mov ax, bx			     ; AX = +
    837				     ArrAddr + i
1   838	047B  03 C6										     add ax, si
1   839
1   840	047D							     __End:
1   841	047D  5E						     pop si		     ; pop  (1)
1   842
1   843	047E  C3						     ret
1   844	047F							     endp
1   845
1   846				     ;------------------------------------------------
1   847				     ;	     GET ADDR OF CHR IN	STR
1   848				     ;	     RET NULL IF NOT FOUND
1   849				     ;------------------------------------------------
1   850				     ; ENTRY:	     BX	= ARR ADDR
1   851				     ;			     CL	= CHR
1   852				     ; EXIT:	     AX	= ADDR OF CHR
1   853				     ; DESTROYS: AX
1   854				     ;------------------------------------------------
1   855
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 16
main.asm



1   856	047F			     StrChr		     proc
1   857
1   858	047F  56						     push si		     ; push (1)
1   859
1   860	0480  33 C0						     xor ax, ax		     ; AX = NULL
1   861	0482  33 F6						     xor si, si		     ; i  = 0
1   862
1   863	0484  38 08						     __Next:		     cmp byte ptr bx[si], cl	     ; if(  +
    864				     Addr[i] ==	CHR )
1   865	0486  74 08										     je	__Found
1   866	0488  80 38 00										     cmp byte ptr bx[si], 0d	    +
    867				     ; if( Addr[i] == 0	)
1   868	048B  74 07										     je	__End
1   869
1   870	048D  46										     inc si
1   871
1   872	048E  EB F4										     jmp __Next
1   873
1   874	0490  8B C3						     __Found:		     mov ax, bx				    +
    875				     ; AX = ArrAddr + i
1   876	0492  03 C6										     add ax, si
1   877
1   878	0494							     __End:
1   879	0494  5E						     pop si		     ; pop  (1)
1   880
1   881	0495  C3						     ret
1   882	0496							     endp
1   883
1   884				     ;------------------------------------------------
1   885				     ;	     THE MEMSET	FUNCTION FILLS
1   886				     ;	     THE FIRST N BYTES OF THE MEMORY
1   887				     ;	     LOCATION POINTED TO BY THE
1   888				     ;	     DESTINATION ARGUMENT WITH THE
1   889				     ;	     CHARACTER SPECIFIED BY THE	CHR ARGUMENT
1   890				     ;------------------------------------------------
1   891				     ; ENTRY:	     BX	= DESTINATION
1   892				     ;			     CL	= CHR
1   893				     ;			     DX	= N
1   894				     ; EXIT:	     NONE
1   895				     ; DESTROYS: NONE
1   896				     ;------------------------------------------------
1   897
1   898	0496			     MemSet		     proc
1   899
1   900	0496  56						     push si		     ; push (1)
1   901
1   902	0497  33 F6						     xor si, si		     ; i = 0
1   903
1   904	0499  83 FA 00						     cmp dx, 0d		     ; if( N ==	0 )
1   905	049C  74 09						     je	__End
1   906
1   907	049E  88 08						     __Next:		     mov byte ptr bx[si], cl	     ; BX[i]+
    908				     = CHR
1   909
1   910	04A0  46										     inc si			    +
    911				     ; i++
1   912
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 17
main.asm



1   913	04A1  3B F2										     cmp si, dx			    +
    914				     ; if( i ==	N )
1   915	04A3  74 02										     je	__End
1   916
1   917	04A5  EB F7										     jmp __Next
1   918	04A7							     __End:
1   919	04A7  5E						     pop     si			     ; pop  (1)
1   920
1   921	04A8  C3						     ret
1   922	04A9							     endp
1   923
1   924				     ;------------------------------------------------
1   925				     ;	     THE MEMCPY	FUNCTION COPIES	N BYTES
1   926				     ;	     FROM THE ARRAY (SOURCE) TO	THE ARRAY
1   927				     ;	     (DESTINATION). IF THE ARRAYS OVERLAP,
1   928				     ;	     THE RESULT	OF THE COPY WILL BE UNDEFINED
1   929				     ;------------------------------------------------
1   930				     ; ENTRY:	     BX	= DESTINATION
1   931				     ;			     CX	= SOURCE
1   932				     ;			     DX	= N
1   933				     ; EXIT:	     NONE
1   934				     ; DESTROYS: NONE
1   935				     ;------------------------------------------------
1   936
1   937	04A9			     MemCpy		     proc
1   938
1   939	04A9  56						     push si		     ; push (1)
1   940	04AA  55						     push bp		     ; push (2)
1   941
1   942	04AB  8B E9						     mov bp, cx		     ; BP = CX
1   943
1   944	04AD  33 F6						     xor si, si		     ; i = 0
1   945
1   946	04AF  83 FA 00						     cmp dx, 0		     ; if( N ==	0 )
1   947	04B2  74 0D						     je	__End
1   948
1   949	04B4  52						     __Next:		     push dx				    +
    950				     ; push (3)
1   951	04B5  8A 12										     mov  dl, bp[si]
1   952	04B7  88 10										     mov  byte ptr bx[si], dl	    +
    953				     ; BX[i] = CX[i]
1   954	04B9  5A										     pop  dx			    +
    955				     ; pop  (3)
1   956
1   957	04BA  46										     inc si			    +
    958				     ; i++
1   959
1   960	04BB  3B F2										     cmp si, dx			    +
    961				     ; if( N ==	i )
1   962	04BD  74 02										     je	__End
1   963
1   964	04BF  EB F3										     jmp __Next
1   965
1   966	04C1							     __End:
1   967	04C1  5D						     pop bp		     ; pop  (2)
1   968	04C2  5E						     pop si		     ; pop  (1)
1   969
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 18
main.asm



1   970	04C3  C3						     ret
1   971	04C4							     endp
1   972
1   973				     ;------------------------------------------------
1   974				     ;	     THE STRCPY	FUNCTION COPIES	THE DATA FROM
1   975				     ;	     THE SOURCE	ARGUMENT TO THE	DESTINATION
1   976				     ;	     UNTIL THE END-OF-LINE( NULL ) CHARACTER
1   977				     ;	     IS	ENCOUNTERED.
1   978				     ;	     COPYING IS	DONE ALONG WITH	THE
1   979				     ;	     END-OF-LINE CHARACTER
1   980				     ;------------------------------------------------
1   981				     ; ENTRY:	     BX	= DESTINATION
1   982				     ;			     CX	= SOURCE
1   983				     ; EXIT:	     NONE
1   984				     ; DESTROYS: NONE
1   985				     ;------------------------------------------------
1   986
1   987	04C4			     StrCpy		     proc
1   988
1   989	04C4  52						     push dx		     ; push (1)
1   990	04C5  56						     push si		     ; push (2)
1   991	04C6  55						     push bp		     ; push (3)
1   992
1   993	04C7  8B E9						     mov bp, cx		     ; BP = CX
1   994
1   995	04C9  33 F6						     xor si, si		     ; i = 0
1   996
1   997	04CB  8A 12						     __Next:		     mov dl, bp[si]
1   998	04CD  88 10										     mov byte ptr bx[si], dl	    +
    999				     ; BX[i] = CX[i]
1  1000
1  1001	04CF  80 3A 00										     cmp byte ptr bp[si], 0d	    +
   1002				     ; if( CX[i] == 0 )
1  1003	04D2  74 03										     je	__End
1  1004
1  1005	04D4  46										     inc si			    +
   1006				     ; i++
1  1007
1  1008	04D5  EB F4										     jmp __Next
1  1009
1  1010	04D7							     __End:
1  1011	04D7  5D						     pop bp		     ; pop  (3)
1  1012	04D8  5E						     pop si		     ; pop  (2)
1  1013	04D9  5A						     pop dx		     ; pop  (1)
1  1014
1  1015	04DA  C3						     ret
1  1016	04DB							     endp
1  1017
1  1018				     ;------------------------------------------------
1  1019				     ;	     THE MEMCMP	FUNCTION COMPARES, BYTE	BY BYTE,
1  1020				     ;	     THE TWO ARRAYS ARR_1 AND ARR_2.
1  1021				     ;	     THE COMPARISON CONTINUES UNTIL N BYTES
1  1022				     ;	     HAVE BEEN CHECKED OR UNTIL	DIFFERENT
1  1023				     ;	     BYTES ARE ENCOUNTERED.
1  1024				     ;------------------------------------------------
1  1025				     ; ENTRY:	     BX	= ARR_1
1  1026				     ;			     CX	= ARR_2
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 19
main.asm



1  1027				     ;			     DX	= N
1  1028				     ; EXIT:	     AX	= 0 ( ARR_1[i] == ARR_2[i] : FOR i in [0; N-1] )
1  1029				     ;			     AX	> 0 ( ARR_1[i] >  ARR_2[i] )
1  1030				     ;			     AX	< 0 ( ARR_1[i] <  ARR_2[i] )
1  1031				     ; DESTROYS: AX
1  1032				     ;------------------------------------------------
1  1033
1  1034	04DB			     MemCmp		     proc
1  1035
1  1036	04DB  56						     push si		     ; push (1)
1  1037	04DC  55						     push bp		     ; push (2)
1  1038
1  1039	04DD  8B E9						     mov bp, cx		     ; BP = CX
1  1040
1  1041	04DF  33 F6						     xor si, si		     ; i  = 0
1  1042
1  1043	04E1  83 FA 00						     cmp dx, 0d		     ; if( N ==	0 )
1  1044	04E4  74 18						     je	__End
1  1045
1  1046	04E6  33 C0						     __Next:		     xor  ax, ax			    +
   1047				     ; AX  = 0
1  1048	04E8  8A 00										     mov  al, bx[si]		    +
   1049				     ; AL  = BX[i]
1  1050	04EA  52										     push dx			    +
   1051				     ; push (3)
1  1052	04EB  33 D2										     xor  dx, dx		    +
   1053				     ; DX = 0
1  1054	04ED  8A 12										     mov  dl, bp[si]
1  1055	04EF  2B C2										     sub  ax, dx		    +
   1056				     ; AX -= CX[i]
1  1057	04F1  5A										     pop  dx			    +
   1058				     ; pop  (3)
1  1059
1  1060	04F2  3D 0000										     cmp ax, 0d			    +
   1061				     ; if( AX != 0 )
1  1062	04F5  75 07										     jne __End
1  1063
1  1064	04F7  46										     inc si
1  1065
1  1066	04F8  3B F2										     cmp si, dx			    +
   1067				     ; if( i ==	N )
1  1068	04FA  74 02										     je	__End
1  1069
1  1070	04FC  EB E8										     jmp __Next
1  1071	04FE							     __End:
1  1072	04FE  5D						     pop bp		     ; pop  (2)
1  1073	04FF  5E						     pop si		     ; pop  (1)
1  1074
1  1075	0500  C3						     ret
1  1076	0501							     endp
1  1077
1  1078				     ;------------------------------------------------
1  1079				     ;	     THE MEMCMP	FUNCTION COMPARES, BYTE	BY BYTE,
1  1080				     ;	     THE TWO STRINGS STR_1 AND STR_2.
1  1081				     ;	     THE COMPARISON CONTINUES UNTIL THE
1  1082				     ;	     END-OF-LINE( NULL ) OR UNTIL DIFFERENT
1  1083				     ;	     BYTES ARE ENCOUNTERED.
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 20
main.asm



1  1084				     ;------------------------------------------------
1  1085				     ; ENTRY:	     BX	= STR_1
1  1086				     ;			     CX	= STR_2
1  1087				     ; EXIT:	     AX	= 0 ( STR_1[i] == STR_2[i] : FOR ALL i )
1  1088				     ;			     AX	> 0 ( STR_1[i] >  STR_2[i] )
1  1089				     ;			     AX	< 0 ( STR_1[i] <  STR_2[i] )
1  1090				     ; DESTROYS: AX
1  1091				     ;------------------------------------------------
1  1092
1  1093	0501			     StrCmp		     proc
1  1094
1  1095	0501  56						     push si		     ; push (1)
1  1096	0502  55						     push bp		     ; push (2)
1  1097
1  1098	0503  8B E9						     mov bp, cx		     ; BP = CX
1  1099
1  1100	0505  33 F6						     xor si, si		     ; i  = 0
1  1101
1  1102	0507  33 C0						     __Next:		     xor  ax, ax			    +
   1103				     ; AX  = 0
1  1104	0509  8A 00										     mov  al, bx[si]		    +
   1105				     ; AL  = BX[i]
1  1106	050B  52										     push dx			    +
   1107				     ; push (3)
1  1108	050C  33 D2										     xor  dx, dx		    +
   1109				     ; DX = 0
1  1110	050E  8A 12										     mov  dl, bp[si]
1  1111	0510  2B C2										     sub  ax, dx		    +
   1112				     ; AX -= CX[i]
1  1113	0512  5A										     pop  dx			    +
   1114				     ; pop  (3)
1  1115
1  1116	0513  3D 0000										     cmp ax, 0d			    +
   1117				     ; if( AX != 0 )
1  1118	0516  75 08										     jne __End
1  1119
1  1120	0518  80 38 00										     cmp byte ptr bx[si], 0d	    +
   1121				     ; if( BX[i] == 0 )
1  1122	051B  74 03										     je	__End
1  1123
1  1124	051D  46										     inc si
1  1125
1  1126	051E  EB E7										     jmp __Next
1  1127	0520							     __End:
1  1128	0520  5D						     pop bp		     ; pop  (2)
1  1129	0521  5E						     pop si		     ; pop  (1)
1  1130
1  1131	0522  C3						     ret
1  1132	0523							     endp
1  1133
1  1134				     ;------------------------------------------------
1  1135				     ;	     TRANSLATE STR TO NUMBER
1  1136				     ;------------------------------------------------
1  1137				     ; ENTRY:	     BX	= STR ADDR
1  1138				     ; EXIT:	     AX	= NUM
1  1139				     ; EXPECTS:	     CX	= STR LEN
1  1140				     ; DESTROYS:     AX
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 21
main.asm



1  1141				     ;------------------------------------------------
1  1142
1  1143	0523			     Atoi		     proc
1  1144
1  1145	0523  33 C0						     xor ax, ax		     ; AX = 0
1  1146
1  1147	0525  52						     push dx		     ; push (1)
1  1148	0526  56						     push si		     ; push (2)
1  1149
1  1150	0527  33 D2						     xor dx, dx		     ; i = 0
1  1151
1  1152	0529  8B F3						     __Next:		     mov si, bx		     ; SI = BX +    +
   1153				     STR_LEN - i
1  1154	052B  03 F1										     add si, cx
1  1155	052D  2B F2										     sub si, dx
1  1156	052F  83 EE 01										     sub si, 1
1  1157
1  1158	0532  51										     push cx		     ; push +
   1159				     (3)
1  1160
1  1161	0533  50										     push ax		     ; push +
   1162				     (4)
1  1163	0534  33 C0										     xor  ax, ax     ; AX = 0
1  1164	0536  8A 04										     mov  al, [si]   ; AX = [SI] -  +
   1165				     '0'
1  1166	0538  2C 30										     sub  al, 48d
1  1167
1  1168	053A  52										     push dx		     ; push +
   1169				     (5)
1  1170	053B  8B CA										     mov  cx, dx	     ; AX = +
   1171				     AX	* 10^DX
1  1172	053D  BE 000A										     mov  si, 10d
1  1173	0540  E3 08										     jcxz __NoMul
1  1174
1  1175	0542  F7 E6										     __Mul:		     mul si
1  1176
1  1177	0544  49														    +
   1178				     dec cx
1  1179	0545  83 F9 00														    +
   1180				     cmp cx, 0
1  1181	0548  75 F8														    +
   1182				     jne __Mul
1  1183
1  1184	054A											     __NoMul:
1  1185	054A  5A										     pop  dx		     ; pop  +
   1186				     (5)
1  1187	054B  8B C8										     mov  cx, ax
1  1188
1  1189	054D  58										     pop ax		     ; pop  +
   1190				     (4)
1  1191	054E  03 C1										     add ax, cx
1  1192	0550  59										     pop cx		     ; pop  +
   1193				     (3)
1  1194
1  1195	0551  42										     inc dx		     ; i++
1  1196
1  1197	0552  3B D1										     cmp dx, cx		     ; if( i+
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 22
main.asm



   1198				     ==	CX )
1  1199	0554  75 D3										     jne __Next
1  1200
1  1201	0556  5E						     pop si		     ; pop  (2)
1  1202	0557  5A						     pop dx		     ; pop  (1)
1  1203
1  1204	0558  C3						     ret
1  1205	0559							     endp
1  1206
1  1207				     ;------------------------------------------------
   1208				     include	     NUM_CNVR.ASM    ; Print AX	in BIN/DEC/HEX
1  1209
1  1210				     ;------------------------------------------------
1  1211				     ;	     PRINT AX IN BIN
1  1212				     ;------------------------------------------------
1  1213				     ; ENTRY:	     AX	= NUM
1  1214				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1  1215				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1  1216				     ; EXIT:	     NONE
1  1217				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1  1218				     ; DESTROYS:     DX	DI
1  1219				     ;------------------------------------------------
1  1220
1  1221	      =0010		     bin_len = 16d						     ; len of bin str
1  1222
1  1223	0559			     PrintBin		     proc
1  1224	0559  50						     push ax				     ; push (1)
1  1225
1  1226	055A  E8 FC56						     call GetVideoPos		     ; AX = Video position from	(X; +
   1227				     Y)
1  1228	055D  BF 0020						     mov di, bin_len * 2d    ; i = bin_len * 2 + AX
1  1229	0560  03 F8						     add di, ax
1  1230	0562  FD						     std
1  1231
1  1232	0563  58						     pop  ax				     ; pop  (1)
1  1233
1  1234	0564  33 D2						     xor dx, dx				     ; i = 0
1  1235
1  1236	0566  50						     push ax				     ; push (2)
1  1237
1  1238	0567  D1 E8						     __Next:		     shr ax, 1				    +
   1239				     ; AX /= 2
1  1240
1  1241	0569  50										     push ax			    +
   1242				     ; push (3)
1  1243
1  1244	056A  72 05										     jc	__One
1  1245
1  1246	056C  B0 30										     __Zero:		     mov al,+
   1247				     '0'		     ; '0'
1  1248	056E  EB 03 90														    +
   1249				     jmp __End
1  1250
1  1251	0571  B0 31										     __One:		     mov al,+
   1252				     '1'		     ; '1'
1  1253
1  1254	0573  B4 70						     __End:		     mov ah, 70h			    +
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 23
main.asm



   1255				     ; black on	white
1  1256
1  1257	0575  83 EF 02										     sub di, 2			    +
   1258				     ; print( ax ) // with 1 sym left( 2 bytes )
1  1259	0578  AB										     stosw
1  1260	0579  83 C7 02										     add di, 2
1  1261
1  1262	057C  58										     pop ax			    +
   1263				     ; pop (3)
1  1264
1  1265	057D  42										     inc dx
1  1266
1  1267	057E  83 FA 10										     cmp dx, bin_len		    +
   1268				     ; if( dx == bin_len )
1  1269	0581  75 E4										     jne __Next
1  1270
1  1271	0583  58						     pop ax				     ; pop  (2)
1  1272
1  1273	0584  C3						     ret
1  1274	0585							     endp
1  1275
1  1276				     ;------------------------------------------------
1  1277				     ;	     PRINT AX IN HEX
1  1278				     ;------------------------------------------------
1  1279				     ; ENTRY:	     AX	= NUM
1  1280				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1  1281				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1  1282				     ; EXIT:	     NONE
1  1283				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1  1284				     ; DESTROYS:     CX	DX DI
1  1285				     ;------------------------------------------------
1  1286
1  1287	      =0010		     hex_len = 16d						     ; len of hex str
1  1288
1  1289	0585			     PrintHex		     proc
1  1290
1  1291	0585  50						     push ax				     ; push (1)
1  1292
1  1293	0586  E8 FC2A						     call GetVideoPos		     ; AX = Video position from	(X; +
   1294				     Y)
1  1295	0589  BF 0020						     mov di, hex_len * 2d    ; i = hex_len * 2 + AX
1  1296	058C  03 F8						     add di, ax
1  1297	058E  FD						     std
1  1298
1  1299	058F  58						     pop  ax				     ; pop  (1)
1  1300
1  1301	0590  33 D2						     xor dx, dx				     ; i = 0
1  1302
1  1303	0592  50						     push ax				     ; push (2)
1  1304
1  1305	0593  B9 0000						     __Next:		     mov cx, 0			     ;	    +
   1306				     shifts counter
1  1307
1  1308	0596  52										     push dx			    +
   1309				     ; push (4)
1  1310	0597  BA 0000										     mov  dx, 0			    +
   1311				     ; DX = 0
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 24
main.asm



1  1312
1  1313	059A  D1 E8										     __Shift:		     shr ax,+
   1314				     1		     ; AX /= 2
1  1315
1  1316	059C  73 09														    +
   1317				     jnc __End
1  1318
1  1319	059E  50														    +
   1320				     __One:		     push ax		     ; push (3)
1  1321	059F  B8 0001														    +
   1322				     mov  ax, 1		     ; AX = 0001b
1  1323	05A2  D3 E0														    +
   1324				     shl  ax, cl	     ; DX += 2^CX
1  1325	05A4  03 D0														    +
   1326				     add  dx, ax
1  1327	05A6  58														    +
   1328				     pop      ax		     ; pop  (3)
1  1329
1  1330	05A7  41										     __End:		     inc cx +
   1331				     ; shifts counter ++
1  1332	05A8  83 F9 04														    +
   1333				     cmp cx, 4d		     ; if( numShifts ==	4 )
1  1334	05AB  75 ED														    +
   1335				     jne __Shift
1  1336
1  1337	05AD  8B C8										     mov cx, ax			    +
   1338				     ; CX = AX
1  1339
1  1340	05AF  83 FA 0A										     cmp dx, 10d		    +
   1341				     ; if( DX >= 10 )
1  1342	05B2  7D 08										     jge __Sym
1  1343
1  1344	05B4  83 C2 30										     __Digit:		     add dx,+
   1345				     48d	     ; print( DX + '0' )
1  1346	05B7  8A C2														    +
   1347				     mov al, dl
1  1348	05B9  EB 09 90														    +
   1349				     jmp __Print
1  1350
1  1351	05BC  83 EA 0A										     __Sym:		     sub dx,+
   1352				     10		     ; print( DX - 10 +	'A' )
1  1353	05BF  83 C2 41														    +
   1354				     add dx, 65d
1  1355	05C2  8A C2														    +
   1356				     mov al, dl
1  1357
1  1358	05C4  5A						     __Print:		     pop dx			     ; pop  +
   1359				     (4)
1  1360
1  1361	05C5  B4 70										     mov ah, 70h		    +
   1362				     ; black on	white
1  1363
1  1364	05C7  83 EF 02										     sub di, 2			    +
   1365				     ; print( ax ) // with 1 sym left( 2 bytes )
1  1366	05CA  AB										     stosw
1  1367	05CB  83 C7 02										     add di, 2
1  1368
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 25
main.asm



1  1369	05CE  8B C1										     mov ax, cx			    +
   1370				     ; AX = CX
1  1371
1  1372	05D0  42										     inc dx			    +
   1373				     ; i++
1  1374
1  1375	05D1  83 FA 10										     cmp dx, hex_len	     ; if(  +
   1376				     dx	== hex_len )
1  1377	05D4  75 BD										     jne __Next
1  1378
1  1379	05D6  58						     pop ax				     ; pop  (2)
1  1380
1  1381	05D7  C3						     ret
1  1382	05D8							     endp
1  1383
1  1384				     ;------------------------------------------------
1  1385				     ;	     PRINT AX IN DEC
1  1386				     ;------------------------------------------------
1  1387				     ; ENTRY:	     AX	= NUM
1  1388				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1  1389				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1  1390				     ; EXIT:	     NONE
1  1391				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1  1392				     ; DESTROYS:     DI
1  1393				     ;------------------------------------------------
1  1394
1  1395	      =0005		     dec_len = 5d
1  1396
1  1397	05D8			     PrintDec		     proc
1  1398
1  1399	05D8  50						     push ax				     ; push (1)
1  1400
1  1401	05D9  E8 FBD7						     call GetVideoPos		     ; AX = Video position from	(X; +
   1402				     Y)
1  1403	05DC  BF 000A						     mov di, dec_len * 2d    ; i = dec_len * 2 + AX
1  1404	05DF  03 F8						     add di, ax
1  1405	05E1  FD						     std
1  1406
1  1407	05E2  58						     pop  ax				     ; pop  (1)
1  1408
1  1409	05E3  51						     push cx				     ; push (2)
1  1410	05E4  52						     push dx				     ; push (3)
1  1411
1  1412	05E5  33 D2						     xor dx, dx				     ; i = 0
1  1413
1  1414	05E7  50						     push ax				     ; push (4)
1  1415
1  1416	05E8  B9 000A						     mov cx, 10d			     ; CX = 10
1  1417
1  1418	05EB  52						     __Next:		     push dx			     ; push +
   1419				     (5)
1  1420
1  1421	05EC  33 D2										     xor dx, dx			    +
   1422				     ; DX = 0
1  1423
1  1424	05EE  F7 F1										     div  cx			    +
   1425				     ; AX /= 10
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 26
main.asm



1  1426
1  1427	05F0  50										     push ax			    +
   1428				     ; push (6)
1  1429
1  1430	05F1  80 C2 30										     add  dl, 48d	     ; print+
   1431				     ( DL + '0'	)
1  1432	05F4  8A C2										     mov  al, dl
1  1433
1  1434	05F6  B4 70										     mov  ah, 70h	     ; black+
   1435				     on	white
1  1436
1  1437	05F8  83 EF 02										     sub di, 2			    +
   1438				     ; print( ax ) // with 1 sym left( 2 bytes )
1  1439	05FB  AB										     stosw
1  1440	05FC  83 C7 02										     add di, 2
1  1441
1  1442	05FF  58										     pop ax			    +
   1443				     ; pop  (6)
1  1444	0600  5A										     pop dx			    +
   1445				     ; pop  (5)
1  1446
1  1447	0601  42										     inc dx
1  1448
1  1449	0602  83 FA 05										     cmp dx, dec_len	     ; if(  +
   1450				     DX	== dec_len )
1  1451	0605  75 E4										     jne __Next
1  1452
1  1453	0607  58						     pop ax				     ; pop  (4)
1  1454
1  1455	0608  5A						     pop dx				     ; pop  (3)
1  1456	0609  59						     pop cx				     ; pop  (2)
1  1457
1  1458	060A  C3						     ret
1  1459	060B							     endp
1  1460
1  1461				     ;------------------------------------------------
1  1462				     ;	     PRINT AX IN BIN/HEX/DEC
1  1463				     ;------------------------------------------------
1  1464				     ; ENTRY:	     AX	= NUM
1  1465				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1  1466				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1  1467				     ; EXIT:	     NONE
1  1468				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1  1469				     ; DESTROYS:     CX	DX DI
1  1470				     ;------------------------------------------------
1  1471
1  1472	060B			     PrintNum		     proc
1  1473
1  1474	060B  53						     push bx				     ; push (1)
1  1475
1  1476	060C  E8 FF4A						     call PrintBin
1  1477
1  1478	060F  80 C7 11						     add bh, bin_len + 1d    ; X
1  1479	0612  E8 FF70						     call PrintHex
1  1480
1  1481	0615  80 C7 11						     add bh, hex_len + 1d    ; X
1  1482	0618  E8 FFBD						     call PrintDec
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 27
main.asm



1  1483
1  1484	061B  5B						     pop bx				     ; pop  (1)
1  1485
1  1486	061C  C3						     ret
1  1487	061D							     endp
1  1488
1  1489				     ;------------------------------------------------
   1490
   1491				     end		     Start
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 28
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/26/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "03:02:53"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI				  Near	 DGROUP:0523
BIN_LEN				  Number 0010
CLRSCREEN			  Near	 DGROUP:01A5
CLR_NUM				  Number 0004
CMDDATA				  Byte	 DGROUP:0153
CMDLINEHNDL			  Near	 DGROUP:03E5
DEC_LEN				  Number 0005
FILLSCREEN			  Near	 DGROUP:0177
GETVIDEOPOS			  Near	 DGROUP:01B3
HEX_LEN				  Number 0010
H_NUM				  Number 0003
INPUT				  Near	 DGROUP:03C5
INPUTLEN			  Number 0064
INPUTSTR			  Byte	 DGROUP:0361
MEMCHR				  Near	 DGROUP:0464
MEMCMP				  Near	 DGROUP:04DB
MEMCPY				  Near	 DGROUP:04A9
MEMSET				  Near	 DGROUP:0496
NAM				  Byte	 DGROUP:0167
NEW				  Byte	 DGROUP:016D
PRINTBIN			  Near	 DGROUP:0559
PRINTBOX			  Near	 DGROUP:0294
PRINTCHAR			  Near	 DGROUP:01C5
PRINTDEC			  Near	 DGROUP:05D8
PRINTHEX			  Near	 DGROUP:0585
PRINTHRZLINE			  Near	 DGROUP:01F6
PRINTNUM			  Near	 DGROUP:060B
PRINTSTR			  Near	 DGROUP:01D0
PRINTVRTLINE			  Near	 DGROUP:0233
START				  Near	 DGROUP:0100
STRCHR				  Near	 DGROUP:047F
STRCMP				  Near	 DGROUP:0501
STRCPY				  Near	 DGROUP:04C4
STRLEN				  Near	 DGROUP:0445
TYPE_0				  Byte	 DGROUP:0270
TYPE_1				  Byte	 DGROUP:0279
TYPE_2				  Byte	 DGROUP:0282
TYPE_3				  Byte	 DGROUP:028B
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 29
Symbol Table



TYPE_NUM			  Number 0005
W_NUM				  Number 0002
X_NUM				  Number 0000
Y_NUM				  Number 0001
__DIGIT				  Near	 DGROUP:05B4
__END				  Near	 DGROUP:0193
__END				  Near	 DGROUP:01F1
__END				  Near	 DGROUP:0232
__END				  Near	 DGROUP:026F
__END				  Near	 DGROUP:03E1
__END				  Near	 DGROUP:0412
__END				  Near	 DGROUP:0461
__END				  Near	 DGROUP:047D
__END				  Near	 DGROUP:0494
__END				  Near	 DGROUP:04A7
__END				  Near	 DGROUP:04C1
__END				  Near	 DGROUP:04D7
__END				  Near	 DGROUP:04FE
__END				  Near	 DGROUP:0520
__END				  Near	 DGROUP:0573
__END				  Near	 DGROUP:05A7
__ENDARGSCHECK			  Near	 DGROUP:042B
__ENDNEXTLINE			  Near	 DGROUP:01A1
__ENDNUM			  Near	 DGROUP:043D
__ENDPRINTING			  Near	 DGROUP:022E
__ENDPRINTING			  Near	 DGROUP:026B
__FOUND				  Near	 DGROUP:0479
__FOUND				  Near	 DGROUP:0490
__MUL				  Near	 DGROUP:0542
__NEXT				  Near	 DGROUP:0184
__NEXT				  Near	 DGROUP:01D6
__NEXT				  Near	 DGROUP:0221
__NEXT				  Near	 DGROUP:025E
__NEXT				  Near	 DGROUP:03C8
__NEXT				  Near	 DGROUP:03FA
__NEXT				  Near	 DGROUP:0449
__NEXT				  Near	 DGROUP:046E
__NEXT				  Near	 DGROUP:0484
__NEXT				  Near	 DGROUP:049E
__NEXT				  Near	 DGROUP:04B4
__NEXT				  Near	 DGROUP:04CB
__NEXT				  Near	 DGROUP:04E6
__NEXT				  Near	 DGROUP:0507
__NEXT				  Near	 DGROUP:0529
__NEXT				  Near	 DGROUP:0567
__NEXT				  Near	 DGROUP:0593
__NEXT				  Near	 DGROUP:05EB
__NEXTLINE			  Near	 DGROUP:0181
__NEXTNUM			  Near	 DGROUP:03F7
__NOMUL				  Near	 DGROUP:054A
__NOTUSERTYPE			  Near	 DGROUP:0120
__ONE				  Near	 DGROUP:0571
__ONE				  Near	 DGROUP:059E
__PRINT				  Near	 DGROUP:05C4
__SHIFT				  Near	 DGROUP:059A
__SYM				  Near	 DGROUP:05BC
__ZERO				  Near	 DGROUP:056C
Turbo Assembler	 Version 4.1	    02/26/23 03:02:53	    Page 30
Symbol Table




Macro Name

EXIT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  061D Word	  Public  CODE
