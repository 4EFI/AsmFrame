Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 1
main.asm



      1
      2				     .186
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals __
      8
      9				     include	     TOOLS.ASM			     ; Exit
1    10
1    11				     ;------------------------------------------------
1    12				     ;	     EXIT PROGRAM
1    13				     ;------------------------------------------------
1    14				     ; Entry:	     NONE
1    15				     ; EXIT:	     NONE
1    16				     ; DESTROYS: AX
1    17				     ;------------------------------------------------
1    18
1    19				     EXIT	     macro
1    20							     nop
1    21							     mov ax, 4c00h
1    22							     int 21h
1    23							     nop
1    24							     endm
1    25
1    26				     ;------------------------------------------------
     27
     28				     ;------------------------------------------------
     29
     30	0100  BB B800		     Start:	     mov bx, 0b800h			     ; ES = VideoSeg
     31	0103  8E C3					     mov es, bx
     32
     33	0105  B1 00					     mov cl, 0					     ; Cmd line	box handler
     34	0107  B5 06					     mov ch, 6
     35	0109  BB 013Fr					     mov bx, offset CmdData
     36	010C  E8 0273					     call CmdLineHndl
     37
     38	010F  80 3E 0144r 00				     cmp CmdData[Type_Num], 0	     ; if( Type	!= 0 )
     39	0114  75 0A					     jne     __NotUserType
     40
     41	0116  8A C8					     mov cl, al					     ; User's box handler
     42	0118  B5 09					     mov ch, 9
     43	011A  BB 024Cr					     mov bx, offset Type_0
     44	011D  E8 0262					     call CmdLineHndl
     45
     46	0120						     __NotUserType:
     47
     48	0120  B8 0020					     mov ax, ' '
     49	0123  E8 0060					     call ClrScreen
     50
     51	0126  BB 013Fr					     mov bx, offset CmdData
     52	0129  E8 013B					     call PrintBox
     53
     54	012C  B4 07					     mov ah, 07h			     ; Set color
     55	012E  B7 01					     mov bh, 1d				     ; X
     56	0130  B3 05					     mov bl, 5d				     ; Y
     57	0132  B9 0153r					     mov cx, offset Nam
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 2
main.asm



     58	0135  E8 0079					     call PrintStr
     59
     60							     ; mov ax, 123d			     ; set NUM
     61							     ; mov bh, 1d			     ; X
     62							     ; mov bl, 5d			     ; Y
     63							     ; call PrintNum
     64
     65							     EXIT
1    66	0138  90					     nop
1    67	0139  B8 4C00					     mov ax, 4c00h
1    68	013C  CD 21					     int 21h
1    69	013E  90					     nop
     70
     71				     ;------------------------------------------------
     72
     73	013F  14*(00)		     CmdData db	     20	dup (0)		     ; Cmd line	data
     74
     75	0153  56 6C 61 64 00	     Nam     db	     "Vlad", 0
     76
     77				     include	     SCR_HNDL.ASM    ; Clear screen function
1    78
1    79				     ; SCREEN HANDLER
1    80
1    81				     ;------------------------------------------------
1    82				     ;	     FILL SCREEN BY SYM
1    83				     ;	     FROM ( X; Y ) to (	X + WIDTH; Y + HEIGHT )
1    84				     ;------------------------------------------------
1    85				     ; ENTRY:	     AH	= COLOR	ATTR
1    86				     ;			     AL	= SYM
1    87				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1    88				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1    89				     ;			     CH	= WIDTH
1    90				     ;			     CL	= HEIGHT
1    91				     ; EXIT:	     NONE
1    92				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    93				     ; DESTROYS:     NONE
1    94				     ;------------------------------------------------
1    95
1    96	0158			     FillScreen		     proc
1    97
1    98	0158  53						     push bx			     ; push (1)
1    99	0159  51						     push cx			     ; push (2)
1   100	015A  52						     push dx			     ; push (3)
1   101
1   102	015B  50						     push ax			     ; push (4)
1   103	015C  E8 0035						     call GetVideoPos
1   104	015F  8B D8						     mov bx, ax
1   105	0161  58						     pop ax			     ; pop  (4)
1   106
1   107	0162  8A F5						     __NextLine:		     mov dh, ch		     ; i =  +
    108				     CH
1   109
1   110	0164  53											     push bx		    +
    111				     ; push (5)
1   112
1   113	0165  26: 89 07											     __Next:		    +
    114				     mov es:[bx], ax
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 3
main.asm



1   115	0168  83 C3 02														    +
    116				     add bx, 2
1   117
1   118	016B  FE CE														    +
    119				     dec dh		     ; i--
1   120
1   121	016D  80 FE 00														    +
    122				     cmp dh, 0d		     ; if( dh == 0 )
1   123	0170  74 02														    +
    124				     je	__End
1   125
1   126	0172  EB F1														    +
    127				     jmp __Next
1   128	0174												     __End:
1   129
1   130	0174  5B											     pop bx		    +
    131				     ; pop  (5)
1   132
1   133	0175  81 C3 00A0										     add bx, 160d    ; BX +=+
    134				     2*80
1   135
1   136	0179  FE C9											     dec cl		    +
    137				     ; CL--
1   138
1   139	017B  80 F9 00											     cmp cl, 0d	     ; if(  +
    140				     CL	== 0 )
1   141	017E  74 02											     je	__EndNextLine
1   142
1   143	0180  EB E0											     jmp __NextLine
1   144	0182							     __EndNextLine:
1   145
1   146	0182  5A						     pop dx			     ; pop  (3)
1   147	0183  59						     pop cx			     ; pop  (2)
1   148	0184  5B						     pop bx			     ; pop  (1)
1   149
1   150	0185  C3						     ret
1   151	0186							     endp
1   152
1   153				     ;------------------------------------------------
1   154				     ;	     CLEAR SCREEN BY SYM
1   155				     ;------------------------------------------------
1   156				     ; ENTRY:	     AH	= COLOR	ATTR
1   157				     ;			     AL	= SYM
1   158				     ; EXIT:	     NONE
1   159				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   160				     ; DESTROYS:     NONE
1   161				     ;------------------------------------------------
1   162
1   163	0186			     ClrScreen		     proc
1   164
1   165	0186  53						     push bx			     ; push (1)
1   166	0187  51						     push cx			     ; push (2)
1   167
1   168	0188  33 DB						     xor bx, bx			     ; X = 0; Y	= 0
1   169	018A  B5 50						     mov ch, 80d
1   170	018C  B1 19						     mov cl, 25d
1   171	018E  E8 FFC7						     call FillScreen
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 4
main.asm



1   172
1   173	0191  59						     pop cx			     ; pop  (2)
1   174	0192  5B						     pop bx			     ; pop  (1)
1   175
1   176	0193  C3						     ret
1   177	0194							     endp
1   178
1   179				     ;------------------------------------------------
1   180				     ;	     GET VIDEO POS FROM	(X; Y)
1   181				     ;------------------------------------------------
1   182				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1   183				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   184				     ; EXIT:	     AX	= POS
1   185				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   186				     ; DESTROYS:     AX
1   187				     ;------------------------------------------------
1   188
1   189	0194			     GetVideoPos	     proc
1   190
1   191	0194  D0 E7						     shl bh, 1		     ; bh /= 2
1   192
1   193	0196  52						     push dx		     ; push (1)
1   194
1   195	0197  B0 A0						     mov al, 160d    ; ax = 160	* Y + 2	* X
1   196	0199  F6 E3						     mul bl
1   197	019B  BA 0000						     mov dx, 0
1   198	019E  02 D7						     add dl, bh
1   199	01A0  03 C2						     add ax, dx
1   200
1   201	01A2  5A						     pop dx		     ; pop  (1)
1   202
1   203	01A3  D0 EF						     shr bh, 1		     ; bh *= 2
1   204
1   205	01A5  C3						     ret
1   206	01A6							     endp
1   207
1   208				     ;------------------------------------------------
1   209				     ;	     PRINT SYM IN (X; Y)
1   210				     ;------------------------------------------------
1   211				     ; ENTRY:	     AH	= SYM COLOR
1   212				     ;			     AL	= SYM CHAR
1   213				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   214				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   215				     ; EXIT:	     NONE
1   216				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   217				     ; DESTROYS:     NONE
1   218				     ;------------------------------------------------
1   219
1   220	01A6			     PrintChar		     proc
1   221
1   222	01A6  57						     push di		     ; push (1)
1   223	01A7  50						     push ax		     ; push (2)
1   224
1   225	01A8  E8 FFE9						     call GetVideoPos
1   226
1   227	01AB  8B F8						     mov di, ax		     ; print( ax )
1   228	01AD  58						     pop ax		     ; pop  (2)
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 5
main.asm



1   229	01AE  AB						     stosw
1   230
1   231	01AF  5F						     pop di		     ; pop  (1)
1   232
1   233	01B0  C3						     ret
1   234	01B1							     endp
1   235
1   236				     ;------------------------------------------------
1   237				     ;	     PRINT STR IN (X; Y)
1   238				     ;	     END SYM '\0' or '$'
1   239				     ;------------------------------------------------
1   240				     ; ENTRY:	     AH	= SYM COLOR
1   241				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   242				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   243				     ;			     CX	= STR ADDR
1   244				     ; EXIT:	     NONE
1   245				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   246				     ; DESTROYS:     NONE
1   247				     ;------------------------------------------------
1   248
1   249	01B1			     PrintStr		     proc
1   250
1   251	01B1  50						     push ax		     ; push (1)
1   252	01B2  53						     push bx		     ; push (2)
1   253	01B3  52						     push dx		     ; push (3)
1   254	01B4  56						     push si		     ; push (4)
1   255
1   256	01B5  8B F1						     mov si, cx		     ; SI = StrAddr
1   257
1   258	01B7  8A 14						     __Next:		     mov dl, [si]    ; DX = CurrSym
1   259
1   260	01B9  80 FA 00										     cmp dl, 0d		     ; if(  +
    261				     DL	== 0 )
1   262	01BC  74 0F										     je	__End
1   263	01BE  80 FA 24										     cmp dl, '$'	     ; if(  +
    264				     DL	== '$' )
1   265	01C1  74 0A										     je	__End
1   266
1   267	01C3  8A 04										     mov al, [si]    ; AL = CurrSym
1   268	01C5  E8 FFDE										     call PrintChar
1   269
1   270	01C8  FE C7										     inc bh		     ; X++
1   271	01CA  46										     inc si		     ;	    +
    272				     CurrSymPos++
1   273
1   274	01CB  E2 EA										     loop __Next
1   275	01CD							     __End:
1   276
1   277	01CD  5E						     pop si		     ; pop  (4)
1   278	01CE  5A						     pop dx		     ; pop  (3)
1   279	01CF  58						     pop ax		     ; pop  (2)
1   280	01D0  5B						     pop bx		     ; pop  (1)
1   281
1   282	01D1  C3						     ret
1   283	01D2							     endp
1   284
1   285				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 6
main.asm



1   286				     ;	     PRINT HORIZONTAL LINE IN (X; Y)
1   287				     ;------------------------------------------------
1   288				     ; ENTRY:	     AH	= SYM COLOR
1   289				     ;			     AL	= SYM CHAR
1   290				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   291				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   292				     ;			     CH	= WIDTH
1   293				     ;			     DH	= LEFT	SYM
1   294				     ;			     DL	= RIGHT	SYM
1   295				     ; EXIT:	     NONE
1   296				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   297				     ; DESTROYS:     NONE
1   298				     ;------------------------------------------------
1   299
1   300	01D2			     PrintHrzLine    proc
1   301
1   302	01D2  80 FD 01						     cmp ch, 1			     ; if( ch <= 1 ) ret
1   303	01D5  76 37						     jbe __End
1   304
1   305	01D7  53						     push bx			     ; push (1)
1   306	01D8  52						     push dx			     ; push (2)
1   307
1   308
1   309	01D9  50						     push ax			     ; push (3)
1   310	01DA  8A C6						     mov al, dh			     ; printf( "%c", LeftSym )
1   311	01DC  E8 FFC7						     call PrintChar
1   312	01DF  58						     pop ax			     ; pop  (3)
1   313
1   314	01E0  50						     push ax			     ; push (4)
1   315	01E1  53						     push bx			     ; push (5)
1   316	01E2  02 FD						     add bh, ch			     ; X += ( WIDTH - 1	)
1   317	01E4  80 EF 01						     sub bh, 1
1   318	01E7  8A C2						     mov al, dl			     ; printf( "%c", RightSym )
1   319	01E9  E8 FFBA						     call PrintChar
1   320	01EC  5B						     pop bx			     ; pop  (5)
1   321	01ED  58						     pop ax			     ; pop  (4)
1   322
1   323	01EE  53						     push bx			     ; push (6)
1   324	01EF  51						     push cx			     ; push (7)
1   325
1   326	01F0  80 C7 01						     add bh, 1			     ; X += 1
1   327	01F3  80 ED 02						     sub ch, 2			     ; WIDTH -=	2
1   328
1   329	01F6  80 FD 00						     cmp ch, 0			     ; if( ch == 0 )
1   330	01F9  74 0F						     je	     __EndPrinting
1   331
1   332	01FB  33 D2						     xor dx, dx			     ; i = 0
1   333
1   334	01FD  E8 FFA6						     __Next:		     call PrintChar
1   335
1   336	0200  FE C7										     inc bh
1   337	0202  FE C6										     inc dh
1   338
1   339	0204  3A F5										     cmp dh, ch
1   340	0206  74 02										     je	 __EndPrinting
1   341
1   342	0208  EB F3										     jmp __Next
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 7
main.asm



1   343
1   344	020A							     __EndPrinting:
1   345
1   346	020A  59						     pop cx			     ; pop  (7)
1   347	020B  5B						     pop bx			     ; pop  (6)
1   348
1   349
1   350	020C  5A						     pop dx			     ; pop  (2)
1   351	020D  5B						     pop bx			     ; pop  (1)
1   352
1   353	020E							     __End:
1   354	020E  C3						     ret
1   355	020F							     endp
1   356
1   357				     ;------------------------------------------------
1   358				     ;	     PRINT VERTICAL LINE IN (X;	Y)
1   359				     ;------------------------------------------------
1   360				     ; ENTRY:	     AH	= SYM COLOR
1   361				     ;			     AL	= SYM CHAR
1   362				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   363				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   364				     ;			     CL	= HEIGHT
1   365				     ;			     DH	= TOP  SYM
1   366				     ;			     DL	= DOWN SYM
1   367				     ; EXIT:	     NONE
1   368				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   369				     ; DESTROYS:     NONE
1   370				     ;------------------------------------------------
1   371
1   372	020F			     PrintVrtLine    proc
1   373
1   374	020F  80 F9 01						     cmp cl, 1			     ; if( cl <= 1 ) ret
1   375	0212  76 37						     jbe __End
1   376
1   377	0214  53						     push bx			     ; push (1)
1   378	0215  52						     push dx			     ; push (2)
1   379
1   380
1   381	0216  50						     push ax			     ; push (3)
1   382	0217  8A C6						     mov al, dh			     ; printf( "%c", TopSym )
1   383	0219  E8 FF8A						     call PrintChar
1   384	021C  58						     pop ax			     ; pop  (3)
1   385
1   386	021D  50						     push ax			     ; push (4)
1   387	021E  53						     push bx			     ; push (5)
1   388	021F  02 D9						     add bl, cl			     ; Y += ( HEIGHT - 1 )
1   389	0221  80 EB 01						     sub bl, 1
1   390	0224  8A C2						     mov al, dl			     ; printf( "%c", DownSym )
1   391	0226  E8 FF7D						     call PrintChar
1   392	0229  5B						     pop bx			     ; pop  (5)
1   393	022A  58						     pop ax			     ; pop  (4)
1   394
1   395	022B  53						     push bx			     ; push (6)
1   396	022C  51						     push cx			     ; push (7)
1   397
1   398	022D  80 C3 01						     add bl, 1			     ; Y += 1
1   399	0230  80 E9 02						     sub cl, 2			     ; HEIGHT -= 2
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 8
main.asm



1   400
1   401	0233  80 F9 00						     cmp cl, 0			     ; if( cl == 0 )
1   402	0236  74 0F						     je	     __EndPrinting
1   403
1   404	0238  33 D2						     xor dx, dx			     ; i = 0
1   405
1   406	023A  E8 FF69						     __Next:		     call PrintChar
1   407
1   408	023D  FE C3										     inc bl
1   409	023F  FE C2										     inc dl
1   410
1   411	0241  3A D1										     cmp dl, cl
1   412	0243  74 02										     je	 __EndPrinting
1   413
1   414	0245  EB F3										     jmp __Next
1   415
1   416	0247							     __EndPrinting:
1   417
1   418	0247  59						     pop cx			     ; pop  (7)
1   419	0248  5B						     pop bx			     ; pop  (6)
1   420
1   421
1   422	0249  5A						     pop dx			     ; pop  (2)
1   423	024A  5B						     pop bx			     ; pop  (1)
1   424
1   425	024B							     __End:
1   426	024B  C3						     ret
1   427	024C							     endp
1   428
1   429				     ;------------------------------------------------
1   430				     ;	     PRINT BOX
1   431				     ;------------------------------------------------
1   432				     ; ENTRY:	     AX	= STR  ADDR
1   433				     ;			     BX	= DATA ADDR
1   434				     ; EXIT:	     NONE
1   435				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   436				     ; DESTROYS:     NONE
1   437				     ;------------------------------------------------
1   438
1   439	      =0009		     TypeSize =	9
1   440
1   441				     ; User's type
1   442	024C  09*(00)		     Type_0  db		     9 dup (0)
1   443
1   444				     ; Template	types
1   445				     ;				     0		     1		     2		     3		    +
    446				     4		     5		     6		     7		     9
1   447				     ;				     lt		     ld		     rt		     rd		    +
    448				     lv		     rv		     th		     dh		     fill
1   449	0255  C9 C8 BB BC BA BA	CD+  Type_1  db		     0c9h,   0c8h,   0bbh,   0bch,   0bah,   0bah,   0cdh,   0cdh,   0d
    450	      CD 00
1   451	025E  03 03 03 03 03 03	03+  Type_2  db		     003h,   003h,   003h,   003h,   003h,   003h,   003h,   003h,   0d
    452	      03 00
1   453
1   454	      =0000		     X_Num    =	0
1   455	      =0001		     Y_Num    =	1
1   456	      =0002		     W_Num    =	2
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 9
main.asm



1   457	      =0003		     H_Num    =	3
1   458	      =0004		     Clr_Num  =	4
1   459	      =0005		     Type_Num =	5
1   460
1   461	0267			     PrintBox		     proc
1   462
1   463	0267  50						     push ax				     ; push (1)
1   464	0268  53						     push bx				     ; push (2)
1   465	0269  51						     push cx				     ; push (3)
1   466	026A  52						     push dx				     ; push (4)
1   467	026B  56						     push si				     ; push (5)
1   468	026C  57						     push di				     ; push (6)
1   469	026D  55						     push bp				     ; push (7)
1   470
1   471	026E  8B F3						     mov si, bx				     ; SI = DATA ADDR( BX )
1   472
1   473	0270  33 C0						     xor ax, ax				     ; BP = Type_0 + Type * 9
1   474	0272  8A 47 05						     mov al, bx[Type_Num]
1   475	0275  B9 0009						     mov cx, 9d
1   476	0278  F7 E1						     mul cx
1   477	027A  8B E8						     mov bp, ax
1   478	027C  81 C5 024Cr					     add bp, offset Type_0
1   479
1   480	0280  8A 67 04						     mov ah, bx[Clr_Num]	     ; AH = Color
1   481
1   482	0283  8A 6F 02						     mov ch, bx[W_Num]		     ; CH = WIDTH
1   483	0286  8A 4F 03						     mov cl, bx[H_Num]		     ; CL = HEIGHT
1   484
1   485	0289  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   486	028B  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
1   487	028E  8A 46 06						     mov  al, bp[6]		     ; AL = horizontal sym
1   488	0291  8A 76 00						     mov  dh, bp[0]		     ; DH = left  top  sym
1   489	0294  8A 56 02						     mov  dl, bp[2]		     ; DL = right top  sym
1   490	0297  E8 FF38						     call PrintHrzLine		     ; Print top horizontal line
1   491
1   492	029A  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   493	029C  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
1   494	029F  8A 46 04						     mov  al, bp[4]		     ; AL = vertical  sym
1   495	02A2  8A 76 00						     mov  dh, bp[0]		     ; DH = left top  sym
1   496	02A5  8A 56 01						     mov  dl, bp[1]		     ; DL = left down sym
1   497	02A8  E8 FF64						     call PrintVrtLine		     ; Print left vertical line
1   498
1   499	02AB  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   500	02AD  8A 54 01						     mov  dl, si[Y_Num]		 ; Y +=	( HEIGHT - 1 )
1   501	02B0  02 D1						     add  dl, cl
1   502	02B2  80 EA 01						     sub  dl, 1
1   503	02B5  8A DA						     mov  bl, dl			     ; BL = Y
1   504	02B7  8A 46 07						     mov  al, bp[7]		     ; AL = horizontal sym
1   505	02BA  8A 76 01						     mov  dh, bp[1]		     ; DH = left  down sym
1   506	02BD  8A 56 03						     mov  dl, bp[3]		     ; DL = right down sym
1   507	02C0  E8 FF0F						     call PrintHrzLine		     ; Print down horizontal line
1   508
1   509	02C3  8A 14						     mov  dl, si[X_Num]		 ; X +=	( WIDTH	- 1 )
1   510	02C5  02 D5						     add  dl, ch
1   511	02C7  80 EA 01						     sub  dl, 1
1   512	02CA  8A FA						     mov  bh, dl			     ; BH = X
1   513	02CC  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 10
main.asm



1   514	02CF  8A 46 05						     mov  al, bp[5]		     ; AL = vertical   sym
1   515	02D2  8A 76 02						     mov  dh, bp[2]		     ; DH = right top  sym
1   516	02D5  8A 56 03						     mov  dl, bp[3]		     ; DL = right down sym
1   517	02D8  E8 FF34						     call PrintVrtLine		     ; Print right vertical line
1   518
1   519	02DB  53						     push bx				     ; push (8)
1   520	02DC  51						     push cx				     ; push (9)
1   521	02DD  8A 3C						     mov  bh, si[X_Num]		     ; BH = X +	1
1   522	02DF  80 C7 01						     add  bh, 1
1   523	02E2  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y +	1
1   524	02E5  80 C3 01						     add  bl, 1
1   525	02E8  8A 46 08						     mov  al, bp[8]		     ; AL = filling sym
1   526	02EB  80 ED 02						     sub  ch, 2				     ; WIDTH  -= 2
1   527	02EE  80 E9 02						     sub  cl, 2				     ; HEIGHT -= 2
1   528	02F1  E8 FE64						     call FillScreen		     ; Fill Box
1   529	02F4  59						     pop cx				     ; pop  (9)
1   530	02F5  5B						     pop bx				     ; pop  (8)
1   531
1   532	02F6  5D						     pop bp				     ; pop  (7)
1   533	02F7  5F						     pop di				     ; pop  (6)
1   534	02F8  5E						     pop si				     ; pop  (5)
1   535	02F9  5A						     pop dx				     ; pop  (4)
1   536	02FA  59						     pop cx				     ; pop  (3)
1   537	02FB  5B						     pop bx				     ; pop  (2)
1   538	02FC  58						     pop ax				     ; pop  (1)
1   539
1   540	02FD  C3						     ret
1   541	02FE							     endp
1   542
1   543				     ;------------------------------------------------
1   544				     ;	     INPUT STR
1   545				     ;------------------------------------------------
1   546				     ; ENTRY:	     NONE
1   547				     ; EXIT:	     AX	= STR LEN
1   548				     ; DESTROYS:     AX
1   549				     ;------------------------------------------------
1   550
1   551	      =0064		     InputLen =	100
1   552	02FE  64*(00)		     InputStr db     InputLen dup (0)
1   553
1   554	0362			     Input		     proc
1   555
1   556	0362  52						     push dx		     ; push (1)
1   557	0363  33 D2						     xor  dx, dx	     ; i = 0
1   558
1   559	0365  B4 01						     __Next:		     mov ah, 01h			    +
    560				     ; input char
1   561	0367  CD 21										     int 21h
1   562
1   563	0369  56										     push si			    +
    564				     ; push (2)
1   565
1   566	036A  33 F6										     xor si, si			    +
    567				     ; SI = 0
1   568
1   569	036C  BE 02FEr										     mov si, offset InputStr	    +
    570				     ; SI = InputStr + DX
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 11
main.asm



1   571	036F  03 F2										     add si, dx
1   572
1   573	0371  88 04										     mov [si], al
1   574
1   575	0373  5E										     pop si			    +
    576				     ; pop  (2)
1   577
1   578	0374  3C 0D										     cmp al, 13d		    +
    579				     ; if( al == '\r' )
1   580	0376  74 06										     je	__End
1   581
1   582	0378  42										     inc dx			    +
    583				     ; i++
1   584	0379  83 FA 64										     cmp dx, InputLen		    +
    585				     ; if( i ==	InputLen )
1   586	037C  75 E7										     jne __Next
1   587
1   588	037E							     __End:
1   589
1   590	037E  8B C2						     mov ax, dx
1   591	0380  5A						     pop dx		     ; pop  (1)
1   592
1   593	0381  C3						     ret
1   594	0382							     endp
1   595
1   596				     ;------------------------------------------------
1   597
    598				     include	     CMD_HNDL.ASM    ; CMD line	handler
1   599
1   600				     ;------------------------------------------------
1   601				     ;	     DIVIDE CMD	LINE ARGS ( FROM 82h + CL )
1   602				     ;	 TO ARRAY ( BYTE PTR )
1   603				     ;------------------------------------------------
1   604				     ; ENTRY:	 BX = ARR ADDR ( ARGS )
1   605				     ;		 CL = CMD LINE OFFSET
1   606				     ;		 CH = AMOUNT OF	NUMBERS	TO HANDLE
1   607				     ; EXIT:	     AX	= NEW CMD LINE OFFSET
1   608				     ; DESTROYS:     AX
1   609				     ;------------------------------------------------
1   610
1   611	0382			     CmdLineHndl     proc
1   612
1   613	0382  33 C0				     xor ax, ax	     ; AX = 0 (	num args counter = 0 )
1   614
1   615	0384  51				     push cx	     ; push (1)
1   616	0385  56				     push si	     ; push (2)
1   617
1   618	0386  51				     push cx	     ; push (3)
1   619	0387  32 ED				     xor  ch, ch     ; CH = 0
1   620	0389  BE 0082				     mov  si, 82h    ; CurrSymPos = 82h	+ offset
1   621	038C  03 F1				     add  si, cx
1   622	038E  59				     pop  cx	     ; pop  (3)
1   623
1   624	038F  80 FD 00				     cmp ch, 0	     ; if( CH =	0 )
1   625	0392  74 46				     je	__EndNum
1   626
1   627	0394  51				     __NextNum:		 push cx	 ; push	(4)
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 12
main.asm



1   628	0395  33 C9							 xor  cx, cx	 ; i = 0
1   629
1   630	0397  80 3C 20							 __Next:	 cmp byte ptr [si], ' '	     ; if( CurrSym  +
    631				     ==	' ' )
1   632	039A  74 13									 je __End
1   633	039C  80 3C 09									 cmp byte ptr [si], 9d	     ; if( CurrSym  +
    634				     ==	'\t' )
1   635	039F  74 0E									 je __End
1   636	03A1  80 3C 00									 cmp byte ptr [si], 0d	     ; if( CurrSym  +
    637				     ==	'\0' )
1   638	03A4  74 09									 je __End
1   639	03A6  80 3C 0D									 cmp byte ptr [si], 13d	     ; if( CurrSym  +
    640				     ==	'\r' )
1   641	03A9  74 04									 je __End
1   642
1   643
1   644	03AB  41									 inc cx			     ; i++
1   645	03AC  46									 inc si			     ; CurrSymPos++
1   646
1   647	03AD  EB E8									 jmp __Next
1   648	03AF								 __End:
1   649
1   650	03AF  83 F9 00							 cmp cx, 0	 ; if( i == 0 )
1   651	03B2  74 14							 je __EndArgsCheck
1   652
1   653									 ; STR to NUM
1   654	03B4  53							 push bx	 ; push	(5)
1   655	03B5  50							 push ax	 ; push	(6)
1   656	03B6  8B DE							 mov  bx, si	 ; BX =	SI - i
1   657	03B8  2B D9							 sub  bx, cx
1   658	03BA  E8 003F							 call Atoi
1   659	03BD  8B C8							 mov  cx, ax	 ; CX =	AX
1   660	03BF  58							 pop  ax	 ; pop	(6)
1   661	03C0  5B							 pop  bx	 ; pop	(5)
1   662
1   663									 ; put NUM to ARR
1   664	03C1  53							 push bx		     ; push (7)
1   665	03C2  03 D8							 add  bx, ax		     ; BX += CurrNumArg
1   666	03C4  88 0F							 mov  byte ptr [bx], cl	     ; arr[AX] = NUM
1   667	03C6  5B							 pop  bx		     ; pop  (7)
1   668
1   669	03C7  40							 inc ax			     ; NumArgs++
1   670
1   671	03C8								 __EndArgsCheck:
1   672
1   673	03C8  59							 pop cx			     ; pop (4)
1   674
1   675	03C9  3A C5							 cmp al, ch		     ; if( AL == CH )
1   676	03CB  74 0D							 je __EndNum
1   677
1   678	03CD  80 3C 0D							 cmp byte ptr [si], 13d	     ; if( CurrSym == '\r' )
1   679	03D0  74 08							 je __EndNum
1   680	03D2  80 3C 00							 cmp byte ptr [si], 0d	     ; if( CurrSym == '\0' )
1   681	03D5  74 03							 je __EndNum
1   682
1   683	03D7  46							 inc si			     ; CurrSymPos++
1   684
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 13
main.asm



1   685	03D8  EB BA							 jmp __NextNum
1   686	03DA					     __EndNum:
1   687
1   688	03DA  8B C6				     mov ax, si	     ; AX = SI - 82h
1   689	03DC  2D 0082				     sub ax, 82h
1   690
1   691	03DF  5E				     pop si	     ; pop  (2)
1   692	03E0  59				     pop cx	     ; pop  (1)
1   693
1   694	03E1  C3				     ret
1   695	03E2					     endp
1   696
1   697				     ;------------------------------------------------
    698				     include	     STR_HNDL.ASM    ; Str handler
1   699
1   700				     ;------------------------------------------------
1   701				     ;	     GET STR LEN
1   702				     ;------------------------------------------------
1   703				     ; ENTRY:	     BX	= STR ADDR
1   704				     ; EXIT:	     AX	= LEN
1   705				     ; EXPECTS:	 END SYM = '$' or '\0'
1   706				     ; DESTROYS: AX
1   707				     ;------------------------------------------------
1   708
1   709	03E2			     StrLen	     proc
1   710
1   711	03E2  33 C0				     xor ax, ax	     ; i = 0
1   712
1   713	03E4  51						     push cx		     ; push (1)
1   714	03E5  56						     push si		     ; push (2)
1   715
1   716	03E6  8B F3				     __Next:		     mov  si, bx     ; SI = BX + i
1   717	03E8  03 F0										 add  si, ax
1   718
1   719	03EA  40										     inc  ax		     ; i++
1   720	03EB  8B 0C										     mov  cx, [si]   ; CX = current +
    721				     symbol
1   722
1   723	03ED  80 FD 24										     cmp  ch, '$'    ; if( ch == '$'+
    724				     )
1   725	03F0  74 07										     je	__End
1   726	03F2  80 FD 00										     cmp  ch, 0d     ; if( ch ==    +
    727				     '\0' )
1   728	03F5  74 02										     je	__End
1   729
1   730	03F7  EB ED										     jmp __Next
1   731
1   732	03F9							     __End:
1   733	03F9  5E						     pop si		     ; pop  (2)
1   734	03FA  59						     pop cx		     ; pop  (1)
1   735
1   736	03FB  C3				     ret
1   737	03FC					     endp
1   738
1   739				     ;------------------------------------------------
1   740				     ;	     TRANSLATE STR TO NUMBER
1   741				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 14
main.asm



1   742				     ; ENTRY:	     BX	= STR ADDR
1   743				     ; EXIT:	     AX	= NUM
1   744				     ; EXPECTS:	     CX	= STR LEN
1   745				     ; DESTROYS:     AX
1   746				     ;------------------------------------------------
1   747
1   748	03FC			     Atoi		     proc
1   749
1   750	03FC  33 C0						     xor ax, ax		     ; AX = 0
1   751
1   752	03FE  52						     push dx		     ; push (1)
1   753	03FF  56						     push si		     ; push (2)
1   754
1   755	0400  33 D2						     xor dx, dx		     ; i = 0
1   756
1   757	0402  8B F3						     __Next:		     mov si, bx		     ; SI = BX +    +
    758				     STR_LEN - i
1   759	0404  03 F1										     add si, cx
1   760	0406  2B F2										     sub si, dx
1   761	0408  83 EE 01										     sub si, 1
1   762
1   763	040B  51										     push cx		     ; push +
    764				     (3)
1   765
1   766	040C  50										     push ax		     ; push +
    767				     (4)
1   768	040D  33 C0										     xor  ax, ax     ; AX = 0
1   769	040F  8A 04										     mov  al, [si]   ; AX = [SI] -  +
    770				     '0'
1   771	0411  2C 30										     sub  al, 48d
1   772
1   773	0413  52										     push dx		     ; push +
    774				     (5)
1   775	0414  8B CA										     mov  cx, dx	     ; AX = +
    776				     AX	* 10^DX
1   777	0416  BE 000A										     mov  si, 10d
1   778	0419  E3 08										     jcxz __NoMul
1   779
1   780	041B  F7 E6										     __Mul:		     mul si
1   781
1   782	041D  49														    +
    783				     dec cx
1   784	041E  83 F9 00														    +
    785				     cmp cx, 0
1   786	0421  75 F8														    +
    787				     jne __Mul
1   788
1   789	0423											     __NoMul:
1   790	0423  5A										     pop  dx		     ; pop  +
    791				     (5)
1   792	0424  8B C8										     mov  cx, ax
1   793
1   794	0426  58										     pop ax		     ; pop  +
    795				     (4)
1   796	0427  03 C1										     add ax, cx
1   797	0429  59										     pop cx		     ; pop  +
    798				     (3)
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 15
main.asm



1   799
1   800	042A  42										     inc dx		     ; i++
1   801
1   802	042B  3B D1										     cmp dx, cx		     ; if( i+
    803				     ==	CX )
1   804	042D  75 D3										     jne __Next
1   805
1   806	042F  5E						     pop si		     ; pop  (2)
1   807	0430  5A						     pop dx		     ; pop  (1)
1   808
1   809	0431  C3						     ret
1   810	0432							     endp
1   811
1   812				     ;------------------------------------------------
    813				     include	     NUM_CNVR.ASM    ; Print AX	in BIN/DEC/HEX
1   814
1   815				     ;------------------------------------------------
1   816				     ;	     PRINT AX IN BIN
1   817				     ;------------------------------------------------
1   818				     ; ENTRY:	     AX	= NUM
1   819				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   820				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   821				     ; EXIT:	     NONE
1   822				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   823				     ; DESTROYS:     DX	DI
1   824				     ;------------------------------------------------
1   825
1   826	      =0010		     bin_len = 16d						     ; len of bin str
1   827
1   828	0432			     PrintBin		     proc
1   829	0432  50						     push ax				     ; push (1)
1   830
1   831	0433  E8 FD5E						     call GetVideoPos		     ; AX = Video position from	(X; +
    832				     Y)
1   833	0436  BF 0020						     mov di, bin_len * 2d    ; i = bin_len * 2 + AX
1   834	0439  03 F8						     add di, ax
1   835	043B  FD						     std
1   836
1   837	043C  58						     pop  ax				     ; pop  (1)
1   838
1   839	043D  33 D2						     xor dx, dx				     ; i = 0
1   840
1   841	043F  50						     push ax				     ; push (2)
1   842
1   843	0440  D1 E8						     __Next:		     shr ax, 1				    +
    844				     ; AX /= 2
1   845
1   846	0442  50										     push ax			    +
    847				     ; push (3)
1   848
1   849	0443  72 05										     jc	__One
1   850
1   851	0445  B0 30										     __Zero:		     mov al,+
    852				     '0'		     ; '0'
1   853	0447  EB 03 90														    +
    854				     jmp __End
1   855
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 16
main.asm



1   856	044A  B0 31										     __One:		     mov al,+
    857				     '1'		     ; '1'
1   858
1   859	044C  B4 70						     __End:		     mov ah, 70h			    +
    860				     ; black on	white
1   861
1   862	044E  83 EF 02										     sub di, 2			    +
    863				     ; print( ax ) // with 1 sym left( 2 bytes )
1   864	0451  AB										     stosw
1   865	0452  83 C7 02										     add di, 2
1   866
1   867	0455  58										     pop ax			    +
    868				     ; pop (3)
1   869
1   870	0456  42										     inc dx
1   871
1   872	0457  83 FA 10										     cmp dx, bin_len		    +
    873				     ; if( dx == bin_len )
1   874	045A  75 E4										     jne __Next
1   875
1   876	045C  58						     pop ax				     ; pop  (2)
1   877
1   878	045D  C3						     ret
1   879	045E							     endp
1   880
1   881				     ;------------------------------------------------
1   882				     ;	     PRINT AX IN HEX
1   883				     ;------------------------------------------------
1   884				     ; ENTRY:	     AX	= NUM
1   885				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   886				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   887				     ; EXIT:	     NONE
1   888				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   889				     ; DESTROYS:     CX	DX DI
1   890				     ;------------------------------------------------
1   891
1   892	      =0010		     hex_len = 16d						     ; len of hex str
1   893
1   894	045E			     PrintHex		     proc
1   895
1   896	045E  50						     push ax				     ; push (1)
1   897
1   898	045F  E8 FD32						     call GetVideoPos		     ; AX = Video position from	(X; +
    899				     Y)
1   900	0462  BF 0020						     mov di, hex_len * 2d    ; i = hex_len * 2 + AX
1   901	0465  03 F8						     add di, ax
1   902	0467  FD						     std
1   903
1   904	0468  58						     pop  ax				     ; pop  (1)
1   905
1   906	0469  33 D2						     xor dx, dx				     ; i = 0
1   907
1   908	046B  50						     push ax				     ; push (2)
1   909
1   910	046C  B9 0000						     __Next:		     mov cx, 0			     ;	    +
    911				     shifts counter
1   912
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 17
main.asm



1   913	046F  52										     push dx			    +
    914				     ; push (4)
1   915	0470  BA 0000										     mov  dx, 0			    +
    916				     ; DX = 0
1   917
1   918	0473  D1 E8										     __Shift:		     shr ax,+
    919				     1		     ; AX /= 2
1   920
1   921	0475  73 09														    +
    922				     jnc __End
1   923
1   924	0477  50														    +
    925				     __One:		     push ax		     ; push (3)
1   926	0478  B8 0001														    +
    927				     mov  ax, 1		     ; AX = 0001b
1   928	047B  D3 E0														    +
    929				     shl  ax, cl	     ; DX += 2^CX
1   930	047D  03 D0														    +
    931				     add  dx, ax
1   932	047F  58														    +
    933				     pop      ax		     ; pop  (3)
1   934
1   935	0480  41										     __End:		     inc cx +
    936				     ; shifts counter ++
1   937	0481  83 F9 04														    +
    938				     cmp cx, 4d		     ; if( numShifts ==	4 )
1   939	0484  75 ED														    +
    940				     jne __Shift
1   941
1   942	0486  8B C8										     mov cx, ax			    +
    943				     ; CX = AX
1   944
1   945	0488  83 FA 0A										     cmp dx, 10d		    +
    946				     ; if( DX >= 10 )
1   947	048B  7D 08										     jge __Sym
1   948
1   949	048D  83 C2 30										     __Digit:		     add dx,+
    950				     48d	     ; print( DX + '0' )
1   951	0490  8A C2														    +
    952				     mov al, dl
1   953	0492  EB 09 90														    +
    954				     jmp __Print
1   955
1   956	0495  83 EA 0A										     __Sym:		     sub dx,+
    957				     10		     ; print( DX - 10 +	'A' )
1   958	0498  83 C2 41														    +
    959				     add dx, 65d
1   960	049B  8A C2														    +
    961				     mov al, dl
1   962
1   963	049D  5A						     __Print:		     pop dx			     ; pop  +
    964				     (4)
1   965
1   966	049E  B4 70										     mov ah, 70h		    +
    967				     ; black on	white
1   968
1   969	04A0  83 EF 02										     sub di, 2			    +
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 18
main.asm



    970				     ; print( ax ) // with 1 sym left( 2 bytes )
1   971	04A3  AB										     stosw
1   972	04A4  83 C7 02										     add di, 2
1   973
1   974	04A7  8B C1										     mov ax, cx			    +
    975				     ; AX = CX
1   976
1   977	04A9  42										     inc dx			    +
    978				     ; i++
1   979
1   980	04AA  83 FA 10										     cmp dx, hex_len	     ; if(  +
    981				     dx	== hex_len )
1   982	04AD  75 BD										     jne __Next
1   983
1   984	04AF  58						     pop ax				     ; pop  (2)
1   985
1   986	04B0  C3						     ret
1   987	04B1							     endp
1   988
1   989				     ;------------------------------------------------
1   990				     ;	     PRINT AX IN DEC
1   991				     ;------------------------------------------------
1   992				     ; ENTRY:	     AX	= NUM
1   993				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   994				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   995				     ; EXIT:	     NONE
1   996				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   997				     ; DESTROYS:     DI
1   998				     ;------------------------------------------------
1   999
1  1000	      =0005		     dec_len = 5d
1  1001
1  1002	04B1			     PrintDec		     proc
1  1003
1  1004	04B1  50						     push ax				     ; push (1)
1  1005
1  1006	04B2  E8 FCDF						     call GetVideoPos		     ; AX = Video position from	(X; +
   1007				     Y)
1  1008	04B5  BF 000A						     mov di, dec_len * 2d    ; i = dec_len * 2 + AX
1  1009	04B8  03 F8						     add di, ax
1  1010	04BA  FD						     std
1  1011
1  1012	04BB  58						     pop  ax				     ; pop  (1)
1  1013
1  1014	04BC  51						     push cx				     ; push (2)
1  1015	04BD  52						     push dx				     ; push (3)
1  1016
1  1017	04BE  33 D2						     xor dx, dx				     ; i = 0
1  1018
1  1019	04C0  50						     push ax				     ; push (4)
1  1020
1  1021	04C1  B9 000A						     mov cx, 10d			     ; CX = 10
1  1022
1  1023	04C4  52						     __Next:		     push dx			     ; push +
   1024				     (5)
1  1025
1  1026	04C5  33 D2										     xor dx, dx			    +
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 19
main.asm



   1027				     ; DX = 0
1  1028
1  1029	04C7  F7 F1										     div  cx			    +
   1030				     ; AX /= 10
1  1031
1  1032	04C9  50										     push ax			    +
   1033				     ; push (6)
1  1034
1  1035	04CA  80 C2 30										     add  dl, 48d	     ; print+
   1036				     ( DL + '0'	)
1  1037	04CD  8A C2										     mov  al, dl
1  1038
1  1039	04CF  B4 70										     mov  ah, 70h	     ; black+
   1040				     on	white
1  1041
1  1042	04D1  83 EF 02										     sub di, 2			    +
   1043				     ; print( ax ) // with 1 sym left( 2 bytes )
1  1044	04D4  AB										     stosw
1  1045	04D5  83 C7 02										     add di, 2
1  1046
1  1047	04D8  58										     pop ax			    +
   1048				     ; pop  (6)
1  1049	04D9  5A										     pop dx			    +
   1050				     ; pop  (5)
1  1051
1  1052	04DA  42										     inc dx
1  1053
1  1054	04DB  83 FA 05										     cmp dx, dec_len	     ; if(  +
   1055				     DX	== dec_len )
1  1056	04DE  75 E4										     jne __Next
1  1057
1  1058	04E0  58						     pop ax				     ; pop  (4)
1  1059
1  1060	04E1  5A						     pop dx				     ; pop  (3)
1  1061	04E2  59						     pop cx				     ; pop  (2)
1  1062
1  1063	04E3  C3						     ret
1  1064	04E4							     endp
1  1065
1  1066				     ;------------------------------------------------
1  1067				     ;	     PRINT AX IN BIN/HEX/DEC
1  1068				     ;------------------------------------------------
1  1069				     ; ENTRY:	     AX	= NUM
1  1070				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1  1071				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1  1072				     ; EXIT:	     NONE
1  1073				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1  1074				     ; DESTROYS:     CX	DX DI
1  1075				     ;------------------------------------------------
1  1076
1  1077	04E4			     PrintNum		     proc
1  1078
1  1079	04E4  53						     push bx				     ; push (1)
1  1080
1  1081	04E5  E8 FF4A						     call PrintBin
1  1082
1  1083	04E8  80 C7 11						     add bh, bin_len + 1d    ; X
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 20
main.asm



1  1084	04EB  E8 FF70						     call PrintHex
1  1085
1  1086	04EE  80 C7 11						     add bh, hex_len + 1d    ; X
1  1087	04F1  E8 FFBD						     call PrintDec
1  1088
1  1089	04F4  5B						     pop bx				     ; pop  (1)
1  1090
1  1091	04F5  C3						     ret
1  1092	04F6							     endp
1  1093
1  1094				     ;------------------------------------------------
   1095
   1096				     end		     Start
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 21
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/24/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "14:52:51"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI				  Near	 DGROUP:03FC
BIN_LEN				  Number 0010
CLRSCREEN			  Near	 DGROUP:0186
CLR_NUM				  Number 0004
CMDDATA				  Byte	 DGROUP:013F
CMDLINEHNDL			  Near	 DGROUP:0382
DEC_LEN				  Number 0005
FILLSCREEN			  Near	 DGROUP:0158
GETVIDEOPOS			  Near	 DGROUP:0194
HEX_LEN				  Number 0010
H_NUM				  Number 0003
INPUT				  Near	 DGROUP:0362
INPUTLEN			  Number 0064
INPUTSTR			  Byte	 DGROUP:02FE
NAM				  Byte	 DGROUP:0153
PRINTBIN			  Near	 DGROUP:0432
PRINTBOX			  Near	 DGROUP:0267
PRINTCHAR			  Near	 DGROUP:01A6
PRINTDEC			  Near	 DGROUP:04B1
PRINTHEX			  Near	 DGROUP:045E
PRINTHRZLINE			  Near	 DGROUP:01D2
PRINTNUM			  Near	 DGROUP:04E4
PRINTSTR			  Near	 DGROUP:01B1
PRINTVRTLINE			  Near	 DGROUP:020F
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:03E2
TYPESIZE			  Number 0009
TYPE_0				  Byte	 DGROUP:024C
TYPE_1				  Byte	 DGROUP:0255
TYPE_2				  Byte	 DGROUP:025E
TYPE_NUM			  Number 0005
W_NUM				  Number 0002
X_NUM				  Number 0000
Y_NUM				  Number 0001
__DIGIT				  Near	 DGROUP:048D
__END				  Near	 DGROUP:0174
__END				  Near	 DGROUP:01CD
__END				  Near	 DGROUP:020E
Turbo Assembler	 Version 4.1	    02/24/23 14:52:51	    Page 22
Symbol Table



__END				  Near	 DGROUP:024B
__END				  Near	 DGROUP:037E
__END				  Near	 DGROUP:03AF
__END				  Near	 DGROUP:03F9
__END				  Near	 DGROUP:044C
__END				  Near	 DGROUP:0480
__ENDARGSCHECK			  Near	 DGROUP:03C8
__ENDNEXTLINE			  Near	 DGROUP:0182
__ENDNUM			  Near	 DGROUP:03DA
__ENDPRINTING			  Near	 DGROUP:020A
__ENDPRINTING			  Near	 DGROUP:0247
__MUL				  Near	 DGROUP:041B
__NEXT				  Near	 DGROUP:0165
__NEXT				  Near	 DGROUP:01B7
__NEXT				  Near	 DGROUP:01FD
__NEXT				  Near	 DGROUP:023A
__NEXT				  Near	 DGROUP:0365
__NEXT				  Near	 DGROUP:0397
__NEXT				  Near	 DGROUP:03E6
__NEXT				  Near	 DGROUP:0402
__NEXT				  Near	 DGROUP:0440
__NEXT				  Near	 DGROUP:046C
__NEXT				  Near	 DGROUP:04C4
__NEXTLINE			  Near	 DGROUP:0162
__NEXTNUM			  Near	 DGROUP:0394
__NOMUL				  Near	 DGROUP:0423
__NOTUSERTYPE			  Near	 DGROUP:0120
__ONE				  Near	 DGROUP:044A
__ONE				  Near	 DGROUP:0477
__PRINT				  Near	 DGROUP:049D
__SHIFT				  Near	 DGROUP:0473
__SYM				  Near	 DGROUP:0495
__ZERO				  Near	 DGROUP:0445

Macro Name

EXIT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  04F6 Word	  Public  CODE
