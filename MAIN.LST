Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 1
main.asm



      1
      2				     .186
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals __
      8
      9				     include	     TOOLS.ASM					     ; Exit
1    10
1    11				     ;------------------------------------------------
1    12				     ;	     EXIT PROGRAM
1    13				     ;------------------------------------------------
1    14				     ; Entry:	     NONE
1    15				     ; EXIT:	     NONE
1    16				     ; DESTROYS: AX
1    17				     ;------------------------------------------------
1    18
1    19				     EXIT	     macro
1    20							     nop
1    21							     mov ax, 4c00h
1    22							     int 21h
1    23							     nop
1    24							     endm
1    25
1    26				     ;------------------------------------------------
     27
     28				     ;------------------------------------------------
     29
     30	0100  BB B800		     Start:	     mov bx, 0b800h			     ; ES = VideoSeg
     31	0103  8E C3					     mov es, bx
     32
     33	0105  B1 00					     mov cl, 0					     ; Cmd line	box handler
     34	0107  B5 06					     mov ch, 6
     35	0109  BB 0138r					     mov bx, offset CmdData
     36	010C  E8 02A7					     call CmdLineHndl
     37
     38	010F  80 3E 013Dr 00				     cmp CmdData[Type_Num], 0	     ; if( Type	!= 0 )
     39	0114  75 0A					     jne     __NotUserType
     40
     41	0116  8A C8					     mov cl, al					     ; User's box handler
     42	0118  B5 09					     mov ch, 9
     43	011A  BB 024Ar					     mov bx, offset Type_0
     44	011D  E8 0296					     call CmdLineHndl
     45
     46	0120						     __NotUserType:
     47
     48	0120  50					     push ax
     49	0121  B8 0020					     mov  ax, '	'
     50	0124  E8 0058					     call ClrScreen
     51	0127  58					     pop  ax
     52
     53	0128  05 0083					     add ax, 83h
     54	012B  BB 0138r					     mov bx, offset CmdData
     55	012E  E8 0134					     call PrintBox
     56
     57							     ; mov ax, 123d			     ; set NUM
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 2
main.asm



     58							     ; mov bh, 1d			     ; X
     59							     ; mov bl, 5d			     ; Y
     60							     ; call PrintNum
     61
     62							     EXIT
1    63	0131  90					     nop
1    64	0132  B8 4C00					     mov ax, 4c00h
1    65	0135  CD 21					     int 21h
1    66	0137  90					     nop
     67
     68				     ;------------------------------------------------
     69
     70	0138  14*(00)		     CmdData db	     20	dup (0)		     ; Cmd line	data
     71
     72	014C  56 6C 61 64 00	     Nam     db	     "Vlad", 0
     73
     74				     include	     SCR_HNDL.ASM    ; Clear screen function
1    75
1    76				     ; SCREEN HANDLER
1    77
1    78				     ;------------------------------------------------
1    79				     ;	     FILL SCREEN BY SYM
1    80				     ;	     FROM ( X; Y ) to (	X + WIDTH; Y + HEIGHT )
1    81				     ;------------------------------------------------
1    82				     ; ENTRY:	     AH	= COLOR	ATTR
1    83				     ;			     AL	= SYM
1    84				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1    85				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1    86				     ;			     CH	= WIDTH
1    87				     ;			     CL	= HEIGHT
1    88				     ; EXIT:	     NONE
1    89				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    90				     ; DESTROYS:     NONE
1    91				     ;------------------------------------------------
1    92
1    93	0151			     FillScreen		     proc
1    94
1    95	0151  53						     push bx			     ; push (1)
1    96	0152  51						     push cx			     ; push (2)
1    97	0153  52						     push dx			     ; push (3)
1    98
1    99	0154  50						     push ax			     ; push (4)
1   100	0155  E8 0035						     call GetVideoPos
1   101	0158  8B D8						     mov bx, ax
1   102	015A  58						     pop ax			     ; pop  (4)
1   103
1   104	015B  8A F5						     __NextLine:		     mov dh, ch		     ; i =  +
    105				     CH
1   106
1   107	015D  53											     push bx		    +
    108				     ; push (5)
1   109
1   110	015E  26: 89 07											     __Next:		    +
    111				     mov es:[bx], ax
1   112	0161  83 C3 02														    +
    113				     add bx, 2
1   114
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 3
main.asm



1   115	0164  FE CE														    +
    116				     dec dh		     ; i--
1   117
1   118	0166  80 FE 00														    +
    119				     cmp dh, 0d		     ; if( dh == 0 )
1   120	0169  74 02														    +
    121				     je	__End
1   122
1   123	016B  EB F1														    +
    124				     jmp __Next
1   125	016D												     __End:
1   126
1   127	016D  5B											     pop bx		    +
    128				     ; pop  (5)
1   129
1   130	016E  81 C3 00A0										     add bx, 160d    ; BX +=+
    131				     2*80
1   132
1   133	0172  FE C9											     dec cl		    +
    134				     ; CL--
1   135
1   136	0174  80 F9 00											     cmp cl, 0d	     ; if(  +
    137				     CL	== 0 )
1   138	0177  74 02											     je	__EndNextLine
1   139
1   140	0179  EB E0											     jmp __NextLine
1   141	017B							     __EndNextLine:
1   142
1   143	017B  5A						     pop dx			     ; pop  (3)
1   144	017C  59						     pop cx			     ; pop  (2)
1   145	017D  5B						     pop bx			     ; pop  (1)
1   146
1   147	017E  C3						     ret
1   148	017F							     endp
1   149
1   150				     ;------------------------------------------------
1   151				     ;	     CLEAR SCREEN BY SYM
1   152				     ;------------------------------------------------
1   153				     ; ENTRY:	     AH	= COLOR	ATTR
1   154				     ;			     AL	= SYM
1   155				     ; EXIT:	     NONE
1   156				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   157				     ; DESTROYS:     NONE
1   158				     ;------------------------------------------------
1   159
1   160	017F			     ClrScreen		     proc
1   161
1   162	017F  53						     push bx			     ; push (1)
1   163	0180  51						     push cx			     ; push (2)
1   164
1   165	0181  33 DB						     xor bx, bx			     ; X = 0; Y	= 0
1   166	0183  B5 50						     mov ch, 80d
1   167	0185  B1 19						     mov cl, 25d
1   168	0187  E8 FFC7						     call FillScreen
1   169
1   170	018A  59						     pop cx			     ; pop  (2)
1   171	018B  5B						     pop bx			     ; pop  (1)
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 4
main.asm



1   172
1   173	018C  C3						     ret
1   174	018D							     endp
1   175
1   176				     ;------------------------------------------------
1   177				     ;	     GET VIDEO POS FROM	(X; Y)
1   178				     ;------------------------------------------------
1   179				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1   180				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   181				     ; EXIT:	     AX	= POS
1   182				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   183				     ; DESTROYS:     AX
1   184				     ;------------------------------------------------
1   185
1   186	018D			     GetVideoPos	     proc
1   187
1   188	018D  D0 E7						     shl bh, 1		     ; bh /= 2
1   189
1   190	018F  52						     push dx		     ; push (1)
1   191
1   192	0190  B0 A0						     mov al, 160d    ; ax = 160	* Y + 2	* X
1   193	0192  F6 E3						     mul bl
1   194	0194  BA 0000						     mov dx, 0
1   195	0197  02 D7						     add dl, bh
1   196	0199  03 C2						     add ax, dx
1   197
1   198	019B  5A						     pop dx		     ; pop  (1)
1   199
1   200	019C  D0 EF						     shr bh, 1		     ; bh *= 2
1   201
1   202	019E  C3						     ret
1   203	019F							     endp
1   204
1   205				     ;------------------------------------------------
1   206				     ;	     PRINT SYM IN (X; Y)
1   207				     ;------------------------------------------------
1   208				     ; ENTRY:	     AH	= SYM COLOR
1   209				     ;			     AL	= SYM CHAR
1   210				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   211				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   212				     ; EXIT:	     NONE
1   213				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   214				     ; DESTROYS:     NONE
1   215				     ;------------------------------------------------
1   216
1   217	019F			     PrintChar		     proc
1   218
1   219	019F  57						     push di		     ; push (1)
1   220	01A0  50						     push ax		     ; push (2)
1   221
1   222	01A1  E8 FFE9						     call GetVideoPos
1   223
1   224	01A4  8B F8						     mov di, ax		     ; print( ax )
1   225	01A6  58						     pop ax		     ; pop  (2)
1   226	01A7  AB						     stosw
1   227
1   228	01A8  5F						     pop di		     ; pop  (1)
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 5
main.asm



1   229
1   230	01A9  C3						     ret
1   231	01AA							     endp
1   232
1   233				     ;------------------------------------------------
1   234				     ;	     PRINT STR IN (X; Y)
1   235				     ;	     END SYM '\0' || '$' || '\r'
1   236				     ;------------------------------------------------
1   237				     ; ENTRY:	     AH	= SYM COLOR
1   238				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   239				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   240				     ;			     CX	= STR ADDR
1   241				     ; EXIT:	     NONE
1   242				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   243				     ; DESTROYS:     NONE
1   244				     ;------------------------------------------------
1   245
1   246	01AA			     PrintStr		     proc
1   247
1   248	01AA  50						     push ax		     ; push (1)
1   249	01AB  53						     push bx		     ; push (2)
1   250	01AC  52						     push dx		     ; push (3)
1   251	01AD  56						     push si		     ; push (4)
1   252
1   253	01AE  8B F1						     mov si, cx		     ; SI = StrAddr
1   254
1   255	01B0  8A 14						     __Next:		     mov dl, [si]    ; DX = CurrSym
1   256
1   257	01B2  80 FA 00										     cmp dl, 0d		     ; if(  +
    258				     DL	== 0 )
1   259	01B5  74 14										     je	__End
1   260	01B7  80 FA 0D										     cmp dl, 13d	     ; if(  +
    261				     DL	== '\r'	)
1   262	01BA  74 0F										     je	__End
1   263	01BC  80 FA 24										     cmp dl, '$'	     ; if(  +
    264				     DL	== '$' )
1   265	01BF  74 0A										     je	__End
1   266
1   267	01C1  8A 04										     mov al, [si]    ; AL = CurrSym
1   268	01C3  E8 FFD9										     call PrintChar
1   269
1   270	01C6  FE C7										     inc bh		     ; X++
1   271	01C8  46										     inc si		     ;	    +
    272				     CurrSymPos++
1   273
1   274	01C9  E2 E5										     loop __Next
1   275	01CB							     __End:
1   276
1   277	01CB  5E						     pop si		     ; pop  (4)
1   278	01CC  5A						     pop dx		     ; pop  (3)
1   279	01CD  58						     pop ax		     ; pop  (2)
1   280	01CE  5B						     pop bx		     ; pop  (1)
1   281
1   282	01CF  C3						     ret
1   283	01D0							     endp
1   284
1   285				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 6
main.asm



1   286				     ;	     PRINT HORIZONTAL LINE IN (X; Y)
1   287				     ;------------------------------------------------
1   288				     ; ENTRY:	     AH	= SYM COLOR
1   289				     ;			     AL	= SYM CHAR
1   290				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   291				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   292				     ;			     CH	= WIDTH
1   293				     ;			     DH	= LEFT	SYM
1   294				     ;			     DL	= RIGHT	SYM
1   295				     ; EXIT:	     NONE
1   296				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   297				     ; DESTROYS:     NONE
1   298				     ;------------------------------------------------
1   299
1   300	01D0			     PrintHrzLine    proc
1   301
1   302	01D0  80 FD 01						     cmp ch, 1			     ; if( ch <= 1 ) ret
1   303	01D3  76 37						     jbe __End
1   304
1   305	01D5  53						     push bx			     ; push (1)
1   306	01D6  52						     push dx			     ; push (2)
1   307
1   308
1   309	01D7  50						     push ax			     ; push (3)
1   310	01D8  8A C6						     mov al, dh			     ; printf( "%c", LeftSym )
1   311	01DA  E8 FFC2						     call PrintChar
1   312	01DD  58						     pop ax			     ; pop  (3)
1   313
1   314	01DE  50						     push ax			     ; push (4)
1   315	01DF  53						     push bx			     ; push (5)
1   316	01E0  02 FD						     add bh, ch			     ; X += ( WIDTH - 1	)
1   317	01E2  80 EF 01						     sub bh, 1
1   318	01E5  8A C2						     mov al, dl			     ; printf( "%c", RightSym )
1   319	01E7  E8 FFB5						     call PrintChar
1   320	01EA  5B						     pop bx			     ; pop  (5)
1   321	01EB  58						     pop ax			     ; pop  (4)
1   322
1   323	01EC  53						     push bx			     ; push (6)
1   324	01ED  51						     push cx			     ; push (7)
1   325
1   326	01EE  80 C7 01						     add bh, 1			     ; X += 1
1   327	01F1  80 ED 02						     sub ch, 2			     ; WIDTH -=	2
1   328
1   329	01F4  80 FD 00						     cmp ch, 0			     ; if( ch == 0 )
1   330	01F7  74 0F						     je	     __EndPrinting
1   331
1   332	01F9  33 D2						     xor dx, dx			     ; i = 0
1   333
1   334	01FB  E8 FFA1						     __Next:		     call PrintChar
1   335
1   336	01FE  FE C7										     inc bh
1   337	0200  FE C6										     inc dh
1   338
1   339	0202  3A F5										     cmp dh, ch
1   340	0204  74 02										     je	 __EndPrinting
1   341
1   342	0206  EB F3										     jmp __Next
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 7
main.asm



1   343
1   344	0208							     __EndPrinting:
1   345
1   346	0208  59						     pop cx			     ; pop  (7)
1   347	0209  5B						     pop bx			     ; pop  (6)
1   348
1   349
1   350	020A  5A						     pop dx			     ; pop  (2)
1   351	020B  5B						     pop bx			     ; pop  (1)
1   352
1   353	020C							     __End:
1   354	020C  C3						     ret
1   355	020D							     endp
1   356
1   357				     ;------------------------------------------------
1   358				     ;	     PRINT VERTICAL LINE IN (X;	Y)
1   359				     ;------------------------------------------------
1   360				     ; ENTRY:	     AH	= SYM COLOR
1   361				     ;			     AL	= SYM CHAR
1   362				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   363				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   364				     ;			     CL	= HEIGHT
1   365				     ;			     DH	= TOP  SYM
1   366				     ;			     DL	= DOWN SYM
1   367				     ; EXIT:	     NONE
1   368				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   369				     ; DESTROYS:     NONE
1   370				     ;------------------------------------------------
1   371
1   372	020D			     PrintVrtLine    proc
1   373
1   374	020D  80 F9 01						     cmp cl, 1			     ; if( cl <= 1 ) ret
1   375	0210  76 37						     jbe __End
1   376
1   377	0212  53						     push bx			     ; push (1)
1   378	0213  52						     push dx			     ; push (2)
1   379
1   380
1   381	0214  50						     push ax			     ; push (3)
1   382	0215  8A C6						     mov al, dh			     ; printf( "%c", TopSym )
1   383	0217  E8 FF85						     call PrintChar
1   384	021A  58						     pop ax			     ; pop  (3)
1   385
1   386	021B  50						     push ax			     ; push (4)
1   387	021C  53						     push bx			     ; push (5)
1   388	021D  02 D9						     add bl, cl			     ; Y += ( HEIGHT - 1 )
1   389	021F  80 EB 01						     sub bl, 1
1   390	0222  8A C2						     mov al, dl			     ; printf( "%c", DownSym )
1   391	0224  E8 FF78						     call PrintChar
1   392	0227  5B						     pop bx			     ; pop  (5)
1   393	0228  58						     pop ax			     ; pop  (4)
1   394
1   395	0229  53						     push bx			     ; push (6)
1   396	022A  51						     push cx			     ; push (7)
1   397
1   398	022B  80 C3 01						     add bl, 1			     ; Y += 1
1   399	022E  80 E9 02						     sub cl, 2			     ; HEIGHT -= 2
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 8
main.asm



1   400
1   401	0231  80 F9 00						     cmp cl, 0			     ; if( cl == 0 )
1   402	0234  74 0F						     je	     __EndPrinting
1   403
1   404	0236  33 D2						     xor dx, dx			     ; i = 0
1   405
1   406	0238  E8 FF64						     __Next:		     call PrintChar
1   407
1   408	023B  FE C3										     inc bl
1   409	023D  FE C2										     inc dl
1   410
1   411	023F  3A D1										     cmp dl, cl
1   412	0241  74 02										     je	 __EndPrinting
1   413
1   414	0243  EB F3										     jmp __Next
1   415
1   416	0245							     __EndPrinting:
1   417
1   418	0245  59						     pop cx			     ; pop  (7)
1   419	0246  5B						     pop bx			     ; pop  (6)
1   420
1   421
1   422	0247  5A						     pop dx			     ; pop  (2)
1   423	0248  5B						     pop bx			     ; pop  (1)
1   424
1   425	0249							     __End:
1   426	0249  C3						     ret
1   427	024A							     endp
1   428
1   429				     ;------------------------------------------------
1   430				     ;	     PRINT BOX
1   431				     ;------------------------------------------------
1   432				     ; ENTRY:	     AX	= STR  ADDR
1   433				     ;			     BX	= DATA ADDR
1   434				     ; EXIT:	     NONE
1   435				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   436				     ; DESTROYS:     NONE
1   437				     ;------------------------------------------------
1   438
1   439				     ; User's type
1   440	024A  09*(00)		     Type_0  db		     9 dup (0)
1   441
1   442				     ; Template	types
1   443				     ;				     0		     1		     2		     3		    +
    444				     4		     5		     6		     7		     9
1   445				     ;				     lt		     ld		     rt		     rd		    +
    446				     lv		     rv		     th		     dh		     fill
1   447	0253  C9 C8 BB BC BA BA	CD+  Type_1  db		     0c9h,   0c8h,   0bbh,   0bch,   0bah,   0bah,   0cdh,   0cdh,   0d
    448	      CD 00
1   449	025C  03 03 03 03 03 03	03+  Type_2  db		     003h,   003h,   003h,   003h,   003h,   003h,   003h,   003h,   0d
    450	      03 00
1   451
1   452	      =0000		     X_Num    =	0
1   453	      =0001		     Y_Num    =	1
1   454	      =0002		     W_Num    =	2
1   455	      =0003		     H_Num    =	3
1   456	      =0004		     Clr_Num  =	4
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 9
main.asm



1   457	      =0005		     Type_Num =	5
1   458
1   459	0265			     PrintBox		     proc
1   460
1   461	0265  50						     push ax				     ; push (1)
1   462	0266  53						     push bx				     ; push (2)
1   463	0267  51						     push cx				     ; push (3)
1   464	0268  52						     push dx				     ; push (4)
1   465	0269  56						     push si				     ; push (5)
1   466	026A  57						     push di				     ; push (6)
1   467	026B  55						     push bp				     ; push (7)
1   468
1   469	026C  50						     push ax				     ; push (8)
1   470
1   471	026D  8B F3						     mov si, bx				     ; SI = DATA ADDR( BX )
1   472
1   473								     ; SET TYPE	BOX
1   474
1   475	026F  33 C0						     xor ax, ax				     ; BP = Type_0 + Type * 9
1   476	0271  8A 47 05						     mov al, bx[Type_Num]
1   477	0274  B9 0009						     mov cx, 9d
1   478	0277  F7 E1						     mul cx
1   479	0279  8B E8						     mov bp, ax
1   480	027B  81 C5 024Ar					     add bp, offset Type_0
1   481
1   482	027F  8A 67 04						     mov ah, bx[Clr_Num]	     ; AH = Color
1   483
1   484	0282  8A 6F 02						     mov ch, bx[W_Num]		     ; CH = WIDTH
1   485	0285  8A 4F 03						     mov cl, bx[H_Num]		     ; CL = HEIGHT
1   486
1   487								     ; PRINT TOP HORIZONTAL LINE
1   488
1   489	0288  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   490	028A  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
1   491	028D  8A 46 06						     mov  al, bp[6]		     ; AL = horizontal sym
1   492	0290  8A 76 00						     mov  dh, bp[0]		     ; DH = left  top  sym
1   493	0293  8A 56 02						     mov  dl, bp[2]		     ; DL = right top  sym
1   494	0296  E8 FF37						     call PrintHrzLine
1   495
1   496								     ; PRINT LEFT VERTICAL LINE
1   497
1   498	0299  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   499	029B  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
1   500	029E  8A 46 04						     mov  al, bp[4]		     ; AL = vertical  sym
1   501	02A1  8A 76 00						     mov  dh, bp[0]		     ; DH = left top  sym
1   502	02A4  8A 56 01						     mov  dl, bp[1]		     ; DL = left down sym
1   503	02A7  E8 FF63						     call PrintVrtLine
1   504
1   505	02AA  53						     push bx				     ; push (9)
1   506
1   507								     ; PRINT DOWN HORIZONTAL LINE
1   508
1   509	02AB  8A 3C						     mov  bh, si[X_Num]		     ; BH = X
1   510	02AD  8A 54 01						     mov  dl, si[Y_Num]		 ; Y +=	( HEIGHT - 1 )
1   511	02B0  02 D1						     add  dl, cl
1   512	02B2  80 EA 01						     sub  dl, 1
1   513	02B5  8A DA						     mov  bl, dl			     ; BL = Y
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 10
main.asm



1   514	02B7  8A 46 07						     mov  al, bp[7]		     ; AL = horizontal sym
1   515	02BA  8A 76 01						     mov  dh, bp[1]		     ; DH = left  down sym
1   516	02BD  8A 56 03						     mov  dl, bp[3]		     ; DL = right down sym
1   517	02C0  E8 FF0D						     call PrintHrzLine
1   518
1   519								     ; PRINT RIGHT VERTICAL LINE
1   520
1   521	02C3  8A 14						     mov  dl, si[X_Num]		 ; X +=	( WIDTH	- 1 )
1   522	02C5  02 D5						     add  dl, ch
1   523	02C7  80 EA 01						     sub  dl, 1
1   524	02CA  8A FA						     mov  bh, dl			     ; BH = X
1   525	02CC  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y
1   526	02CF  8A 46 05						     mov  al, bp[5]		     ; AL = vertical   sym
1   527	02D2  8A 76 02						     mov  dh, bp[2]		     ; DH = right top  sym
1   528	02D5  8A 56 03						     mov  dl, bp[3]		     ; DL = right down sym
1   529	02D8  E8 FF32						     call PrintVrtLine
1   530
1   531								     ; FILL BOX
1   532
1   533	02DB  53						     push bx				     ; push (10)
1   534	02DC  51						     push cx				     ; push (11)
1   535	02DD  8A 3C						     mov  bh, si[X_Num]		     ; BH = X +	1
1   536	02DF  80 C7 01						     add  bh, 1
1   537	02E2  8A 5C 01						     mov  bl, si[Y_Num]		     ; BL = Y +	1
1   538	02E5  80 C3 01						     add  bl, 1
1   539	02E8  8A 46 08						     mov  al, bp[8]		     ; AL = filling sym
1   540	02EB  80 ED 02						     sub  ch, 2				     ; WIDTH  -= 2
1   541	02EE  80 E9 02						     sub  cl, 2				     ; HEIGHT -= 2
1   542	02F1  E8 FE5D						     call FillScreen
1   543	02F4  59						     pop  cx				     ; pop  (11)
1   544	02F5  5B						     pop  bx				     ; pop  (10)
1   545
1   546	02F6  5B						     pop  bx				     ; pop  (9)	<> pop (X; Y)
1   547	02F7  58						     pop  ax				     ; pop  (8)	<> pop STR  +
    548				     ADDR
1   549
1   550								     ; PRINT STR
1   551
1   552	02F8  8B C8						     mov  cx, ax			     ; CX = STR	ADDR
1   553	02FA  8B D8						     mov  bx, ax			     ; BX = STR	ADDR
1   554	02FC  E8 0117						     call StrLen			     ; AX = len	of str
1   555	02FF  F7 D8						     neg  ax				     ; AX = ( WIDTH - LEN ) +
    556				     / 2
1   557	0301  33 D2						     xor  dx, dx
1   558	0303  8A 54 02						     mov  dl, si[W_Num]
1   559	0306  03 C2						     add  ax, dx
1   560	0308  33 D2						     xor  dx, dx
1   561	030A  BD 0002						     mov  bp, 2d
1   562	030D  F7 F5						     div  bp
1   563	030F  8A 3C						     mov  bh, si[X_Num]		     ; X += AL
1   564	0311  02 F8						     add  bh, al
1   565	0313  33 C0						     xor  ax, ax			     ; AX = HEIGHT / 2
1   566	0315  8A 44 03						     mov  al, si[H_Num]
1   567	0318  33 D2						     xor  dx, dx
1   568	031A  BD 0002						     mov  bp, 2d
1   569	031D  F7 F5						     div  bp
1   570	031F  8A 5C 01						     mov  bl, si[Y_Num]		     ; Y += AL
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 11
main.asm



1   571	0322  02 D8						     add  bl, al
1   572	0324  8A 64 04						     mov  ah, si[Clr_Num]    ; AH = color
1   573	0327  E8 FE80						     call PrintStr
1   574
1   575	032A  5D						     pop bp				     ; pop  (7)
1   576	032B  5F						     pop di				     ; pop  (6)
1   577	032C  5E						     pop si				     ; pop  (5)
1   578	032D  5A						     pop dx				     ; pop  (4)
1   579	032E  59						     pop cx				     ; pop  (3)
1   580	032F  5B						     pop bx				     ; pop  (2)
1   581	0330  58						     pop ax				     ; pop  (1)
1   582
1   583	0331  C3						     ret
1   584	0332							     endp
1   585
1   586				     ;------------------------------------------------
1   587				     ;	     INPUT STR
1   588				     ;------------------------------------------------
1   589				     ; ENTRY:	     NONE
1   590				     ; EXIT:	     AX	= STR LEN
1   591				     ; DESTROYS:     AX
1   592				     ;------------------------------------------------
1   593
1   594	      =0064		     InputLen =	100
1   595	0332  64*(00)		     InputStr db     InputLen dup (0)
1   596
1   597	0396			     Input		     proc
1   598
1   599	0396  52						     push dx		     ; push (1)
1   600	0397  33 D2						     xor  dx, dx	     ; i = 0
1   601
1   602	0399  B4 01						     __Next:		     mov ah, 01h			    +
    603				     ; input char
1   604	039B  CD 21										     int 21h
1   605
1   606	039D  56										     push si			    +
    607				     ; push (2)
1   608
1   609	039E  33 F6										     xor si, si			    +
    610				     ; SI = 0
1   611
1   612	03A0  BE 0332r										     mov si, offset InputStr	    +
    613				     ; SI = InputStr + DX
1   614	03A3  03 F2										     add si, dx
1   615
1   616	03A5  88 04										     mov [si], al
1   617
1   618	03A7  5E										     pop si			    +
    619				     ; pop  (2)
1   620
1   621	03A8  3C 0D										     cmp al, 13d		    +
    622				     ; if( al == '\r' )
1   623	03AA  74 06										     je	__End
1   624
1   625	03AC  42										     inc dx			    +
    626				     ; i++
1   627	03AD  83 FA 64										     cmp dx, InputLen		    +
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 12
main.asm



    628				     ; if( i ==	InputLen )
1   629	03B0  75 E7										     jne __Next
1   630
1   631	03B2							     __End:
1   632
1   633	03B2  8B C2						     mov ax, dx
1   634	03B4  5A						     pop dx		     ; pop  (1)
1   635
1   636	03B5  C3						     ret
1   637	03B6							     endp
1   638
1   639				     ;------------------------------------------------
1   640
    641				     include	     CMD_HNDL.ASM    ; CMD line	handler
1   642
1   643				     ;------------------------------------------------
1   644				     ;	     DIVIDE CMD	LINE ARGS ( FROM 82h + CL )
1   645				     ;	 TO ARRAY ( BYTE PTR )
1   646				     ;------------------------------------------------
1   647				     ; ENTRY:	 BX = ARR ADDR ( ARGS )
1   648				     ;		 CL = CMD LINE OFFSET
1   649				     ;		 CH = AMOUNT OF	NUMBERS	TO HANDLE
1   650				     ; EXIT:	     AX	= NEW CMD LINE OFFSET
1   651				     ; DESTROYS:     AX
1   652				     ;------------------------------------------------
1   653
1   654	03B6			     CmdLineHndl     proc
1   655
1   656	03B6  33 C0				     xor ax, ax	     ; AX = 0 (	num args counter = 0 )
1   657
1   658	03B8  51				     push cx	     ; push (1)
1   659	03B9  56				     push si	     ; push (2)
1   660
1   661	03BA  51				     push cx	     ; push (3)
1   662	03BB  32 ED				     xor  ch, ch     ; CH = 0
1   663	03BD  BE 0082				     mov  si, 82h    ; CurrSymPos = 82h	+ offset
1   664	03C0  03 F1				     add  si, cx
1   665	03C2  59				     pop  cx	     ; pop  (3)
1   666
1   667	03C3  80 FD 00				     cmp ch, 0	     ; if( CH =	0 )
1   668	03C6  74 46				     je	__EndNum
1   669
1   670	03C8  51				     __NextNum:		 push cx	 ; push	(4)
1   671	03C9  33 C9							 xor  cx, cx	 ; i = 0
1   672
1   673	03CB  80 3C 20							 __Next:	 cmp byte ptr [si], ' '	     ; if( CurrSym  +
    674				     ==	' ' )
1   675	03CE  74 13									 je __End
1   676	03D0  80 3C 09									 cmp byte ptr [si], 9d	     ; if( CurrSym  +
    677				     ==	'\t' )
1   678	03D3  74 0E									 je __End
1   679	03D5  80 3C 00									 cmp byte ptr [si], 0d	     ; if( CurrSym  +
    680				     ==	'\0' )
1   681	03D8  74 09									 je __End
1   682	03DA  80 3C 0D									 cmp byte ptr [si], 13d	     ; if( CurrSym  +
    683				     ==	'\r' )
1   684	03DD  74 04									 je __End
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 13
main.asm



1   685
1   686
1   687	03DF  41									 inc cx			     ; i++
1   688	03E0  46									 inc si			     ; CurrSymPos++
1   689
1   690	03E1  EB E8									 jmp __Next
1   691	03E3								 __End:
1   692
1   693	03E3  83 F9 00							 cmp cx, 0	 ; if( i == 0 )
1   694	03E6  74 14							 je __EndArgsCheck
1   695
1   696									 ; STR to NUM
1   697	03E8  53							 push bx	 ; push	(5)
1   698	03E9  50							 push ax	 ; push	(6)
1   699	03EA  8B DE							 mov  bx, si	 ; BX =	SI - i
1   700	03EC  2B D9							 sub  bx, cx
1   701	03EE  E8 0044							 call Atoi
1   702	03F1  8B C8							 mov  cx, ax	 ; CX =	AX
1   703	03F3  58							 pop  ax	 ; pop	(6)
1   704	03F4  5B							 pop  bx	 ; pop	(5)
1   705
1   706									 ; put NUM to ARR
1   707	03F5  53							 push bx		     ; push (7)
1   708	03F6  03 D8							 add  bx, ax		     ; BX += CurrNumArg
1   709	03F8  88 0F							 mov  byte ptr [bx], cl	     ; arr[AX] = NUM
1   710	03FA  5B							 pop  bx		     ; pop  (7)
1   711
1   712	03FB  40							 inc ax			     ; NumArgs++
1   713
1   714	03FC								 __EndArgsCheck:
1   715
1   716	03FC  59							 pop cx			     ; pop (4)
1   717
1   718	03FD  3A C5							 cmp al, ch		     ; if( AL == CH )
1   719	03FF  74 0D							 je __EndNum
1   720
1   721	0401  80 3C 0D							 cmp byte ptr [si], 13d	     ; if( CurrSym == '\r' )
1   722	0404  74 08							 je __EndNum
1   723	0406  80 3C 00							 cmp byte ptr [si], 0d	     ; if( CurrSym == '\0' )
1   724	0409  74 03							 je __EndNum
1   725
1   726	040B  46							 inc si			     ; CurrSymPos++
1   727
1   728	040C  EB BA							 jmp __NextNum
1   729	040E					     __EndNum:
1   730
1   731	040E  8B C6				     mov ax, si	     ; AX = SI - 82h
1   732	0410  2D 0082				     sub ax, 82h
1   733
1   734	0413  5E				     pop si	     ; pop  (2)
1   735	0414  59				     pop cx	     ; pop  (1)
1   736
1   737	0415  C3				     ret
1   738	0416					     endp
1   739
1   740				     ;------------------------------------------------
    741				     include	     STR_HNDL.ASM    ; Str handler
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 14
main.asm



1   742
1   743				     ;------------------------------------------------
1   744				     ;	     GET STR LEN
1   745				     ;------------------------------------------------
1   746				     ; ENTRY:	     BX	= STR ADDR
1   747				     ; EXIT:	     AX	= LEN
1   748				     ; EXPECTS:	 END SYM '$' ||	'\0' ||	'\r'
1   749				     ; DESTROYS: AX
1   750				     ;------------------------------------------------
1   751
1   752	0416			     StrLen	     proc
1   753
1   754	0416  33 C0				     xor ax, ax	     ; i = 0
1   755
1   756	0418  51						     push cx		     ; push (1)
1   757	0419  56						     push si		     ; push (2)
1   758
1   759	041A  8B F3				     __Next:		     mov  si, bx     ; SI = BX + i
1   760	041C  03 F0										 add  si, ax
1   761
1   762	041E  40										     inc  ax		     ; i++
1   763	041F  8B 0C										     mov  cx, [si]   ; CX = current +
    764				     symbol
1   765
1   766	0421  80 FD 24										     cmp  ch, '$'    ; if( ch == '$'+
    767				     )
1   768	0424  74 0C										     je	__End
1   769	0426  80 FD 00										     cmp  ch, 0d     ; if( ch ==    +
    770				     '\0' )
1   771	0429  74 07										     je	__End
1   772	042B  80 FD 0D										     cmp  ch, 13d    ; if( ch ==    +
    773				     '\r' )
1   774	042E  74 02										     je	__End
1   775
1   776	0430  EB E8										     jmp __Next
1   777
1   778	0432							     __End:
1   779	0432  5E						     pop si		     ; pop  (2)
1   780	0433  59						     pop cx		     ; pop  (1)
1   781
1   782	0434  C3				     ret
1   783	0435					     endp
1   784
1   785				     ;------------------------------------------------
1   786				     ;	     TRANSLATE STR TO NUMBER
1   787				     ;------------------------------------------------
1   788				     ; ENTRY:	     BX	= STR ADDR
1   789				     ; EXIT:	     AX	= NUM
1   790				     ; EXPECTS:	     CX	= STR LEN
1   791				     ; DESTROYS:     AX
1   792				     ;------------------------------------------------
1   793
1   794	0435			     Atoi		     proc
1   795
1   796	0435  33 C0						     xor ax, ax		     ; AX = 0
1   797
1   798	0437  52						     push dx		     ; push (1)
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 15
main.asm



1   799	0438  56						     push si		     ; push (2)
1   800
1   801	0439  33 D2						     xor dx, dx		     ; i = 0
1   802
1   803	043B  8B F3						     __Next:		     mov si, bx		     ; SI = BX +    +
    804				     STR_LEN - i
1   805	043D  03 F1										     add si, cx
1   806	043F  2B F2										     sub si, dx
1   807	0441  83 EE 01										     sub si, 1
1   808
1   809	0444  51										     push cx		     ; push +
    810				     (3)
1   811
1   812	0445  50										     push ax		     ; push +
    813				     (4)
1   814	0446  33 C0										     xor  ax, ax     ; AX = 0
1   815	0448  8A 04										     mov  al, [si]   ; AX = [SI] -  +
    816				     '0'
1   817	044A  2C 30										     sub  al, 48d
1   818
1   819	044C  52										     push dx		     ; push +
    820				     (5)
1   821	044D  8B CA										     mov  cx, dx	     ; AX = +
    822				     AX	* 10^DX
1   823	044F  BE 000A										     mov  si, 10d
1   824	0452  E3 08										     jcxz __NoMul
1   825
1   826	0454  F7 E6										     __Mul:		     mul si
1   827
1   828	0456  49														    +
    829				     dec cx
1   830	0457  83 F9 00														    +
    831				     cmp cx, 0
1   832	045A  75 F8														    +
    833				     jne __Mul
1   834
1   835	045C											     __NoMul:
1   836	045C  5A										     pop  dx		     ; pop  +
    837				     (5)
1   838	045D  8B C8										     mov  cx, ax
1   839
1   840	045F  58										     pop ax		     ; pop  +
    841				     (4)
1   842	0460  03 C1										     add ax, cx
1   843	0462  59										     pop cx		     ; pop  +
    844				     (3)
1   845
1   846	0463  42										     inc dx		     ; i++
1   847
1   848	0464  3B D1										     cmp dx, cx		     ; if( i+
    849				     ==	CX )
1   850	0466  75 D3										     jne __Next
1   851
1   852	0468  5E						     pop si		     ; pop  (2)
1   853	0469  5A						     pop dx		     ; pop  (1)
1   854
1   855	046A  C3						     ret
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 16
main.asm



1   856	046B							     endp
1   857
1   858				     ;------------------------------------------------
    859				     include	     NUM_CNVR.ASM    ; Print AX	in BIN/DEC/HEX
1   860
1   861				     ;------------------------------------------------
1   862				     ;	     PRINT AX IN BIN
1   863				     ;------------------------------------------------
1   864				     ; ENTRY:	     AX	= NUM
1   865				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   866				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   867				     ; EXIT:	     NONE
1   868				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   869				     ; DESTROYS:     DX	DI
1   870				     ;------------------------------------------------
1   871
1   872	      =0010		     bin_len = 16d						     ; len of bin str
1   873
1   874	046B			     PrintBin		     proc
1   875	046B  50						     push ax				     ; push (1)
1   876
1   877	046C  E8 FD1E						     call GetVideoPos		     ; AX = Video position from	(X; +
    878				     Y)
1   879	046F  BF 0020						     mov di, bin_len * 2d    ; i = bin_len * 2 + AX
1   880	0472  03 F8						     add di, ax
1   881	0474  FD						     std
1   882
1   883	0475  58						     pop  ax				     ; pop  (1)
1   884
1   885	0476  33 D2						     xor dx, dx				     ; i = 0
1   886
1   887	0478  50						     push ax				     ; push (2)
1   888
1   889	0479  D1 E8						     __Next:		     shr ax, 1				    +
    890				     ; AX /= 2
1   891
1   892	047B  50										     push ax			    +
    893				     ; push (3)
1   894
1   895	047C  72 05										     jc	__One
1   896
1   897	047E  B0 30										     __Zero:		     mov al,+
    898				     '0'		     ; '0'
1   899	0480  EB 03 90														    +
    900				     jmp __End
1   901
1   902	0483  B0 31										     __One:		     mov al,+
    903				     '1'		     ; '1'
1   904
1   905	0485  B4 70						     __End:		     mov ah, 70h			    +
    906				     ; black on	white
1   907
1   908	0487  83 EF 02										     sub di, 2			    +
    909				     ; print( ax ) // with 1 sym left( 2 bytes )
1   910	048A  AB										     stosw
1   911	048B  83 C7 02										     add di, 2
1   912
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 17
main.asm



1   913	048E  58										     pop ax			    +
    914				     ; pop (3)
1   915
1   916	048F  42										     inc dx
1   917
1   918	0490  83 FA 10										     cmp dx, bin_len		    +
    919				     ; if( dx == bin_len )
1   920	0493  75 E4										     jne __Next
1   921
1   922	0495  58						     pop ax				     ; pop  (2)
1   923
1   924	0496  C3						     ret
1   925	0497							     endp
1   926
1   927				     ;------------------------------------------------
1   928				     ;	     PRINT AX IN HEX
1   929				     ;------------------------------------------------
1   930				     ; ENTRY:	     AX	= NUM
1   931				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   932				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   933				     ; EXIT:	     NONE
1   934				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   935				     ; DESTROYS:     CX	DX DI
1   936				     ;------------------------------------------------
1   937
1   938	      =0010		     hex_len = 16d						     ; len of hex str
1   939
1   940	0497			     PrintHex		     proc
1   941
1   942	0497  50						     push ax				     ; push (1)
1   943
1   944	0498  E8 FCF2						     call GetVideoPos		     ; AX = Video position from	(X; +
    945				     Y)
1   946	049B  BF 0020						     mov di, hex_len * 2d    ; i = hex_len * 2 + AX
1   947	049E  03 F8						     add di, ax
1   948	04A0  FD						     std
1   949
1   950	04A1  58						     pop  ax				     ; pop  (1)
1   951
1   952	04A2  33 D2						     xor dx, dx				     ; i = 0
1   953
1   954	04A4  50						     push ax				     ; push (2)
1   955
1   956	04A5  B9 0000						     __Next:		     mov cx, 0			     ;	    +
    957				     shifts counter
1   958
1   959	04A8  52										     push dx			    +
    960				     ; push (4)
1   961	04A9  BA 0000										     mov  dx, 0			    +
    962				     ; DX = 0
1   963
1   964	04AC  D1 E8										     __Shift:		     shr ax,+
    965				     1		     ; AX /= 2
1   966
1   967	04AE  73 09														    +
    968				     jnc __End
1   969
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 18
main.asm



1   970	04B0  50														    +
    971				     __One:		     push ax		     ; push (3)
1   972	04B1  B8 0001														    +
    973				     mov  ax, 1		     ; AX = 0001b
1   974	04B4  D3 E0														    +
    975				     shl  ax, cl	     ; DX += 2^CX
1   976	04B6  03 D0														    +
    977				     add  dx, ax
1   978	04B8  58														    +
    979				     pop      ax		     ; pop  (3)
1   980
1   981	04B9  41										     __End:		     inc cx +
    982				     ; shifts counter ++
1   983	04BA  83 F9 04														    +
    984				     cmp cx, 4d		     ; if( numShifts ==	4 )
1   985	04BD  75 ED														    +
    986				     jne __Shift
1   987
1   988	04BF  8B C8										     mov cx, ax			    +
    989				     ; CX = AX
1   990
1   991	04C1  83 FA 0A										     cmp dx, 10d		    +
    992				     ; if( DX >= 10 )
1   993	04C4  7D 08										     jge __Sym
1   994
1   995	04C6  83 C2 30										     __Digit:		     add dx,+
    996				     48d	     ; print( DX + '0' )
1   997	04C9  8A C2														    +
    998				     mov al, dl
1   999	04CB  EB 09 90														    +
   1000				     jmp __Print
1  1001
1  1002	04CE  83 EA 0A										     __Sym:		     sub dx,+
   1003				     10		     ; print( DX - 10 +	'A' )
1  1004	04D1  83 C2 41														    +
   1005				     add dx, 65d
1  1006	04D4  8A C2														    +
   1007				     mov al, dl
1  1008
1  1009	04D6  5A						     __Print:		     pop dx			     ; pop  +
   1010				     (4)
1  1011
1  1012	04D7  B4 70										     mov ah, 70h		    +
   1013				     ; black on	white
1  1014
1  1015	04D9  83 EF 02										     sub di, 2			    +
   1016				     ; print( ax ) // with 1 sym left( 2 bytes )
1  1017	04DC  AB										     stosw
1  1018	04DD  83 C7 02										     add di, 2
1  1019
1  1020	04E0  8B C1										     mov ax, cx			    +
   1021				     ; AX = CX
1  1022
1  1023	04E2  42										     inc dx			    +
   1024				     ; i++
1  1025
1  1026	04E3  83 FA 10										     cmp dx, hex_len	     ; if(  +
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 19
main.asm



   1027				     dx	== hex_len )
1  1028	04E6  75 BD										     jne __Next
1  1029
1  1030	04E8  58						     pop ax				     ; pop  (2)
1  1031
1  1032	04E9  C3						     ret
1  1033	04EA							     endp
1  1034
1  1035				     ;------------------------------------------------
1  1036				     ;	     PRINT AX IN DEC
1  1037				     ;------------------------------------------------
1  1038				     ; ENTRY:	     AX	= NUM
1  1039				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1  1040				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1  1041				     ; EXIT:	     NONE
1  1042				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1  1043				     ; DESTROYS:     DI
1  1044				     ;------------------------------------------------
1  1045
1  1046	      =0005		     dec_len = 5d
1  1047
1  1048	04EA			     PrintDec		     proc
1  1049
1  1050	04EA  50						     push ax				     ; push (1)
1  1051
1  1052	04EB  E8 FC9F						     call GetVideoPos		     ; AX = Video position from	(X; +
   1053				     Y)
1  1054	04EE  BF 000A						     mov di, dec_len * 2d    ; i = dec_len * 2 + AX
1  1055	04F1  03 F8						     add di, ax
1  1056	04F3  FD						     std
1  1057
1  1058	04F4  58						     pop  ax				     ; pop  (1)
1  1059
1  1060	04F5  51						     push cx				     ; push (2)
1  1061	04F6  52						     push dx				     ; push (3)
1  1062
1  1063	04F7  33 D2						     xor dx, dx				     ; i = 0
1  1064
1  1065	04F9  50						     push ax				     ; push (4)
1  1066
1  1067	04FA  B9 000A						     mov cx, 10d			     ; CX = 10
1  1068
1  1069	04FD  52						     __Next:		     push dx			     ; push +
   1070				     (5)
1  1071
1  1072	04FE  33 D2										     xor dx, dx			    +
   1073				     ; DX = 0
1  1074
1  1075	0500  F7 F1										     div  cx			    +
   1076				     ; AX /= 10
1  1077
1  1078	0502  50										     push ax			    +
   1079				     ; push (6)
1  1080
1  1081	0503  80 C2 30										     add  dl, 48d	     ; print+
   1082				     ( DL + '0'	)
1  1083	0506  8A C2										     mov  al, dl
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 20
main.asm



1  1084
1  1085	0508  B4 70										     mov  ah, 70h	     ; black+
   1086				     on	white
1  1087
1  1088	050A  83 EF 02										     sub di, 2			    +
   1089				     ; print( ax ) // with 1 sym left( 2 bytes )
1  1090	050D  AB										     stosw
1  1091	050E  83 C7 02										     add di, 2
1  1092
1  1093	0511  58										     pop ax			    +
   1094				     ; pop  (6)
1  1095	0512  5A										     pop dx			    +
   1096				     ; pop  (5)
1  1097
1  1098	0513  42										     inc dx
1  1099
1  1100	0514  83 FA 05										     cmp dx, dec_len	     ; if(  +
   1101				     DX	== dec_len )
1  1102	0517  75 E4										     jne __Next
1  1103
1  1104	0519  58						     pop ax				     ; pop  (4)
1  1105
1  1106	051A  5A						     pop dx				     ; pop  (3)
1  1107	051B  59						     pop cx				     ; pop  (2)
1  1108
1  1109	051C  C3						     ret
1  1110	051D							     endp
1  1111
1  1112				     ;------------------------------------------------
1  1113				     ;	     PRINT AX IN BIN/HEX/DEC
1  1114				     ;------------------------------------------------
1  1115				     ; ENTRY:	     AX	= NUM
1  1116				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1  1117				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1  1118				     ; EXIT:	     NONE
1  1119				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1  1120				     ; DESTROYS:     CX	DX DI
1  1121				     ;------------------------------------------------
1  1122
1  1123	051D			     PrintNum		     proc
1  1124
1  1125	051D  53						     push bx				     ; push (1)
1  1126
1  1127	051E  E8 FF4A						     call PrintBin
1  1128
1  1129	0521  80 C7 11						     add bh, bin_len + 1d    ; X
1  1130	0524  E8 FF70						     call PrintHex
1  1131
1  1132	0527  80 C7 11						     add bh, hex_len + 1d    ; X
1  1133	052A  E8 FFBD						     call PrintDec
1  1134
1  1135	052D  5B						     pop bx				     ; pop  (1)
1  1136
1  1137	052E  C3						     ret
1  1138	052F							     endp
1  1139
1  1140				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 21
main.asm



   1141
   1142				     end		     Start
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 22
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/24/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "17:12:04"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI				  Near	 DGROUP:0435
BIN_LEN				  Number 0010
CLRSCREEN			  Near	 DGROUP:017F
CLR_NUM				  Number 0004
CMDDATA				  Byte	 DGROUP:0138
CMDLINEHNDL			  Near	 DGROUP:03B6
DEC_LEN				  Number 0005
FILLSCREEN			  Near	 DGROUP:0151
GETVIDEOPOS			  Near	 DGROUP:018D
HEX_LEN				  Number 0010
H_NUM				  Number 0003
INPUT				  Near	 DGROUP:0396
INPUTLEN			  Number 0064
INPUTSTR			  Byte	 DGROUP:0332
NAM				  Byte	 DGROUP:014C
PRINTBIN			  Near	 DGROUP:046B
PRINTBOX			  Near	 DGROUP:0265
PRINTCHAR			  Near	 DGROUP:019F
PRINTDEC			  Near	 DGROUP:04EA
PRINTHEX			  Near	 DGROUP:0497
PRINTHRZLINE			  Near	 DGROUP:01D0
PRINTNUM			  Near	 DGROUP:051D
PRINTSTR			  Near	 DGROUP:01AA
PRINTVRTLINE			  Near	 DGROUP:020D
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:0416
TYPE_0				  Byte	 DGROUP:024A
TYPE_1				  Byte	 DGROUP:0253
TYPE_2				  Byte	 DGROUP:025C
TYPE_NUM			  Number 0005
W_NUM				  Number 0002
X_NUM				  Number 0000
Y_NUM				  Number 0001
__DIGIT				  Near	 DGROUP:04C6
__END				  Near	 DGROUP:016D
__END				  Near	 DGROUP:01CB
__END				  Near	 DGROUP:020C
__END				  Near	 DGROUP:0249
Turbo Assembler	 Version 4.1	    02/24/23 17:12:05	    Page 23
Symbol Table



__END				  Near	 DGROUP:03B2
__END				  Near	 DGROUP:03E3
__END				  Near	 DGROUP:0432
__END				  Near	 DGROUP:0485
__END				  Near	 DGROUP:04B9
__ENDARGSCHECK			  Near	 DGROUP:03FC
__ENDNEXTLINE			  Near	 DGROUP:017B
__ENDNUM			  Near	 DGROUP:040E
__ENDPRINTING			  Near	 DGROUP:0208
__ENDPRINTING			  Near	 DGROUP:0245
__MUL				  Near	 DGROUP:0454
__NEXT				  Near	 DGROUP:015E
__NEXT				  Near	 DGROUP:01B0
__NEXT				  Near	 DGROUP:01FB
__NEXT				  Near	 DGROUP:0238
__NEXT				  Near	 DGROUP:0399
__NEXT				  Near	 DGROUP:03CB
__NEXT				  Near	 DGROUP:041A
__NEXT				  Near	 DGROUP:043B
__NEXT				  Near	 DGROUP:0479
__NEXT				  Near	 DGROUP:04A5
__NEXT				  Near	 DGROUP:04FD
__NEXTLINE			  Near	 DGROUP:015B
__NEXTNUM			  Near	 DGROUP:03C8
__NOMUL				  Near	 DGROUP:045C
__NOTUSERTYPE			  Near	 DGROUP:0120
__ONE				  Near	 DGROUP:0483
__ONE				  Near	 DGROUP:04B0
__PRINT				  Near	 DGROUP:04D6
__SHIFT				  Near	 DGROUP:04AC
__SYM				  Near	 DGROUP:04CE
__ZERO				  Near	 DGROUP:047E

Macro Name

EXIT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  052F Word	  Public  CODE
