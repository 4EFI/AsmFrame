Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 1
main.asm



      1
      2				     .186
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals __
      8
      9				     include	     TOOLS.ASM			     ; Exit
1    10
1    11				     ;------------------------------------------------
1    12				     ;	     EXIT PROGRAM
1    13				     ;------------------------------------------------
1    14				     ; Entry:	     NONE
1    15				     ; EXIT:	     NONE
1    16				     ; DESTROYS: AX
1    17				     ;------------------------------------------------
1    18
1    19				     EXIT	     macro
1    20							     nop
1    21							     mov ax, 4c00h
1    22							     int 21h
1    23							     nop
1    24							     endm
1    25
1    26				     ;------------------------------------------------
     27
     28				     ;------------------------------------------------
     29
     30	0100  BB B800		     Start:	     mov bx, 0b800h	     ; ES = VideoSeg
     31	0103  8E C3					     mov es, bx
     32
     33	0105  B8 0020					     mov byte ptr ax, '	'
     34	0108  E8 0026					     call ClrScrn
     35
     36	010B  B7 00					     mov bh, 0d		     ; X
     37	010D  B3 04					     mov bl, 4d		     ; Y
     38	010F  B5 32					     mov ch, 50d	     ; WIDTH
     39	0111  B1 0A					     mov cl, 10d	     ; HEIGHT
     40	0113  E8 0076					     call PrintBox
     41
     42	0116  B7 01					     mov bh, 1d		     ; X
     43	0118  B3 05					     mov bl, 5d		     ; Y
     44	011A  B8 09FC					     mov ax, 2556d   ; NUM
     45	011D  E8 010F					     call PrintBin
     46
     47	0120  B7 01					     mov bh, 1d		     ; X
     48	0122  B3 06					     mov bl, 6d		     ; Y
     49	0124  B8 09FC					     mov ax, 2556d   ; NUM
     50	0127  E8 0131					     call PrintHex
     51
     52							     EXIT
1    53	012A  90					     nop
1    54	012B  B8 4C00					     mov ax, 4c00h
1    55	012E  CD 21					     int 21h
1    56	0130  90					     nop
     57
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 2
main.asm



     58				     ;------------------------------------------------
     59
     60				     include	     SCR_HNDL.ASM    ; Clear Screen function
1    61
1    62				     ; SCREEN HANDLER
1    63
1    64				     ;------------------------------------------------
1    65				     ;	     CLEAR SCREEN BY SYM
1    66				     ;------------------------------------------------
1    67				     ; ENTRY:	     AH	= COLOR	ATTR
1    68				     ;			     Al	= SYM
1    69				     ; EXIT:	     NONE
1    70				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    71				     ; DESTROYS:     BX	CX
1    72				     ;------------------------------------------------
1    73
1    74	0131			     ClrScrn		     proc
1    75
1    76	0131  BB 0000						     mov bx, 0			     ; bx = 0
1    77	0134  B9 07D0						     mov cx, 80d * 25d
1    78
1    79	0137  26: 89 07		     __Next:		     mov es:[bx], ax
1    80	013A  83 C3 02						     add bx, 2
1    81
1    82	013D  E2 F8						     loop __Next
1    83
1    84	013F  C3						     ret
1    85	0140							     endp
1    86
1    87				     ;------------------------------------------------
1    88				     ;	     GET VIDEO POS FROM	(X; Y)
1    89				     ;------------------------------------------------
1    90				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1    91				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1    92				     ; EXIT:	     AX	= POS
1    93				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    94				     ; DESTROYS:     AX
1    95				     ;------------------------------------------------
1    96
1    97	0140			     GetVideoPos	     proc
1    98
1    99	0140  D0 E7						     shl bh, 1		     ; bh /= 2
1   100
1   101	0142  52						     push dx		     ; push (1)
1   102
1   103	0143  B0 A0						     mov al, 160d    ; ax = 160	* Y + 2	* X
1   104	0145  F6 E3						     mul bl
1   105	0147  BA 0000						     mov dx, 0
1   106	014A  02 D7						     add dl, bh
1   107	014C  03 C2						     add ax, dx
1   108
1   109	014E  5A						     pop dx		     ; pop  (1)
1   110
1   111	014F  D0 EF						     shr bh, 1		     ; bh *= 2
1   112
1   113	0151  C3						     ret
1   114	0152							     endp
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 3
main.asm



1   115
1   116				     ;------------------------------------------------
1   117				     ;	     PRINT SYM IN (X; Y)
1   118				     ;------------------------------------------------
1   119				     ; ENTRY:	     AH	= SYM COLOR
1   120				     ;			     AL	= SYM CHAR
1   121				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   122				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   123				     ; EXIT:	     NONE
1   124				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   125				     ; DESTROYS:     DI
1   126				     ;------------------------------------------------
1   127
1   128	0152			     PrintChar		     proc
1   129
1   130	0152  50						     push ax		     ; push (1)
1   131
1   132	0153  E8 FFEA						     call GetVideoPos
1   133
1   134	0156  8B F8						     mov di, ax		     ; print( ax )
1   135	0158  58						     pop ax		     ; pop  (1)
1   136	0159  AB						     stosw
1   137
1   138	015A  C3						     ret
1   139	015B							     endp
1   140
1   141				     ;------------------------------------------------
1   142				     ;	     PRINT HORIZONTAL LINE IN (X; Y)
1   143				     ;------------------------------------------------
1   144				     ; ENTRY:	     AH	= SYM COLOR
1   145				     ;			     AL	= SYM CHAR
1   146				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   147				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   148				     ;			     CH	= WIDTH
1   149				     ; EXIT:	     NONE
1   150				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   151				     ; DESTROYS:     DX	DI
1   152				     ;------------------------------------------------
1   153
1   154	015B			     PrintHrzLine    proc
1   155
1   156	015B  80 FD 00						     cmp ch, 0		     ; if( ch <= 0 ) ret
1   157	015E  76 0F						     jbe __End
1   158
1   159	0160  53						     push bx
1   160
1   161	0161  33 D2						     xor dx, dx		     ; i = 0
1   162
1   163	0163  E8 FFEC						     __Next:		     call PrintChar
1   164
1   165	0166  FE C7										     inc bh
1   166	0168  FE C6										     inc dh
1   167
1   168	016A  3A F5										     cmp dh, ch
1   169	016C  75 F5										     jne __Next
1   170	016E  5B						     pop bx
1   171
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 4
main.asm



1   172	016F							     __End:
1   173	016F  C3						     ret
1   174	0170							     endp
1   175
1   176				     ;------------------------------------------------
1   177				     ;	     PRINT VERTICAL LINE IN (X;	Y)
1   178				     ;------------------------------------------------
1   179				     ; ENTRY:	     AH	= SYM COLOR
1   180				     ;			     AL	= SYM CHAR
1   181				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   182				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   183				     ;			     CL	= HEIGHT
1   184				     ; EXIT:	     NONE
1   185				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   186				     ; DESTROYS:     DX	DI
1   187				     ;------------------------------------------------
1   188
1   189	0170			     PrintVrtLine    proc
1   190
1   191	0170  80 F9 00						     cmp cl, 0		     ; if( cl <= 0 ) ret
1   192	0173  76 0F						     jbe __End
1   193
1   194	0175  53						     push bx
1   195
1   196	0176  33 D2						     xor dx, dx		     ; i = 0
1   197
1   198	0178  E8 FFD7						     __Next:		     call PrintChar
1   199
1   200	017B  FE C3										     inc bl
1   201	017D  FE C2										     inc dl
1   202
1   203	017F  3A D1										     cmp dl, cl
1   204	0181  75 F5										     jne __Next
1   205	0183  5B						     pop bx
1   206
1   207	0184							     __End:
1   208	0184  C3						     ret
1   209	0185							     endp
1   210
1   211				     ;------------------------------------------------
1   212				     ;	     PRINT BOX
1   213				     ;------------------------------------------------
1   214				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1   215				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   216				     ;			     CH	= WIDTH
1   217				     ;			     CL	= HEIGHT
1   218				     ; EXIT:	     NONE
1   219				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   220				     ; DESTROYS:     AX	DX DI
1   221				     ;------------------------------------------------
1   222
1   223	0185  1F		     box_clr db		     01fh    ; yellow on red
1   224
1   225	0186  C9		     lt_ch   db		     0c9h    ; left  top  char
1   226	0187  C8		     ld_ch   db		     0c8h    ; left  down char
1   227	0188  BB		     rt_ch   db		     0bbh    ; right top  char
1   228	0189  BC		     rd_ch   db		     0bch    ; rigth down char
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 5
main.asm



1   229
1   230	018A  BA		     v_ch    db		     0bah    ; vertical	      char
1   231	018B  CD		     h_ch    db		     0cdh    ; horizontal char
1   232
1   233	018C			     PrintBox		     proc
1   234
1   235	018C  53						     push bx			     ; print left top char
1   236	018D  A0 0186r						     mov al, lt_ch
1   237	0190  8A 26 0185r					     mov ah, box_clr
1   238	0194  E8 FFBB						     call PrintChar
1   239	0197  5B						     pop bx
1   240
1   241	0198  53						     push bx			     ; print left down char
1   242	0199  02 D9						     add bl, cl
1   243	019B  80 EB 01						     sub bl, 1
1   244	019E  A0 0187r						     mov al, ld_ch
1   245	01A1  8A 26 0185r					     mov ah, box_clr
1   246	01A5  E8 FFAA						     call PrintChar
1   247	01A8  5B						     pop bx
1   248
1   249	01A9  53						     push bx			     ; print right top char
1   250	01AA  02 FD						     add bh, ch
1   251	01AC  80 EF 01						     sub bh, 1
1   252	01AF  A0 0188r						     mov al, rt_ch
1   253	01B2  8A 26 0185r					     mov ah, box_clr
1   254	01B6  E8 FF99						     call PrintChar
1   255	01B9  5B						     pop bx
1   256
1   257	01BA  53						     push bx			     ; print right down	char
1   258	01BB  02 FD						     add bh, ch
1   259	01BD  80 EF 01						     sub bh, 1
1   260	01C0  02 D9						     add bl, cl
1   261	01C2  80 EB 01						     sub bl, 1
1   262	01C5  A0 0189r						     mov al, rd_ch
1   263	01C8  8A 26 0185r					     mov ah, box_clr
1   264	01CC  E8 FF83						     call PrintChar
1   265	01CF  5B						     pop bx
1   266
1   267	01D0  53						     push bx			     ; print top horizontal line
1   268	01D1  80 C7 01						     add bh, 1
1   269	01D4  A0 018Br						     mov al, h_ch
1   270	01D7  8A 26 0185r					     mov ah, box_clr
1   271	01DB  80 ED 02						     sub ch, 2
1   272	01DE  E8 FF7A						     call PrintHrzLine
1   273	01E1  80 C5 02						     add ch, 2
1   274	01E4  5B						     pop bx
1   275
1   276	01E5  53						     push bx			     ; print down horizontal line
1   277	01E6  80 C7 01						     add bh, 1
1   278	01E9  02 D9						     add bl, cl
1   279	01EB  80 EB 01						     sub bl, 1
1   280	01EE  A0 018Br						     mov al, h_ch
1   281	01F1  8A 26 0185r					     mov ah, box_clr
1   282	01F5  80 ED 02						     sub ch, 2
1   283	01F8  E8 FF60						     call PrintHrzLine
1   284	01FB  80 C5 02						     add ch, 2
1   285	01FE  5B						     pop bx
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 6
main.asm



1   286
1   287	01FF  53						     push bx			     ; print left vertical line
1   288	0200  80 C3 01						     add bl, 1
1   289	0203  A0 018Ar						     mov al, v_ch
1   290	0206  8A 26 0185r					     mov ah, box_clr
1   291	020A  80 E9 02						     sub cl, 2
1   292	020D  E8 FF60						     call PrintVrtLine
1   293	0210  80 C1 02						     add cl, 2
1   294	0213  5B						     pop bx
1   295
1   296	0214  53						     push bx			     ; print right vertical line
1   297	0215  80 C3 01						     add bl, 1
1   298	0218  02 FD						     add bh, ch
1   299	021A  80 EF 01						     sub bh, 1
1   300	021D  A0 018Ar						     mov al, v_ch
1   301	0220  8A 26 0185r					     mov ah, box_clr
1   302	0224  80 E9 02						     sub cl, 2
1   303	0227  E8 FF46						     call PrintVrtLine
1   304	022A  80 C1 02						     add cl, 2
1   305	022D  5B						     pop bx
1   306
1   307	022E  C3						     ret
1   308	022F							     endp
1   309
1   310				     ;------------------------------------------------
    311				     include	     NUM_CNVR.ASM    ; Print AX	in BIN/DEC/HEX
1   312
1   313				     ;------------------------------------------------
1   314				     ;	     AX	TO BIN
1   315				     ;------------------------------------------------
1   316				     ; ENTRY:	     AX	= NUM
1   317				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   318				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   319				     ; EXIT:	     NONE
1   320				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   321				     ; DESTROYS:     DX	DI
1   322				     ;------------------------------------------------
1   323
1   324	      =0010		     bin_len = 16d						     ; len of bin str
1   325
1   326	022F			     PrintBin		     proc
1   327	022F  50						     push ax				     ; push (1)
1   328
1   329	0230  E8 FF0D						     call GetVideoPos		     ; AX = Video position from	(X; +
    330				     Y)
1   331	0233  BF 0020						     mov di, bin_len * 2d    ; i = bin_len * 2 + AX
1   332	0236  03 F8						     add di, ax
1   333	0238  FD						     std
1   334
1   335	0239  58						     pop  ax				     ; pop  (1)
1   336
1   337	023A  33 D2						     xor dx, dx				     ; i = 0
1   338
1   339	023C  50						     push ax				     ; push (2)
1   340
1   341	023D  D1 E8						     __Next:		     shr ax, 1				    +
    342				     ; AX /= 2
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 7
main.asm



1   343
1   344	023F  50										     push ax			    +
    345				     ; push (3)
1   346
1   347	0240  72 05										     jc	__One
1   348
1   349	0242  B0 30										     __Zero:		     mov al,+
    350				     '0'		     ; '0'
1   351	0244  EB 03 90														    +
    352				     jmp __End
1   353
1   354	0247  B0 31										     __One:		     mov al,+
    355				     '1'		     ; '1'
1   356
1   357	0249  B4 70						     __End:		     mov ah, 70h			    +
    358				     ; black on	white
1   359
1   360	024B  83 EF 02										     sub di, 2			    +
    361				     ; print( ax ) // with 1 sym left( 2 bytes )
1   362	024E  AB										     stosw
1   363	024F  83 C7 02										     add di, 2
1   364
1   365	0252  58										     pop ax			    +
    366				     ; pop (3)
1   367
1   368	0253  42										     inc dx
1   369
1   370	0254  83 FA 10										     cmp dx, bin_len		    +
    371				     ; if( di == bin_len )
1   372	0257  75 E4										     jne __Next
1   373
1   374	0259  58						     pop ax				     ; pop  (2)
1   375
1   376	025A  C3						     ret
1   377	025B							     endp
1   378
1   379				     ;------------------------------------------------
1   380				     ;	     AX	TO HEX
1   381				     ;------------------------------------------------
1   382				     ; ENTRY:	     AX	= NUM
1   383				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   384				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   385				     ; EXIT:	     NONE
1   386				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   387				     ; DESTROYS:     CX	DX DI
1   388				     ;------------------------------------------------
1   389
1   390	      =0010		     hex_len = 16d						     ; len of hex str
1   391
1   392	025B			     PrintHex		     proc
1   393
1   394	025B  50						     push ax				     ; push (1)
1   395
1   396	025C  E8 FEE1						     call GetVideoPos		     ; AX = Video position from	(X; +
    397				     Y)
1   398	025F  BF 0020						     mov di, hex_len * 2d    ; i = hex_len * 2 + AX
1   399	0262  03 F8						     add di, ax
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 8
main.asm



1   400	0264  FD						     std
1   401
1   402	0265  58						     pop  ax				     ; pop  (1)
1   403
1   404	0266  33 D2						     xor dx, dx				     ; i = 0
1   405
1   406	0268  50						     push ax				     ; push (2)
1   407
1   408	0269  B9 0000						     __Next:		     mov cx, 0			     ;	    +
    409				     shifts counter
1   410
1   411	026C  52										     push dx			    +
    412				     ; push (4)
1   413	026D  BA 0000										     mov  dx, 0			    +
    414				     ; DX = 0
1   415
1   416	0270  D1 E8										     __Shift:		     shr ax,+
    417				     1		     ; AX /= 2
1   418
1   419	0272  73 09														    +
    420				     jnc __End
1   421
1   422	0274  50														    +
    423				     __One:		     push ax		     ; push (3)
1   424	0275  B8 0001														    +
    425				     mov  ax, 1		     ; AX = 0001b
1   426	0278  D3 E0														    +
    427				     shl  ax, cl	     ; DX += 2^CX
1   428	027A  03 D0														    +
    429				     add  dx, ax
1   430	027C  58														    +
    431				     pop      ax		     ; pop  (3)
1   432
1   433	027D  41										     __End:		     inc cx +
    434				     ; shifts counter ++
1   435	027E  83 F9 04														    +
    436				     cmp cx, 4d		     ; if( numShifts ==	4 )
1   437	0281  75 ED														    +
    438				     jne __Shift
1   439
1   440	0283  8B C8										     mov cx, ax			    +
    441				     ; CX = AX
1   442
1   443	0285  83 FA 0A										     cmp dx, 10d		    +
    444				     ; if( DX >= 10 )
1   445	0288  7D 08										     jge __Sym
1   446
1   447	028A  83 C2 30										     __Digit:		     add dx,+
    448				     48d	     ; print( DX + '0' )
1   449	028D  8A C2														    +
    450				     mov al, dl
1   451	028F  EB 09 90														    +
    452				     jmp __Print
1   453
1   454	0292  83 EA 0A										     __Sym:		     sub dx,+
    455				     10		     ; print( DX - 10 +	'A' )
1   456	0295  83 C2 41														    +
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 9
main.asm



    457				     add dx, 65d
1   458	0298  8A C2														    +
    459				     mov al, dl
1   460
1   461	029A  5A						     __Print:		     pop dx			     ; pop  +
    462				     (4)
1   463
1   464	029B  B4 70										     mov ah, 70h		    +
    465				     ; black on	white
1   466
1   467	029D  83 EF 02										     sub di, 2			    +
    468				     ; print( ax ) // with 1 sym left( 2 bytes )
1   469	02A0  AB										     stosw
1   470	02A1  83 C7 02										     add di, 2
1   471
1   472	02A4  8B C1										     mov ax, cx			    +
    473				     ; AX = CX
1   474
1   475	02A6  42										     inc dx			    +
    476				     ; i++
1   477
1   478	02A7  83 FA 10										     cmp dx, hex_len	     ; if(  +
    479				     di	== hex_len )
1   480	02AA  75 BD										     jne __Next
1   481
1   482	02AC  58						     pop ax				     ; pop  (2)
1   483
1   484	02AD  C3						     ret
1   485	02AE							     endp
1   486
1   487				     ;------------------------------------------------
    488
    489				     end		     Start
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/18/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "03:59:43"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BIN_LEN				  Number 0010
BOX_CLR				  Byte	 DGROUP:0185
CLRSCRN				  Near	 DGROUP:0131
GETVIDEOPOS			  Near	 DGROUP:0140
HEX_LEN				  Number 0010
H_CH				  Byte	 DGROUP:018B
LD_CH				  Byte	 DGROUP:0187
LT_CH				  Byte	 DGROUP:0186
PRINTBIN			  Near	 DGROUP:022F
PRINTBOX			  Near	 DGROUP:018C
PRINTCHAR			  Near	 DGROUP:0152
PRINTHEX			  Near	 DGROUP:025B
PRINTHRZLINE			  Near	 DGROUP:015B
PRINTVRTLINE			  Near	 DGROUP:0170
RD_CH				  Byte	 DGROUP:0189
RT_CH				  Byte	 DGROUP:0188
START				  Near	 DGROUP:0100
V_CH				  Byte	 DGROUP:018A
__DIGIT				  Near	 DGROUP:028A
__END				  Near	 DGROUP:016F
__END				  Near	 DGROUP:0184
__END				  Near	 DGROUP:0249
__END				  Near	 DGROUP:027D
__NEXT				  Near	 DGROUP:0137
__NEXT				  Near	 DGROUP:0163
__NEXT				  Near	 DGROUP:0178
__NEXT				  Near	 DGROUP:023D
__NEXT				  Near	 DGROUP:0269
__ONE				  Near	 DGROUP:0247
__ONE				  Near	 DGROUP:0274
__PRINT				  Near	 DGROUP:029A
__SHIFT				  Near	 DGROUP:0270
__SYM				  Near	 DGROUP:0292
__ZERO				  Near	 DGROUP:0242
Turbo Assembler	 Version 4.1	    02/18/23 03:59:44	    Page 11
Symbol Table




Macro Name

EXIT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  02AE Word	  Public  CODE
