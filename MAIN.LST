Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 1
main.asm



      1
      2				     .186
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals __
      8
      9				     include	     TOOLS.ASM			     ; Exit
1    10
1    11				     ;------------------------------------------------
1    12				     ;	     EXIT PROGRAM
1    13				     ;------------------------------------------------
1    14				     ; Entry:	     NONE
1    15				     ; EXIT:	     NONE
1    16				     ; DESTROYS: AX
1    17				     ;------------------------------------------------
1    18
1    19				     EXIT	     macro
1    20							     nop
1    21							     mov ax, 4c00h
1    22							     int 21h
1    23							     nop
1    24							     endm
1    25
1    26				     ;------------------------------------------------
     27
     28				     ;------------------------------------------------
     29
     30	0100  BB B800		     Start:	     mov bx, 0b800h	     ; ES = VideoSeg
     31	0103  8E C3					     mov es, bx
     32
     33	0105  BB 012Dr					     mov bx, offset CmdData
     34	0108  E8 01BF					     call CmdLineHndl
     35
     36	010B  B8 0020					     mov byte ptr ax, '	'
     37	010E  E8 0049					     call ClrScrn
     38
     39	0111  B7 00					     mov bh, 0d		     ; X
     40	0113  B3 04					     mov bl, 4d		     ; Y
     41	0115  B5 32					     mov ch, 50d	     ; WIDTH
     42	0117  B1 0A					     mov cl, 10d	     ; HEIGHT
     43	0119  E8 00A3					     call PrintBox
     44
     45	011C  A1 012Dr					     mov ax, [CmdData]
     46
     47	011F  B7 01					     mov bh, 1d		     ; X
     48	0121  B3 05					     mov bl, 5d		     ; Y
     49	0123  E8 02EB					     call PrintNum
     50
     51							     EXIT
1    52	0126  90					     nop
1    53	0127  B8 4C00					     mov ax, 4c00h
1    54	012A  CD 21					     int 21h
1    55	012C  90					     nop
     56
     57				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 2
main.asm



     58
     59	012D  14*(0000)		     CmdData dw	     20	dup (0)		     ; Cmd line	data
     60
     61				     ;			     X	 Y   W	  H    CLR
     62	0155  00 04 32 0A 07	     arr db	     0d, 4d, 50d, 10d, 07h
     63
     64				     include	     SCR_HNDL.ASM    ; Clear screen function
1    65
1    66				     ; SCREEN HANDLER
1    67
1    68				     ;------------------------------------------------
1    69				     ;	     CLEAR SCREEN BY SYM
1    70				     ;------------------------------------------------
1    71				     ; ENTRY:	     AH	= COLOR	ATTR
1    72				     ;			     Al	= SYM
1    73				     ; EXIT:	     NONE
1    74				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    75				     ; DESTROYS:     BX	CX
1    76				     ;------------------------------------------------
1    77
1    78	015A			     ClrScrn		     proc
1    79
1    80	015A  BB 0000						     mov bx, 0			     ; bx = 0
1    81	015D  B9 07D0						     mov cx, 80d * 25d
1    82
1    83	0160  26: 89 07						     __Next:		     mov es:[bx], ax
1    84	0163  83 C3 02										     add bx, 2
1    85
1    86	0166  E2 F8										     loop __Next
1    87
1    88	0168  C3						     ret
1    89	0169							     endp
1    90
1    91				     ;------------------------------------------------
1    92				     ;	     GET VIDEO POS FROM	(X; Y)
1    93				     ;------------------------------------------------
1    94				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1    95				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1    96				     ; EXIT:	     AX	= POS
1    97				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    98				     ; DESTROYS:     AX
1    99				     ;------------------------------------------------
1   100
1   101	0169			     GetVideoPos	     proc
1   102
1   103	0169  D0 E7						     shl bh, 1		     ; bh /= 2
1   104
1   105	016B  52						     push dx		     ; push (1)
1   106
1   107	016C  B0 A0						     mov al, 160d    ; ax = 160	* Y + 2	* X
1   108	016E  F6 E3						     mul bl
1   109	0170  BA 0000						     mov dx, 0
1   110	0173  02 D7						     add dl, bh
1   111	0175  03 C2						     add ax, dx
1   112
1   113	0177  5A						     pop dx		     ; pop  (1)
1   114
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 3
main.asm



1   115	0178  D0 EF						     shr bh, 1		     ; bh *= 2
1   116
1   117	017A  C3						     ret
1   118	017B							     endp
1   119
1   120				     ;------------------------------------------------
1   121				     ;	     PRINT SYM IN (X; Y)
1   122				     ;------------------------------------------------
1   123				     ; ENTRY:	     AH	= SYM COLOR
1   124				     ;			     AL	= SYM CHAR
1   125				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   126				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   127				     ; EXIT:	     NONE
1   128				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   129				     ; DESTROYS:     DI
1   130				     ;------------------------------------------------
1   131
1   132	017B			     PrintChar		     proc
1   133
1   134	017B  50						     push ax		     ; push (1)
1   135
1   136	017C  E8 FFEA						     call GetVideoPos
1   137
1   138	017F  8B F8						     mov di, ax		     ; print( ax )
1   139	0181  58						     pop ax		     ; pop  (1)
1   140	0182  AB						     stosw
1   141
1   142	0183  C3						     ret
1   143	0184							     endp
1   144
1   145				     ;------------------------------------------------
1   146				     ;	     PRINT HORIZONTAL LINE IN (X; Y)
1   147				     ;------------------------------------------------
1   148				     ; ENTRY:	     AH	= SYM COLOR
1   149				     ;			     AL	= SYM CHAR
1   150				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   151				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   152				     ;			     CH	= WIDTH
1   153				     ; EXIT:	     NONE
1   154				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   155				     ; DESTROYS:     DX	DI
1   156				     ;------------------------------------------------
1   157
1   158	0184			     PrintHrzLine    proc
1   159
1   160	0184  80 FD 00						     cmp ch, 0		     ; if( ch <= 0 ) ret
1   161	0187  76 0F						     jbe __End
1   162
1   163	0189  53						     push bx
1   164
1   165	018A  33 D2						     xor dx, dx		     ; i = 0
1   166
1   167	018C  E8 FFEC						     __Next:		     call PrintChar
1   168
1   169	018F  FE C7										     inc bh
1   170	0191  FE C6										     inc dh
1   171
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 4
main.asm



1   172	0193  3A F5										     cmp dh, ch
1   173	0195  75 F5										     jne __Next
1   174	0197  5B						     pop bx
1   175
1   176	0198							     __End:
1   177	0198  C3						     ret
1   178	0199							     endp
1   179
1   180				     ;------------------------------------------------
1   181				     ;	     PRINT VERTICAL LINE IN (X;	Y)
1   182				     ;------------------------------------------------
1   183				     ; ENTRY:	     AH	= SYM COLOR
1   184				     ;			     AL	= SYM CHAR
1   185				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   186				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   187				     ;			     CL	= HEIGHT
1   188				     ; EXIT:	     NONE
1   189				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   190				     ; DESTROYS:     DX	DI
1   191				     ;------------------------------------------------
1   192
1   193	0199			     PrintVrtLine    proc
1   194
1   195	0199  80 F9 00						     cmp cl, 0		     ; if( cl <= 0 ) ret
1   196	019C  76 0F						     jbe __End
1   197
1   198	019E  53						     push bx
1   199
1   200	019F  33 D2						     xor dx, dx		     ; i = 0
1   201
1   202	01A1  E8 FFD7						     __Next:		     call PrintChar
1   203
1   204	01A4  FE C3										     inc bl
1   205	01A6  FE C2										     inc dl
1   206
1   207	01A8  3A D1										     cmp dl, cl
1   208	01AA  75 F5										     jne __Next
1   209	01AC  5B						     pop bx
1   210
1   211	01AD							     __End:
1   212	01AD  C3						     ret
1   213	01AE							     endp
1   214
1   215				     ;------------------------------------------------
1   216				     ;	     PRINT BOX
1   217				     ;------------------------------------------------
1   218				     ; ENTRY:	     BX	= DATA ADDR
1   219				     ; EXIT:	     NONE
1   220				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   221				     ; DESTROYS:     AX	DX DI
1   222				     ;------------------------------------------------
1   223
1   224	01AE  1F		     box_clr db		     01fh    ; yellow on red
1   225
1   226				     ;				     lt	       ld    rt	       rd    lv	       rv    th	       dh
1   227	01AF  C9 C8 BB BC BA BA	CD+  type_1  db		     0c9h, 0c8h, 0bbh, 0bch, 0bah, 0bah, 0cdh, 0cdh
    228	      CD
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 5
main.asm



1   229	01B7  C9 C8 BB BC 03 03	03+  type_2  db		     0c9h, 0c8h, 0bbh, 0bch, 003h, 003h, 003h, 003h
    230	      03
1   231
1   232	01BF			     PrintBox		     proc
1   233
1   234	01BF  8A 26 01AEr					     mov ah, box_clr
1   235
1   236	01C3  53						     push bx			     ; print left top char
1   237	01C4  A0 01B7r						     mov al, type_2[0]
1   238	01C7  E8 FFB1						     call PrintChar
1   239	01CA  5B						     pop bx
1   240
1   241	01CB  53						     push bx			     ; print left down char
1   242	01CC  02 D9						     add bl, cl
1   243	01CE  80 EB 01						     sub bl, 1
1   244	01D1  A0 01B8r						     mov al, type_2[1]
1   245	01D4  E8 FFA4						     call PrintChar
1   246	01D7  5B						     pop bx
1   247
1   248	01D8  53						     push bx			     ; print right top char
1   249	01D9  02 FD						     add bh, ch
1   250	01DB  80 EF 01						     sub bh, 1
1   251	01DE  A0 01B9r						     mov al, type_2[2]
1   252	01E1  E8 FF97						     call PrintChar
1   253	01E4  5B						     pop bx
1   254
1   255	01E5  53						     push bx			     ; print right down	char
1   256	01E6  02 FD						     add bh, ch
1   257	01E8  80 EF 01						     sub bh, 1
1   258	01EB  02 D9						     add bl, cl
1   259	01ED  80 EB 01						     sub bl, 1
1   260	01F0  A0 01BAr						     mov al, type_2[3]
1   261	01F3  E8 FF85						     call PrintChar
1   262	01F6  5B						     pop bx
1   263
1   264	01F7  53						     push bx			     ; print left vertical line
1   265	01F8  80 C3 01						     add bl, 1
1   266	01FB  A0 01BBr						     mov al, type_2[4]
1   267	01FE  80 E9 02						     sub cl, 2
1   268	0201  E8 FF95						     call PrintVrtLine
1   269	0204  80 C1 02						     add cl, 2
1   270	0207  5B						     pop bx
1   271
1   272	0208  53						     push bx			     ; print right vertical line
1   273	0209  80 C3 01						     add bl, 1
1   274	020C  02 FD						     add bh, ch
1   275	020E  80 EF 01						     sub bh, 1
1   276	0211  A0 01BCr						     mov al, type_2[5]
1   277	0214  80 E9 02						     sub cl, 2
1   278	0217  E8 FF7F						     call PrintVrtLine
1   279	021A  80 C1 02						     add cl, 2
1   280	021D  5B						     pop bx
1   281
1   282	021E  53						     push bx			     ; print top horizontal line
1   283	021F  80 C7 01						     add bh, 1
1   284	0222  A0 01BDr						     mov al, type_2[6]
1   285	0225  80 ED 02						     sub ch, 2
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 6
main.asm



1   286	0228  E8 FF59						     call PrintHrzLine
1   287	022B  80 C5 02						     add ch, 2
1   288	022E  5B						     pop bx
1   289
1   290	022F  53						     push bx			     ; print down horizontal line
1   291	0230  80 C7 01						     add bh, 1
1   292	0233  02 D9						     add bl, cl
1   293	0235  80 EB 01						     sub bl, 1
1   294	0238  A0 01BEr						     mov al, type_2[7]
1   295	023B  80 ED 02						     sub ch, 2
1   296	023E  E8 FF43						     call PrintHrzLine
1   297	0241  80 C5 02						     add ch, 2
1   298	0244  5B						     pop bx
1   299
1   300	0245  C3						     ret
1   301	0246							     endp
1   302
1   303				     ;------------------------------------------------
1   304				     ;	     INPUT STR
1   305				     ;------------------------------------------------
1   306				     ; ENTRY:	     NONE
1   307				     ; EXIT:	     AX	= STR LEN
1   308				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   309				     ; DESTROYS:     AX
1   310				     ;------------------------------------------------
1   311
1   312	      =0064		     InputLen =	100
1   313	0246  64*(00)		     InputStr db     InputLen dup (0)
1   314
1   315	02AA			     Input		     proc
1   316
1   317	02AA  52						     push dx		     ; push (1)
1   318	02AB  33 D2						     xor  dx, dx	     ; i = 0
1   319
1   320	02AD  B4 01						     __Next:		     mov ah, 01h			    +
    321				     ; input char
1   322	02AF  CD 21										     int 21h
1   323
1   324	02B1  56										     push si			    +
    325				     ; push (2)
1   326
1   327	02B2  33 F6										     xor si, si			    +
    328				     ; SI = 0
1   329
1   330	02B4  BE 0246r										     mov si, offset InputStr	    +
    331				     ; SI = InputStr + DX
1   332	02B7  03 F2										     add si, dx
1   333
1   334	02B9  88 04										     mov [si], al
1   335
1   336	02BB  5E										     pop si			    +
    337				     ; pop  (2)
1   338
1   339	02BC  3C 0D										     cmp al, 13d		    +
    340				     ; if( al == '\r' )
1   341	02BE  74 06										     je	__End
1   342
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 7
main.asm



1   343	02C0  42										     inc dx			    +
    344				     ; i++
1   345	02C1  83 FA 64										     cmp dx, InputLen		    +
    346				     ; if( i ==	InputLen )
1   347	02C4  75 E7										     jne __Next
1   348
1   349	02C6							     __End:
1   350
1   351	02C6  8B C2						     mov ax, dx
1   352	02C8  5A						     pop dx		     ; pop  (1)
1   353
1   354	02C9  C3						     ret
1   355	02CA							     endp
1   356
1   357				     ;------------------------------------------------
1   358
    359				     include	     CMD_HNDL.ASM    ; CMD line	handler
1   360
1   361				     ;------------------------------------------------
1   362				     ;	     DIVIDE CMD	LINE ARGS TO ARRAY
1   363				     ;------------------------------------------------
1   364				     ; ENTRY:	     BX	= ARR ADDR ( ARGS )
1   365				     ; EXIT:	     AX	= NUM ARGS
1   366				     ; DESTROYS:     AX
1   367				     ;------------------------------------------------
1   368
1   369	02CA			     CmdLineHndl     proc
1   370
1   371	02CA  33 C0				     xor ax, ax	     ; AX = 0 (	num args counter = 0 )
1   372
1   373	02CC  56				     push si	     ; push (1)
1   374	02CD  51				     push cx	     ; push (2)
1   375	02CE  52				     push dx	     ; push (3)
1   376
1   377	02CF  BE 0082				     mov si, 82h     ; CurrSymPos = 82h
1   378
1   379	02D2  33 C9				     __NextNum:		 xor cx, cx	 ; i = 0
1   380
1   381	02D4  80 3C 20							 __Next:	 cmp byte ptr [si], ' '	     ; if( CurrSym  +
    382				     ==	' ' )
1   383	02D7  74 0E									 je __End
1   384	02D9  80 3C 00									 cmp byte ptr [si], 0d	     ; if( CurrSym  +
    385				     ==	'\0' )
1   386	02DC  74 09									 je __End
1   387	02DE  80 3C 0D									 cmp byte ptr [si], 13d	     ; if( CurrSym  +
    388				     ==	'\r' )
1   389	02E1  74 04									 je __End
1   390
1   391	02E3  41									 inc cx			     ; i++
1   392	02E4  46									 inc si			     ; CurrSymPos++
1   393
1   394	02E5  EB ED									 jmp __Next
1   395	02E7								 __End:
1   396
1   397	02E7  83 F9 00							 cmp cx, 0	 ; if( i == 0 )
1   398	02EA  74 21							 je __EndNum
1   399
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 8
main.asm



1   400									 ; STR to NUM
1   401	02EC  53							 push bx	 ; push	(4)
1   402	02ED  50							 push ax	 ; push	(5)
1   403	02EE  8B DE							 mov  bx, si	 ; BX =	SI - i
1   404	02F0  2B D9							 sub  bx, cx
1   405	02F2  E8 0036							 call Atoi
1   406	02F5  8B C8							 mov  cx, ax	 ; CX =	AX
1   407	02F7  58							 pop  ax	 ; pop	(5)
1   408	02F8  5B							 pop  bx	 ; pop	(4)
1   409
1   410									 ; put NUM to ARR
1   411	02F9  53							 push bx		     ; push (6)
1   412	02FA  03 D8							 add  bx, ax		     ; BX += CurrNumArg
1   413	02FC  89 0F							 mov  word ptr [bx], cx	     ; arr[AX] = NUM
1   414	02FE  5B							 pop  bx		     ; pop  (6)
1   415
1   416	02FF  40							 inc ax			     ; NumArgs++
1   417
1   418	0300  80 3C 0D							 cmp byte ptr [si], 13d	     ; if( CurrSym == '\r' )
1   419	0303  74 08							 je __EndNum
1   420	0305  80 3C 00							 cmp byte ptr [si], 0d	     ; if( CurrSym == '\0' )
1   421	0308  74 03							 je __EndNum
1   422
1   423	030A  46							 inc si			     ; CurrSymPos++
1   424
1   425	030B  EB C5							 jmp __NextNum
1   426	030D					     __EndNum:
1   427
1   428	030D  5A				     pop dx	     ; pop  (3)
1   429	030E  59				     pop cx	     ; pop  (2)
1   430	030F  5E				     pop si	     ; pop  (1)
1   431
1   432	0310  C3				     ret
1   433	0311					     endp
1   434
1   435				     ;------------------------------------------------
    436				     include	     STR_HNDL.ASM    ; Str handler
1   437
1   438				     ;------------------------------------------------
1   439				     ;	     GET STR LEN
1   440				     ;------------------------------------------------
1   441				     ; ENTRY:	     BX	= STR ADDR
1   442				     ; EXIT:	     AX	= LEN
1   443				     ; EXPECTS:	 END SYM = '$' or '\0'
1   444				     ; DESTROYS: NONE
1   445				     ;------------------------------------------------
1   446
1   447	0311			     StrLen	     proc
1   448
1   449	0311  33 C0				     xor ax, ax	     ; i = 0
1   450
1   451	0313  51						     push cx		     ; push (1)
1   452	0314  56						     push si		     ; push (2)
1   453
1   454	0315  8B F3				     __Next:		     mov  si, bx     ; SI = BX + i
1   455	0317  03 F0										 add  si, ax
1   456
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 9
main.asm



1   457	0319  40										     inc  ax		     ; i++
1   458	031A  8B 0C										     mov  cx, [si]   ; CX = current +
    459				     symbol
1   460
1   461	031C  80 FD 24										     cmp  ch, '$'    ; if( ch == '$'+
    462				     )
1   463	031F  74 07										     je	__End
1   464	0321  80 FD 00										     cmp  ch, 0d     ; if( ch ==    +
    465				     '\0' )
1   466	0324  74 02										     je	__End
1   467
1   468	0326  EB ED										     jmp __Next
1   469
1   470	0328							     __End:
1   471	0328  5E						     pop si		     ; pop  (2)
1   472	0329  59						     pop cx		     ; pop  (1)
1   473
1   474	032A  C3				     ret
1   475	032B					     endp
1   476
1   477				     ;------------------------------------------------
1   478				     ;	     TRANSLATE STR TO NUMBER
1   479				     ;------------------------------------------------
1   480				     ; ENTRY:	     BX	= STR ADDR
1   481				     ; EXIT:	     AX	= NUM
1   482				     ; EXPECTS:	     CX	= STR LEN
1   483				     ; DESTROYS:     AX
1   484				     ;------------------------------------------------
1   485
1   486	032B			     Atoi		     proc
1   487
1   488	032B  52						     push dx		     ; push (1)
1   489
1   490	032C  33 C0						     xor ax, ax		     ; AX = 0
1   491	032E  33 D2						     xor dx, dx		     ; i = 0
1   492
1   493	0330  8B F3						     __Next:		     mov si, bx		     ; SI = BX + CX +
    494				     - i
1   495	0332  03 F1										     add si, cx
1   496	0334  2B F2										     sub si, dx
1   497	0336  83 EE 01										     sub si, 1
1   498
1   499	0339  51										     push cx		     ; push +
    500				     (2)
1   501
1   502	033A  50										     push ax		     ; push +
    503				     (3)
1   504	033B  33 C0										     xor  ax, ax     ; AX = 0
1   505	033D  8A 04										     mov  al, [si]   ; AX = [SI] -  +
    506				     '0'
1   507	033F  2C 30										     sub  al, 48d
1   508
1   509	0341  52										     push dx		     ; push +
    510				     (4)
1   511	0342  8B CA										     mov  cx, dx	     ; AX = +
    512				     AX	* 10^DX
1   513	0344  BE 000A										     mov  si, 10d
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 10
main.asm



1   514	0347  E3 08										     jcxz __NoMul
1   515
1   516	0349  F7 E6										     __Mul:		     mul si
1   517
1   518	034B  49														    +
    519				     dec cx
1   520	034C  83 F9 00														    +
    521				     cmp cx, 0
1   522	034F  75 F8														    +
    523				     jne __Mul
1   524
1   525	0351											     __NoMul:
1   526	0351  5A										     pop  dx		     ; pop  +
    527				     (4)
1   528	0352  8B C8										     mov  cx, ax
1   529
1   530	0354  58										     pop ax		     ; pop  +
    531				     (3)
1   532	0355  03 C1										     add ax, cx
1   533	0357  59										     pop cx		     ; pop  +
    534				     (2)
1   535
1   536	0358  42										     inc dx		     ; i++
1   537
1   538	0359  3B D1										     cmp dx, cx		     ; if( i+
    539				     ==	CX )
1   540	035B  75 D3										     jne __Next
1   541
1   542	035D  5A						     pop dx		     ; pop  (1)
1   543
1   544	035E  C3						     ret
1   545	035F							     endp
1   546
1   547				     ;------------------------------------------------
    548				     include	     NUM_CNVR.ASM    ; Print AX	in BIN/DEC/HEX
1   549
1   550				     ;------------------------------------------------
1   551				     ;	     PRINT AX IN BIN
1   552				     ;------------------------------------------------
1   553				     ; ENTRY:	     AX	= NUM
1   554				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   555				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   556				     ; EXIT:	     NONE
1   557				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   558				     ; DESTROYS:     DX	DI
1   559				     ;------------------------------------------------
1   560
1   561	      =0010		     bin_len = 16d						     ; len of bin str
1   562
1   563	035F			     PrintBin		     proc
1   564	035F  50						     push ax				     ; push (1)
1   565
1   566	0360  E8 FE06						     call GetVideoPos		     ; AX = Video position from	(X; +
    567				     Y)
1   568	0363  BF 0020						     mov di, bin_len * 2d    ; i = bin_len * 2 + AX
1   569	0366  03 F8						     add di, ax
1   570	0368  FD						     std
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 11
main.asm



1   571
1   572	0369  58						     pop  ax				     ; pop  (1)
1   573
1   574	036A  33 D2						     xor dx, dx				     ; i = 0
1   575
1   576	036C  50						     push ax				     ; push (2)
1   577
1   578	036D  D1 E8						     __Next:		     shr ax, 1				    +
    579				     ; AX /= 2
1   580
1   581	036F  50										     push ax			    +
    582				     ; push (3)
1   583
1   584	0370  72 05										     jc	__One
1   585
1   586	0372  B0 30										     __Zero:		     mov al,+
    587				     '0'		     ; '0'
1   588	0374  EB 03 90														    +
    589				     jmp __End
1   590
1   591	0377  B0 31										     __One:		     mov al,+
    592				     '1'		     ; '1'
1   593
1   594	0379  B4 70						     __End:		     mov ah, 70h			    +
    595				     ; black on	white
1   596
1   597	037B  83 EF 02										     sub di, 2			    +
    598				     ; print( ax ) // with 1 sym left( 2 bytes )
1   599	037E  AB										     stosw
1   600	037F  83 C7 02										     add di, 2
1   601
1   602	0382  58										     pop ax			    +
    603				     ; pop (3)
1   604
1   605	0383  42										     inc dx
1   606
1   607	0384  83 FA 10										     cmp dx, bin_len		    +
    608				     ; if( dx == bin_len )
1   609	0387  75 E4										     jne __Next
1   610
1   611	0389  58						     pop ax				     ; pop  (2)
1   612
1   613	038A  C3						     ret
1   614	038B							     endp
1   615
1   616				     ;------------------------------------------------
1   617				     ;	     PRINT AX IN HEX
1   618				     ;------------------------------------------------
1   619				     ; ENTRY:	     AX	= NUM
1   620				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   621				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   622				     ; EXIT:	     NONE
1   623				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   624				     ; DESTROYS:     CX	DX DI
1   625				     ;------------------------------------------------
1   626
1   627	      =0010		     hex_len = 16d						     ; len of hex str
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 12
main.asm



1   628
1   629	038B			     PrintHex		     proc
1   630
1   631	038B  50						     push ax				     ; push (1)
1   632
1   633	038C  E8 FDDA						     call GetVideoPos		     ; AX = Video position from	(X; +
    634				     Y)
1   635	038F  BF 0020						     mov di, hex_len * 2d    ; i = hex_len * 2 + AX
1   636	0392  03 F8						     add di, ax
1   637	0394  FD						     std
1   638
1   639	0395  58						     pop  ax				     ; pop  (1)
1   640
1   641	0396  33 D2						     xor dx, dx				     ; i = 0
1   642
1   643	0398  50						     push ax				     ; push (2)
1   644
1   645	0399  B9 0000						     __Next:		     mov cx, 0			     ;	    +
    646				     shifts counter
1   647
1   648	039C  52										     push dx			    +
    649				     ; push (4)
1   650	039D  BA 0000										     mov  dx, 0			    +
    651				     ; DX = 0
1   652
1   653	03A0  D1 E8										     __Shift:		     shr ax,+
    654				     1		     ; AX /= 2
1   655
1   656	03A2  73 09														    +
    657				     jnc __End
1   658
1   659	03A4  50														    +
    660				     __One:		     push ax		     ; push (3)
1   661	03A5  B8 0001														    +
    662				     mov  ax, 1		     ; AX = 0001b
1   663	03A8  D3 E0														    +
    664				     shl  ax, cl	     ; DX += 2^CX
1   665	03AA  03 D0														    +
    666				     add  dx, ax
1   667	03AC  58														    +
    668				     pop      ax		     ; pop  (3)
1   669
1   670	03AD  41										     __End:		     inc cx +
    671				     ; shifts counter ++
1   672	03AE  83 F9 04														    +
    673				     cmp cx, 4d		     ; if( numShifts ==	4 )
1   674	03B1  75 ED														    +
    675				     jne __Shift
1   676
1   677	03B3  8B C8										     mov cx, ax			    +
    678				     ; CX = AX
1   679
1   680	03B5  83 FA 0A										     cmp dx, 10d		    +
    681				     ; if( DX >= 10 )
1   682	03B8  7D 08										     jge __Sym
1   683
1   684	03BA  83 C2 30										     __Digit:		     add dx,+
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 13
main.asm



    685				     48d	     ; print( DX + '0' )
1   686	03BD  8A C2														    +
    687				     mov al, dl
1   688	03BF  EB 09 90														    +
    689				     jmp __Print
1   690
1   691	03C2  83 EA 0A										     __Sym:		     sub dx,+
    692				     10		     ; print( DX - 10 +	'A' )
1   693	03C5  83 C2 41														    +
    694				     add dx, 65d
1   695	03C8  8A C2														    +
    696				     mov al, dl
1   697
1   698	03CA  5A						     __Print:		     pop dx			     ; pop  +
    699				     (4)
1   700
1   701	03CB  B4 70										     mov ah, 70h		    +
    702				     ; black on	white
1   703
1   704	03CD  83 EF 02										     sub di, 2			    +
    705				     ; print( ax ) // with 1 sym left( 2 bytes )
1   706	03D0  AB										     stosw
1   707	03D1  83 C7 02										     add di, 2
1   708
1   709	03D4  8B C1										     mov ax, cx			    +
    710				     ; AX = CX
1   711
1   712	03D6  42										     inc dx			    +
    713				     ; i++
1   714
1   715	03D7  83 FA 10										     cmp dx, hex_len	     ; if(  +
    716				     dx	== hex_len )
1   717	03DA  75 BD										     jne __Next
1   718
1   719	03DC  58						     pop ax				     ; pop  (2)
1   720
1   721	03DD  C3						     ret
1   722	03DE							     endp
1   723
1   724				     ;------------------------------------------------
1   725				     ;	     PRINT AX IN DEC
1   726				     ;------------------------------------------------
1   727				     ; ENTRY:	     AX	= NUM
1   728				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   729				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   730				     ; EXIT:	     NONE
1   731				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   732				     ; DESTROYS:     DI
1   733				     ;------------------------------------------------
1   734
1   735	      =0005		     dec_len = 5d
1   736
1   737	03DE			     PrintDec		     proc
1   738
1   739	03DE  50						     push ax				     ; push (1)
1   740
1   741	03DF  E8 FD87						     call GetVideoPos		     ; AX = Video position from	(X; +
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 14
main.asm



    742				     Y)
1   743	03E2  BF 000A						     mov di, dec_len * 2d    ; i = dec_len * 2 + AX
1   744	03E5  03 F8						     add di, ax
1   745	03E7  FD						     std
1   746
1   747	03E8  58						     pop  ax				     ; pop  (1)
1   748
1   749	03E9  51						     push cx				     ; push (2)
1   750	03EA  52						     push dx				     ; push (3)
1   751
1   752	03EB  33 D2						     xor dx, dx				     ; i = 0
1   753
1   754	03ED  50						     push ax				     ; push (4)
1   755
1   756	03EE  B9 000A						     mov cx, 10d			     ; CX = 10
1   757
1   758	03F1  52						     __Next:		     push dx			     ; push +
    759				     (5)
1   760
1   761	03F2  33 D2										     xor dx, dx			    +
    762				     ; DX = 0
1   763
1   764	03F4  F7 F1										     div  cx			    +
    765				     ; AX /= 10
1   766
1   767	03F6  50										     push ax			    +
    768				     ; push (6)
1   769
1   770	03F7  80 C2 30										     add  dl, 48d	     ; print+
    771				     ( DL + '0'	)
1   772	03FA  8A C2										     mov  al, dl
1   773
1   774	03FC  B4 70										     mov  ah, 70h	     ; black+
    775				     on	white
1   776
1   777	03FE  83 EF 02										     sub di, 2			    +
    778				     ; print( ax ) // with 1 sym left( 2 bytes )
1   779	0401  AB										     stosw
1   780	0402  83 C7 02										     add di, 2
1   781
1   782	0405  58										     pop ax			    +
    783				     ; pop  (6)
1   784	0406  5A										     pop dx			    +
    785				     ; pop  (5)
1   786
1   787	0407  42										     inc dx
1   788
1   789	0408  83 FA 05										     cmp dx, dec_len	     ; if(  +
    790				     DX	== dec_len )
1   791	040B  75 E4										     jne __Next
1   792
1   793	040D  58						     pop ax				     ; pop  (4)
1   794
1   795	040E  5A						     pop dx				     ; pop  (3)
1   796	040F  59						     pop cx				     ; pop  (2)
1   797
1   798	0410  C3						     ret
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 15
main.asm



1   799	0411							     endp
1   800
1   801				     ;------------------------------------------------
1   802				     ;	     PRINT AX IN BIN/HEX/DEC
1   803				     ;------------------------------------------------
1   804				     ; ENTRY:	     AX	= NUM
1   805				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   806				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   807				     ; EXIT:	     NONE
1   808				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   809				     ; DESTROYS:     CX	DX DI
1   810				     ;------------------------------------------------
1   811
1   812	0411			     PrintNum		     proc
1   813
1   814	0411  53						     push bx				     ; push (1)
1   815
1   816	0412  E8 FF4A						     call PrintBin
1   817
1   818	0415  80 C7 11						     add bh, bin_len + 1d    ; X
1   819	0418  E8 FF70						     call PrintHex
1   820
1   821	041B  80 C7 11						     add bh, hex_len + 1d    ; X
1   822	041E  E8 FFBD						     call PrintDec
1   823
1   824	0421  5B						     pop bx				     ; pop  (1)
1   825
1   826	0422  C3						     ret
1   827	0423							     endp
1   828
1   829				     ;------------------------------------------------
    830
    831				     end		     Start
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 16
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/21/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "22:29:49"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARR				  Byte	 DGROUP:0155
ATOI				  Near	 DGROUP:032B
BIN_LEN				  Number 0010
BOX_CLR				  Byte	 DGROUP:01AE
CLRSCRN				  Near	 DGROUP:015A
CMDDATA				  Word	 DGROUP:012D
CMDLINEHNDL			  Near	 DGROUP:02CA
DEC_LEN				  Number 0005
GETVIDEOPOS			  Near	 DGROUP:0169
HEX_LEN				  Number 0010
INPUT				  Near	 DGROUP:02AA
INPUTLEN			  Number 0064
INPUTSTR			  Byte	 DGROUP:0246
PRINTBIN			  Near	 DGROUP:035F
PRINTBOX			  Near	 DGROUP:01BF
PRINTCHAR			  Near	 DGROUP:017B
PRINTDEC			  Near	 DGROUP:03DE
PRINTHEX			  Near	 DGROUP:038B
PRINTHRZLINE			  Near	 DGROUP:0184
PRINTNUM			  Near	 DGROUP:0411
PRINTVRTLINE			  Near	 DGROUP:0199
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:0311
TYPE_1				  Byte	 DGROUP:01AF
TYPE_2				  Byte	 DGROUP:01B7
__DIGIT				  Near	 DGROUP:03BA
__END				  Near	 DGROUP:0198
__END				  Near	 DGROUP:01AD
__END				  Near	 DGROUP:02C6
__END				  Near	 DGROUP:02E7
__END				  Near	 DGROUP:0328
__END				  Near	 DGROUP:0379
__END				  Near	 DGROUP:03AD
__ENDNUM			  Near	 DGROUP:030D
__MUL				  Near	 DGROUP:0349
__NEXT				  Near	 DGROUP:0160
__NEXT				  Near	 DGROUP:018C
__NEXT				  Near	 DGROUP:01A1
Turbo Assembler	 Version 4.1	    02/21/23 22:29:49	    Page 17
Symbol Table



__NEXT				  Near	 DGROUP:02AD
__NEXT				  Near	 DGROUP:02D4
__NEXT				  Near	 DGROUP:0315
__NEXT				  Near	 DGROUP:0330
__NEXT				  Near	 DGROUP:036D
__NEXT				  Near	 DGROUP:0399
__NEXT				  Near	 DGROUP:03F1
__NEXTNUM			  Near	 DGROUP:02D2
__NOMUL				  Near	 DGROUP:0351
__ONE				  Near	 DGROUP:0377
__ONE				  Near	 DGROUP:03A4
__PRINT				  Near	 DGROUP:03CA
__SHIFT				  Near	 DGROUP:03A0
__SYM				  Near	 DGROUP:03C2
__ZERO				  Near	 DGROUP:0372

Macro Name

EXIT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0423 Word	  Public  CODE
