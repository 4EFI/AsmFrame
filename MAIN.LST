Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 1
main.asm



      1
      2				     .186
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals __
      8
      9				     include	     TOOLS.ASM			     ; Exit
1    10
1    11				     ;------------------------------------------------
1    12				     ;	     EXIT PROGRAM
1    13				     ;------------------------------------------------
1    14				     ; Entry:	     NONE
1    15				     ; EXIT:	     NONE
1    16				     ; DESTROYS: AX
1    17				     ;------------------------------------------------
1    18
1    19				     EXIT	     macro
1    20							     nop
1    21							     mov ax, 4c00h
1    22							     int 21h
1    23							     nop
1    24							     endm
1    25
1    26				     ;------------------------------------------------
     27
     28				     ;------------------------------------------------
     29
     30	0100  BB B800		     Start:	     mov bx, 0b800h	     ; ES = VideoSeg
     31	0103  8E C3					     mov es, bx
     32
     33	0105  BB 0128r					     mov bx, offset CmdData
     34	0108  E8 01DB					     call CmdLineHndl
     35
     36	010B  B8 0020					     mov byte ptr ax, '	'
     37	010E  E8 002B					     call ClrScrn
     38
     39	0111  B8 007B					     mov ax, 123d    ; set NUM
     40
     41	0114  B7 01					     mov bh, 1d		     ; X
     42	0116  B3 05					     mov bl, 5d		     ; Y
     43	0118  E8 0317					     call PrintNum
     44
     45	011B  BB 0128r					     mov bx, offset CmdData
     46	011E  E8 00CF					     call PrintBox
     47
     48							     EXIT
1    49	0121  90					     nop
1    50	0122  B8 4C00					     mov ax, 4c00h
1    51	0125  CD 21					     int 21h
1    52	0127  90					     nop
     53
     54				     ;------------------------------------------------
     55
     56	0128  14*(00)		     CmdData db	     20	dup (0)		     ; Cmd line	data
     57
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 2
main.asm



     58				     include	     SCR_HNDL.ASM    ; Clear screen function
1    59
1    60				     ; SCREEN HANDLER
1    61
1    62				     ;------------------------------------------------
1    63				     ;	     CLEAR SCREEN BY SYM
1    64				     ;------------------------------------------------
1    65				     ; ENTRY:	     AH	= COLOR	ATTR
1    66				     ;			     Al	= SYM
1    67				     ; EXIT:	     NONE
1    68				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    69				     ; DESTROYS:     BX	CX
1    70				     ;------------------------------------------------
1    71
1    72	013C			     ClrScrn		     proc
1    73
1    74	013C  BB 0000						     mov bx, 0			     ; bx = 0
1    75	013F  B9 07D0						     mov cx, 80d * 25d
1    76
1    77	0142  26: 89 07						     __Next:		     mov es:[bx], ax
1    78	0145  83 C3 02										     add bx, 2
1    79
1    80	0148  E2 F8										     loop __Next
1    81
1    82	014A  C3						     ret
1    83	014B							     endp
1    84
1    85				     ;------------------------------------------------
1    86				     ;	     GET VIDEO POS FROM	(X; Y)
1    87				     ;------------------------------------------------
1    88				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1    89				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1    90				     ; EXIT:	     AX	= POS
1    91				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    92				     ; DESTROYS:     AX
1    93				     ;------------------------------------------------
1    94
1    95	014B			     GetVideoPos	     proc
1    96
1    97	014B  D0 E7						     shl bh, 1		     ; bh /= 2
1    98
1    99	014D  52						     push dx		     ; push (1)
1   100
1   101	014E  B0 A0						     mov al, 160d    ; ax = 160	* Y + 2	* X
1   102	0150  F6 E3						     mul bl
1   103	0152  BA 0000						     mov dx, 0
1   104	0155  02 D7						     add dl, bh
1   105	0157  03 C2						     add ax, dx
1   106
1   107	0159  5A						     pop dx		     ; pop  (1)
1   108
1   109	015A  D0 EF						     shr bh, 1		     ; bh *= 2
1   110
1   111	015C  C3						     ret
1   112	015D							     endp
1   113
1   114				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 3
main.asm



1   115				     ;	     PRINT SYM IN (X; Y)
1   116				     ;------------------------------------------------
1   117				     ; ENTRY:	     AH	= SYM COLOR
1   118				     ;			     AL	= SYM CHAR
1   119				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   120				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   121				     ; EXIT:	     NONE
1   122				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   123				     ; DESTROYS:     DI
1   124				     ;------------------------------------------------
1   125
1   126	015D			     PrintChar		     proc
1   127
1   128	015D  50						     push ax		     ; push (1)
1   129
1   130	015E  E8 FFEA						     call GetVideoPos
1   131
1   132	0161  8B F8						     mov di, ax		     ; print( ax )
1   133	0163  58						     pop ax		     ; pop  (1)
1   134	0164  AB						     stosw
1   135
1   136	0165  C3						     ret
1   137	0166							     endp
1   138
1   139				     ;------------------------------------------------
1   140				     ;	     PRINT HORIZONTAL LINE IN (X; Y)
1   141				     ;------------------------------------------------
1   142				     ; ENTRY:	     AH	= SYM COLOR
1   143				     ;			     AL	= SYM CHAR
1   144				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   145				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   146				     ;			     CH	= WIDTH
1   147				     ;			     DH	= LEFT	SYM
1   148				     ;			     DL	= RIGHT	SYM
1   149				     ; EXIT:	     NONE
1   150				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   151				     ; DESTROYS:     DI
1   152				     ;------------------------------------------------
1   153
1   154	0166			     PrintHrzLine    proc
1   155
1   156	0166  80 FD 01						     cmp ch, 1			     ; if( ch <= 1 ) ret
1   157	0169  76 37						     jbe __End
1   158
1   159	016B  53						     push bx			     ; push (1)
1   160	016C  52						     push dx			     ; push (2)
1   161
1   162
1   163	016D  50						     push ax			     ; push (3)
1   164	016E  8A C6						     mov al, dh			     ; printf( "%c", LeftSym )
1   165	0170  E8 FFEA						     call PrintChar
1   166	0173  58						     pop ax			     ; pop  (3)
1   167
1   168	0174  50						     push ax			     ; push (4)
1   169	0175  53						     push bx			     ; push (5)
1   170	0176  02 FD						     add bh, ch			     ; X += ( WIDTH - 1	)
1   171	0178  80 EF 01						     sub bh, 1
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 4
main.asm



1   172	017B  8A C2						     mov al, dl			     ; printf( "%c", RightSym )
1   173	017D  E8 FFDD						     call PrintChar
1   174	0180  5B						     pop bx			     ; pop  (5)
1   175	0181  58						     pop ax			     ; pop  (4)
1   176
1   177	0182  53						     push bx			     ; push (6)
1   178	0183  51						     push cx			     ; push (7)
1   179
1   180	0184  80 C7 01						     add bh, 1			     ; X += 1
1   181	0187  80 ED 02						     sub ch, 2			     ; WIDTH -=	2
1   182
1   183	018A  80 FD 00						     cmp ch, 0			     ; if( ch == 0 )
1   184	018D  74 0F						     je	     __EndPrinting
1   185
1   186	018F  33 D2						     xor dx, dx			     ; i = 0
1   187
1   188	0191  E8 FFC9						     __Next:		     call PrintChar
1   189
1   190	0194  FE C7										     inc bh
1   191	0196  FE C6										     inc dh
1   192
1   193	0198  3A F5										     cmp dh, ch
1   194	019A  74 02										     je	 __EndPrinting
1   195
1   196	019C  EB F3										     jmp __Next
1   197
1   198	019E							     __EndPrinting:
1   199
1   200	019E  59						     pop cx			     ; pop  (7)
1   201	019F  5B						     pop bx			     ; pop  (6)
1   202
1   203
1   204	01A0  5A						     pop dx			     ; pop  (2)
1   205	01A1  5B						     pop bx			     ; pop  (1)
1   206
1   207	01A2							     __End:
1   208	01A2  C3						     ret
1   209	01A3							     endp
1   210
1   211				     ;------------------------------------------------
1   212				     ;	     PRINT VERTICAL LINE IN (X;	Y)
1   213				     ;------------------------------------------------
1   214				     ; ENTRY:	     AH	= SYM COLOR
1   215				     ;			     AL	= SYM CHAR
1   216				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   217				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   218				     ;			     CL	= HEIGHT
1   219				     ;			     DH	= TOP  SYM
1   220				     ;			     DL	= DOWN SYM
1   221				     ; EXIT:	     NONE
1   222				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   223				     ; DESTROYS:     DI
1   224				     ;------------------------------------------------
1   225
1   226	01A3			     PrintVrtLine    proc
1   227
1   228	01A3  80 F9 01						     cmp cl, 1			     ; if( cl <= 1 ) ret
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 5
main.asm



1   229	01A6  76 37						     jbe __End
1   230
1   231	01A8  53						     push bx			     ; push (1)
1   232	01A9  52						     push dx			     ; push (2)
1   233
1   234
1   235	01AA  50						     push ax			     ; push (3)
1   236	01AB  8A C6						     mov al, dh			     ; printf( "%c", TopSym )
1   237	01AD  E8 FFAD						     call PrintChar
1   238	01B0  58						     pop ax			     ; pop  (3)
1   239
1   240	01B1  50						     push ax			     ; push (4)
1   241	01B2  53						     push bx			     ; push (5)
1   242	01B3  02 D9						     add bl, cl			     ; Y += ( HEIGHT - 1 )
1   243	01B5  80 EB 01						     sub bl, 1
1   244	01B8  8A C2						     mov al, dl			     ; printf( "%c", DownSym )
1   245	01BA  E8 FFA0						     call PrintChar
1   246	01BD  5B						     pop bx			     ; pop  (5)
1   247	01BE  58						     pop ax			     ; pop  (4)
1   248
1   249	01BF  53						     push bx			     ; push (6)
1   250	01C0  51						     push cx			     ; push (7)
1   251
1   252	01C1  80 C3 01						     add bl, 1			     ; Y += 1
1   253	01C4  80 E9 02						     sub cl, 2			     ; HEIGHT -= 2
1   254
1   255	01C7  80 F9 00						     cmp cl, 0			     ; if( cl == 0 )
1   256	01CA  74 0F						     je	     __EndPrinting
1   257
1   258	01CC  33 D2						     xor dx, dx			     ; i = 0
1   259
1   260	01CE  E8 FF8C						     __Next:		     call PrintChar
1   261
1   262	01D1  FE C3										     inc bl
1   263	01D3  FE C2										     inc dl
1   264
1   265	01D5  3A D1										     cmp dl, cl
1   266	01D7  74 02										     je	 __EndPrinting
1   267
1   268	01D9  EB F3										     jmp __Next
1   269
1   270	01DB							     __EndPrinting:
1   271
1   272	01DB  59						     pop cx			     ; pop  (7)
1   273	01DC  5B						     pop bx			     ; pop  (6)
1   274
1   275
1   276	01DD  5A						     pop dx			     ; pop  (2)
1   277	01DE  5B						     pop bx			     ; pop  (1)
1   278
1   279	01DF							     __End:
1   280	01DF  C3						     ret
1   281	01E0							     endp
1   282
1   283				     ;------------------------------------------------
1   284				     ;	     PRINT BOX
1   285				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 6
main.asm



1   286				     ; ENTRY:	     BX	= DATA ADDR
1   287				     ; EXIT:	     NONE
1   288				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   289				     ; DESTROYS:     NONE
1   290				     ;------------------------------------------------
1   291
1   292	      =0009		     TypeSize =	9
1   293
1   294				     ;				     0		     1		     2		     3		    +
    295				     4		     5		     6		     7
1   296				     ;				     lt		     ld		     rt		     rd		    +
    297				     lv		     rv		     th		     dh
1   298	01E0  C9 C8 BB BC BA BA	CD+  type_1  db		     0c9h,   0c8h,   0bbh,   0bch,   0bah,   0bah,   0cdh,   0cdh
    299	      CD
1   300	01E8  C9 C8 BB BC 03 03	03+  type_2  db		     0c9h,   0c8h,   0bbh,   0bch,   003h,   003h,   003h,   003h
    301	      03
1   302
1   303	      =0000		     X_Num   = 0
1   304	      =0001		     Y_Num   = 1
1   305	      =0002		     W_Num   = 2
1   306	      =0003		     H_Num   = 3
1   307	      =0004		     Clr_Num = 4
1   308
1   309	01F0			     PrintBox		     proc
1   310
1   311	01F0  50						     push ax				     ; push (1)
1   312	01F1  53						     push bx				     ; push (2)
1   313	01F2  51						     push cx				     ; push (3)
1   314	01F3  52						     push dx				     ; push (4)
1   315	01F4  56						     push si				     ; push (5)
1   316	01F5  57						     push di				     ; push (6)
1   317
1   318	01F6  8B F3						     mov si, bx				     ; SI = DATA ADDR( BX )
1   319
1   320	01F8  8A 67 04						     mov ah, bx[Clr_Num]	     ; set Color
1   321
1   322	01FB  8A 6F 02						     mov ch, bx[W_Num]		     ; set WIDTH
1   323	01FE  8A 4F 03						     mov cl, bx[H_Num]		     ; set HEIGHT
1   324
1   325	0201  8A 3C						     mov  bh, si[X_Num]		     ; set X
1   326	0203  8A 5C 01						     mov  bl, si[Y_Num]		     ; set Y
1   327	0206  A0 01E6r						     mov  al, type_1[6]		     ; set horizontal sym
1   328	0209  8A 36 01E0r					     mov  dh, type_1[0]		     ; set left	 top  sym
1   329	020D  8A 16 01E2r					     mov  dl, type_1[2]		     ; set right top  sym
1   330	0211  E8 FF52						     call PrintHrzLine		     ; Print top horizontal line
1   331
1   332	0214  8A 3C						     mov  bh, si[X_Num]		     ; set X
1   333	0216  8A 5C 01						     mov  bl, si[Y_Num]		     ; set Y
1   334	0219  A0 01E4r						     mov  al, type_1[4]		     ; set vertical  sym
1   335	021C  8A 36 01E0r					     mov  dh, type_1[0]		     ; set left	top  sym
1   336	0220  8A 16 01E1r					     mov  dl, type_1[1]		     ; set left	down sym
1   337	0224  E8 FF7C						     call PrintVrtLine		     ; Print left vertical line
1   338
1   339	0227  8A 3C						     mov  bh, si[X_Num]		     ; set X
1   340	0229  8A 54 01						     mov  dl, si[Y_Num]		 ; Y +=	( HEIGHT - 1 )
1   341	022C  02 D1						     add  dl, cl
1   342	022E  80 EA 01						     sub  dl, 1
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 7
main.asm



1   343	0231  8A DA						     mov  bl, dl			     ; set Y
1   344	0233  A0 01E7r						     mov  al, type_1[7]		     ; set horizontal sym
1   345	0236  8A 36 01E1r					     mov  dh, type_1[1]		     ; set left	 down sym
1   346	023A  8A 16 01E3r					     mov  dl, type_1[3]		     ; set right down sym
1   347	023E  E8 FF25						     call PrintHrzLine		     ; Print down horizontal line
1   348
1   349	0241  8A 14						     mov  dl, si[X_Num]		 ; X +=	( WIDTH	- 1 )
1   350	0243  02 D5						     add  dl, ch
1   351	0245  80 EA 01						     sub  dl, 1
1   352	0248  8A FA						     mov  bh, dl			     ; set X
1   353	024A  8A 5C 01						     mov  bl, si[Y_Num]		     ; set Y
1   354	024D  A0 01E5r						     mov  al, type_1[5]		     ; set vertical  sym
1   355	0250  8A 36 01E2r					     mov  dh, type_1[2]		     ; set right top  sym
1   356	0254  8A 16 01E3r					     mov  dl, type_1[3]		     ; set right down sym
1   357	0258  E8 FF48						     call PrintVrtLine		     ; Print right vertical line
1   358
1   359	025B  5F						     pop di				     ; pop  (6)
1   360	025C  5E						     pop si				     ; pop  (5)
1   361	025D  5A						     pop dx				     ; pop  (4)
1   362	025E  59						     pop cx				     ; pop  (3)
1   363	025F  5B						     pop bx				     ; pop  (2)
1   364	0260  58						     pop ax				     ; pop  (1)
1   365
1   366	0261  C3						     ret
1   367	0262							     endp
1   368
1   369				     ;------------------------------------------------
1   370				     ;	     INPUT STR
1   371				     ;------------------------------------------------
1   372				     ; ENTRY:	     NONE
1   373				     ; EXIT:	     AX	= STR LEN
1   374				     ; DESTROYS:     AX
1   375				     ;------------------------------------------------
1   376
1   377	      =0064		     InputLen =	100
1   378	0262  64*(00)		     InputStr db     InputLen dup (0)
1   379
1   380	02C6			     Input		     proc
1   381
1   382	02C6  52						     push dx		     ; push (1)
1   383	02C7  33 D2						     xor  dx, dx	     ; i = 0
1   384
1   385	02C9  B4 01						     __Next:		     mov ah, 01h			    +
    386				     ; input char
1   387	02CB  CD 21										     int 21h
1   388
1   389	02CD  56										     push si			    +
    390				     ; push (2)
1   391
1   392	02CE  33 F6										     xor si, si			    +
    393				     ; SI = 0
1   394
1   395	02D0  BE 0262r										     mov si, offset InputStr	    +
    396				     ; SI = InputStr + DX
1   397	02D3  03 F2										     add si, dx
1   398
1   399	02D5  88 04										     mov [si], al
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 8
main.asm



1   400
1   401	02D7  5E										     pop si			    +
    402				     ; pop  (2)
1   403
1   404	02D8  3C 0D										     cmp al, 13d		    +
    405				     ; if( al == '\r' )
1   406	02DA  74 06										     je	__End
1   407
1   408	02DC  42										     inc dx			    +
    409				     ; i++
1   410	02DD  83 FA 64										     cmp dx, InputLen		    +
    411				     ; if( i ==	InputLen )
1   412	02E0  75 E7										     jne __Next
1   413
1   414	02E2							     __End:
1   415
1   416	02E2  8B C2						     mov ax, dx
1   417	02E4  5A						     pop dx		     ; pop  (1)
1   418
1   419	02E5  C3						     ret
1   420	02E6							     endp
1   421
1   422				     ;------------------------------------------------
1   423
    424				     include	     CMD_HNDL.ASM    ; CMD line	handler
1   425
1   426				     ;------------------------------------------------
1   427				     ;	     DIVIDE CMD	LINE ARGS TO ARRAY ( BYTE PTR )
1   428				     ;------------------------------------------------
1   429				     ; ENTRY:	     BX	= ARR ADDR ( ARGS )
1   430				     ; EXIT:	     AX	= NUM ARGS
1   431				     ; DESTROYS:     AX
1   432				     ;------------------------------------------------
1   433
1   434	02E6			     CmdLineHndl     proc
1   435
1   436	02E6  33 C0				     xor ax, ax	     ; AX = 0 (	num args counter = 0 )
1   437
1   438	02E8  56				     push si	     ; push (1)
1   439	02E9  51				     push cx	     ; push (2)
1   440
1   441	02EA  BE 0082				     mov si, 82h     ; CurrSymPos = 82h
1   442
1   443	02ED  33 C9				     __NextNum:		 xor cx, cx	 ; i = 0
1   444
1   445	02EF  80 3C 20							 __Next:	 cmp byte ptr [si], ' '	     ; if( CurrSym  +
    446				     ==	' ' )
1   447	02F2  74 13									 je __End
1   448	02F4  80 3C 09									 cmp byte ptr [si], 9d	     ; if( CurrSym  +
    449				     ==	'\t' )
1   450	02F7  74 0E									 je __End
1   451	02F9  80 3C 00									 cmp byte ptr [si], 0d	     ; if( CurrSym  +
    452				     ==	'\0' )
1   453	02FC  74 09									 je __End
1   454	02FE  80 3C 0D									 cmp byte ptr [si], 13d	     ; if( CurrSym  +
    455				     ==	'\r' )
1   456	0301  74 04									 je __End
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 9
main.asm



1   457
1   458
1   459	0303  41									 inc cx			     ; i++
1   460	0304  46									 inc si			     ; CurrSymPos++
1   461
1   462	0305  EB E8									 jmp __Next
1   463	0307								 __End:
1   464
1   465	0307  83 F9 00							 cmp cx, 0	 ; if( i == 0 )
1   466	030A  74 14							 je __EndArgsCheck
1   467
1   468									 ; STR to NUM
1   469	030C  53							 push bx	 ; push	(3)
1   470	030D  50							 push ax	 ; push	(4)
1   471	030E  8B DE							 mov  bx, si	 ; BX =	SI - i
1   472	0310  2B D9							 sub  bx, cx
1   473	0312  E8 0035							 call Atoi
1   474	0315  8B C8							 mov  cx, ax	 ; CX =	AX
1   475	0317  58							 pop  ax	 ; pop	(4)
1   476	0318  5B							 pop  bx	 ; pop	(3)
1   477
1   478									 ; put NUM to ARR
1   479	0319  53							 push bx		     ; push (5)
1   480	031A  03 D8							 add  bx, ax		     ; BX += CurrNumArg
1   481	031C  88 0F							 mov  byte ptr [bx], cl	     ; arr[AX] = NUM
1   482	031E  5B							 pop  bx		     ; pop  (5)
1   483
1   484	031F  40							 inc ax			     ; NumArgs++
1   485
1   486	0320								 __EndArgsCheck:
1   487
1   488	0320  80 3C 0D							 cmp byte ptr [si], 13d	     ; if( CurrSym == '\r' )
1   489	0323  74 08							 je __EndNum
1   490	0325  80 3C 00							 cmp byte ptr [si], 0d	     ; if( CurrSym == '\0' )
1   491	0328  74 03							 je __EndNum
1   492
1   493	032A  46							 inc si			     ; CurrSymPos++
1   494
1   495	032B  EB C0							 jmp __NextNum
1   496	032D					     __EndNum:
1   497
1   498	032D  59				     pop cx	     ; pop  (2)
1   499	032E  5E				     pop si	     ; pop  (1)
1   500
1   501	032F  C3				     ret
1   502	0330					     endp
1   503
1   504				     ;------------------------------------------------
    505				     include	     STR_HNDL.ASM    ; Str handler
1   506
1   507				     ;------------------------------------------------
1   508				     ;	     GET STR LEN
1   509				     ;------------------------------------------------
1   510				     ; ENTRY:	     BX	= STR ADDR
1   511				     ; EXIT:	     AX	= LEN
1   512				     ; EXPECTS:	 END SYM = '$' or '\0'
1   513				     ; DESTROYS: AX
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 10
main.asm



1   514				     ;------------------------------------------------
1   515
1   516	0330			     StrLen	     proc
1   517
1   518	0330  33 C0				     xor ax, ax	     ; i = 0
1   519
1   520	0332  51						     push cx		     ; push (1)
1   521	0333  56						     push si		     ; push (2)
1   522
1   523	0334  8B F3				     __Next:		     mov  si, bx     ; SI = BX + i
1   524	0336  03 F0										 add  si, ax
1   525
1   526	0338  40										     inc  ax		     ; i++
1   527	0339  8B 0C										     mov  cx, [si]   ; CX = current +
    528				     symbol
1   529
1   530	033B  80 FD 24										     cmp  ch, '$'    ; if( ch == '$'+
    531				     )
1   532	033E  74 07										     je	__End
1   533	0340  80 FD 00										     cmp  ch, 0d     ; if( ch ==    +
    534				     '\0' )
1   535	0343  74 02										     je	__End
1   536
1   537	0345  EB ED										     jmp __Next
1   538
1   539	0347							     __End:
1   540	0347  5E						     pop si		     ; pop  (2)
1   541	0348  59						     pop cx		     ; pop  (1)
1   542
1   543	0349  C3				     ret
1   544	034A					     endp
1   545
1   546				     ;------------------------------------------------
1   547				     ;	     TRANSLATE STR TO NUMBER
1   548				     ;------------------------------------------------
1   549				     ; ENTRY:	     BX	= STR ADDR
1   550				     ; EXIT:	     AX	= NUM
1   551				     ; EXPECTS:	     CX	= STR LEN
1   552				     ; DESTROYS:     AX
1   553				     ;------------------------------------------------
1   554
1   555	034A			     Atoi		     proc
1   556
1   557	034A  33 C0						     xor ax, ax		     ; AX = 0
1   558
1   559	034C  52						     push dx		     ; push (1)
1   560	034D  56						     push si		     ; push (2)
1   561
1   562	034E  33 D2						     xor dx, dx		     ; i = 0
1   563
1   564	0350  8B F3						     __Next:		     mov si, bx		     ; SI = BX +    +
    565				     STR_LEN - i
1   566	0352  03 F1										     add si, cx
1   567	0354  2B F2										     sub si, dx
1   568	0356  83 EE 01										     sub si, 1
1   569
1   570	0359  51										     push cx		     ; push +
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 11
main.asm



    571				     (3)
1   572
1   573	035A  50										     push ax		     ; push +
    574				     (4)
1   575	035B  33 C0										     xor  ax, ax     ; AX = 0
1   576	035D  8A 04										     mov  al, [si]   ; AX = [SI] -  +
    577				     '0'
1   578	035F  2C 30										     sub  al, 48d
1   579
1   580	0361  52										     push dx		     ; push +
    581				     (5)
1   582	0362  8B CA										     mov  cx, dx	     ; AX = +
    583				     AX	* 10^DX
1   584	0364  BE 000A										     mov  si, 10d
1   585	0367  E3 08										     jcxz __NoMul
1   586
1   587	0369  F7 E6										     __Mul:		     mul si
1   588
1   589	036B  49														    +
    590				     dec cx
1   591	036C  83 F9 00														    +
    592				     cmp cx, 0
1   593	036F  75 F8														    +
    594				     jne __Mul
1   595
1   596	0371											     __NoMul:
1   597	0371  5A										     pop  dx		     ; pop  +
    598				     (5)
1   599	0372  8B C8										     mov  cx, ax
1   600
1   601	0374  58										     pop ax		     ; pop  +
    602				     (4)
1   603	0375  03 C1										     add ax, cx
1   604	0377  59										     pop cx		     ; pop  +
    605				     (3)
1   606
1   607	0378  42										     inc dx		     ; i++
1   608
1   609	0379  3B D1										     cmp dx, cx		     ; if( i+
    610				     ==	CX )
1   611	037B  75 D3										     jne __Next
1   612
1   613	037D  5E						     pop si		     ; pop  (2)
1   614	037E  5A						     pop dx		     ; pop  (1)
1   615
1   616	037F  C3						     ret
1   617	0380							     endp
1   618
1   619				     ;------------------------------------------------
    620				     include	     NUM_CNVR.ASM    ; Print AX	in BIN/DEC/HEX
1   621
1   622				     ;------------------------------------------------
1   623				     ;	     PRINT AX IN BIN
1   624				     ;------------------------------------------------
1   625				     ; ENTRY:	     AX	= NUM
1   626				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   627				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 12
main.asm



1   628				     ; EXIT:	     NONE
1   629				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   630				     ; DESTROYS:     DX	DI
1   631				     ;------------------------------------------------
1   632
1   633	      =0010		     bin_len = 16d						     ; len of bin str
1   634
1   635	0380			     PrintBin		     proc
1   636	0380  50						     push ax				     ; push (1)
1   637
1   638	0381  E8 FDC7						     call GetVideoPos		     ; AX = Video position from	(X; +
    639				     Y)
1   640	0384  BF 0020						     mov di, bin_len * 2d    ; i = bin_len * 2 + AX
1   641	0387  03 F8						     add di, ax
1   642	0389  FD						     std
1   643
1   644	038A  58						     pop  ax				     ; pop  (1)
1   645
1   646	038B  33 D2						     xor dx, dx				     ; i = 0
1   647
1   648	038D  50						     push ax				     ; push (2)
1   649
1   650	038E  D1 E8						     __Next:		     shr ax, 1				    +
    651				     ; AX /= 2
1   652
1   653	0390  50										     push ax			    +
    654				     ; push (3)
1   655
1   656	0391  72 05										     jc	__One
1   657
1   658	0393  B0 30										     __Zero:		     mov al,+
    659				     '0'		     ; '0'
1   660	0395  EB 03 90														    +
    661				     jmp __End
1   662
1   663	0398  B0 31										     __One:		     mov al,+
    664				     '1'		     ; '1'
1   665
1   666	039A  B4 70						     __End:		     mov ah, 70h			    +
    667				     ; black on	white
1   668
1   669	039C  83 EF 02										     sub di, 2			    +
    670				     ; print( ax ) // with 1 sym left( 2 bytes )
1   671	039F  AB										     stosw
1   672	03A0  83 C7 02										     add di, 2
1   673
1   674	03A3  58										     pop ax			    +
    675				     ; pop (3)
1   676
1   677	03A4  42										     inc dx
1   678
1   679	03A5  83 FA 10										     cmp dx, bin_len		    +
    680				     ; if( dx == bin_len )
1   681	03A8  75 E4										     jne __Next
1   682
1   683	03AA  58						     pop ax				     ; pop  (2)
1   684
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 13
main.asm



1   685	03AB  C3						     ret
1   686	03AC							     endp
1   687
1   688				     ;------------------------------------------------
1   689				     ;	     PRINT AX IN HEX
1   690				     ;------------------------------------------------
1   691				     ; ENTRY:	     AX	= NUM
1   692				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   693				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   694				     ; EXIT:	     NONE
1   695				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   696				     ; DESTROYS:     CX	DX DI
1   697				     ;------------------------------------------------
1   698
1   699	      =0010		     hex_len = 16d						     ; len of hex str
1   700
1   701	03AC			     PrintHex		     proc
1   702
1   703	03AC  50						     push ax				     ; push (1)
1   704
1   705	03AD  E8 FD9B						     call GetVideoPos		     ; AX = Video position from	(X; +
    706				     Y)
1   707	03B0  BF 0020						     mov di, hex_len * 2d    ; i = hex_len * 2 + AX
1   708	03B3  03 F8						     add di, ax
1   709	03B5  FD						     std
1   710
1   711	03B6  58						     pop  ax				     ; pop  (1)
1   712
1   713	03B7  33 D2						     xor dx, dx				     ; i = 0
1   714
1   715	03B9  50						     push ax				     ; push (2)
1   716
1   717	03BA  B9 0000						     __Next:		     mov cx, 0			     ;	    +
    718				     shifts counter
1   719
1   720	03BD  52										     push dx			    +
    721				     ; push (4)
1   722	03BE  BA 0000										     mov  dx, 0			    +
    723				     ; DX = 0
1   724
1   725	03C1  D1 E8										     __Shift:		     shr ax,+
    726				     1		     ; AX /= 2
1   727
1   728	03C3  73 09														    +
    729				     jnc __End
1   730
1   731	03C5  50														    +
    732				     __One:		     push ax		     ; push (3)
1   733	03C6  B8 0001														    +
    734				     mov  ax, 1		     ; AX = 0001b
1   735	03C9  D3 E0														    +
    736				     shl  ax, cl	     ; DX += 2^CX
1   737	03CB  03 D0														    +
    738				     add  dx, ax
1   739	03CD  58														    +
    740				     pop      ax		     ; pop  (3)
1   741
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 14
main.asm



1   742	03CE  41										     __End:		     inc cx +
    743				     ; shifts counter ++
1   744	03CF  83 F9 04														    +
    745				     cmp cx, 4d		     ; if( numShifts ==	4 )
1   746	03D2  75 ED														    +
    747				     jne __Shift
1   748
1   749	03D4  8B C8										     mov cx, ax			    +
    750				     ; CX = AX
1   751
1   752	03D6  83 FA 0A										     cmp dx, 10d		    +
    753				     ; if( DX >= 10 )
1   754	03D9  7D 08										     jge __Sym
1   755
1   756	03DB  83 C2 30										     __Digit:		     add dx,+
    757				     48d	     ; print( DX + '0' )
1   758	03DE  8A C2														    +
    759				     mov al, dl
1   760	03E0  EB 09 90														    +
    761				     jmp __Print
1   762
1   763	03E3  83 EA 0A										     __Sym:		     sub dx,+
    764				     10		     ; print( DX - 10 +	'A' )
1   765	03E6  83 C2 41														    +
    766				     add dx, 65d
1   767	03E9  8A C2														    +
    768				     mov al, dl
1   769
1   770	03EB  5A						     __Print:		     pop dx			     ; pop  +
    771				     (4)
1   772
1   773	03EC  B4 70										     mov ah, 70h		    +
    774				     ; black on	white
1   775
1   776	03EE  83 EF 02										     sub di, 2			    +
    777				     ; print( ax ) // with 1 sym left( 2 bytes )
1   778	03F1  AB										     stosw
1   779	03F2  83 C7 02										     add di, 2
1   780
1   781	03F5  8B C1										     mov ax, cx			    +
    782				     ; AX = CX
1   783
1   784	03F7  42										     inc dx			    +
    785				     ; i++
1   786
1   787	03F8  83 FA 10										     cmp dx, hex_len	     ; if(  +
    788				     dx	== hex_len )
1   789	03FB  75 BD										     jne __Next
1   790
1   791	03FD  58						     pop ax				     ; pop  (2)
1   792
1   793	03FE  C3						     ret
1   794	03FF							     endp
1   795
1   796				     ;------------------------------------------------
1   797				     ;	     PRINT AX IN DEC
1   798				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 15
main.asm



1   799				     ; ENTRY:	     AX	= NUM
1   800				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   801				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   802				     ; EXIT:	     NONE
1   803				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   804				     ; DESTROYS:     DI
1   805				     ;------------------------------------------------
1   806
1   807	      =0005		     dec_len = 5d
1   808
1   809	03FF			     PrintDec		     proc
1   810
1   811	03FF  50						     push ax				     ; push (1)
1   812
1   813	0400  E8 FD48						     call GetVideoPos		     ; AX = Video position from	(X; +
    814				     Y)
1   815	0403  BF 000A						     mov di, dec_len * 2d    ; i = dec_len * 2 + AX
1   816	0406  03 F8						     add di, ax
1   817	0408  FD						     std
1   818
1   819	0409  58						     pop  ax				     ; pop  (1)
1   820
1   821	040A  51						     push cx				     ; push (2)
1   822	040B  52						     push dx				     ; push (3)
1   823
1   824	040C  33 D2						     xor dx, dx				     ; i = 0
1   825
1   826	040E  50						     push ax				     ; push (4)
1   827
1   828	040F  B9 000A						     mov cx, 10d			     ; CX = 10
1   829
1   830	0412  52						     __Next:		     push dx			     ; push +
    831				     (5)
1   832
1   833	0413  33 D2										     xor dx, dx			    +
    834				     ; DX = 0
1   835
1   836	0415  F7 F1										     div  cx			    +
    837				     ; AX /= 10
1   838
1   839	0417  50										     push ax			    +
    840				     ; push (6)
1   841
1   842	0418  80 C2 30										     add  dl, 48d	     ; print+
    843				     ( DL + '0'	)
1   844	041B  8A C2										     mov  al, dl
1   845
1   846	041D  B4 70										     mov  ah, 70h	     ; black+
    847				     on	white
1   848
1   849	041F  83 EF 02										     sub di, 2			    +
    850				     ; print( ax ) // with 1 sym left( 2 bytes )
1   851	0422  AB										     stosw
1   852	0423  83 C7 02										     add di, 2
1   853
1   854	0426  58										     pop ax			    +
    855				     ; pop  (6)
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 16
main.asm



1   856	0427  5A										     pop dx			    +
    857				     ; pop  (5)
1   858
1   859	0428  42										     inc dx
1   860
1   861	0429  83 FA 05										     cmp dx, dec_len	     ; if(  +
    862				     DX	== dec_len )
1   863	042C  75 E4										     jne __Next
1   864
1   865	042E  58						     pop ax				     ; pop  (4)
1   866
1   867	042F  5A						     pop dx				     ; pop  (3)
1   868	0430  59						     pop cx				     ; pop  (2)
1   869
1   870	0431  C3						     ret
1   871	0432							     endp
1   872
1   873				     ;------------------------------------------------
1   874				     ;	     PRINT AX IN BIN/HEX/DEC
1   875				     ;------------------------------------------------
1   876				     ; ENTRY:	     AX	= NUM
1   877				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   878				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   879				     ; EXIT:	     NONE
1   880				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   881				     ; DESTROYS:     CX	DX DI
1   882				     ;------------------------------------------------
1   883
1   884	0432			     PrintNum		     proc
1   885
1   886	0432  53						     push bx				     ; push (1)
1   887
1   888	0433  E8 FF4A						     call PrintBin
1   889
1   890	0436  80 C7 11						     add bh, bin_len + 1d    ; X
1   891	0439  E8 FF70						     call PrintHex
1   892
1   893	043C  80 C7 11						     add bh, hex_len + 1d    ; X
1   894	043F  E8 FFBD						     call PrintDec
1   895
1   896	0442  5B						     pop bx				     ; pop  (1)
1   897
1   898	0443  C3						     ret
1   899	0444							     endp
1   900
1   901				     ;------------------------------------------------
    902
    903				     end		     Start
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 17
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/23/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "21:11:36"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI				  Near	 DGROUP:034A
BIN_LEN				  Number 0010
CLRSCRN				  Near	 DGROUP:013C
CLR_NUM				  Number 0004
CMDDATA				  Byte	 DGROUP:0128
CMDLINEHNDL			  Near	 DGROUP:02E6
DEC_LEN				  Number 0005
GETVIDEOPOS			  Near	 DGROUP:014B
HEX_LEN				  Number 0010
H_NUM				  Number 0003
INPUT				  Near	 DGROUP:02C6
INPUTLEN			  Number 0064
INPUTSTR			  Byte	 DGROUP:0262
PRINTBIN			  Near	 DGROUP:0380
PRINTBOX			  Near	 DGROUP:01F0
PRINTCHAR			  Near	 DGROUP:015D
PRINTDEC			  Near	 DGROUP:03FF
PRINTHEX			  Near	 DGROUP:03AC
PRINTHRZLINE			  Near	 DGROUP:0166
PRINTNUM			  Near	 DGROUP:0432
PRINTVRTLINE			  Near	 DGROUP:01A3
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:0330
TYPESIZE			  Number 0009
TYPE_1				  Byte	 DGROUP:01E0
TYPE_2				  Byte	 DGROUP:01E8
W_NUM				  Number 0002
X_NUM				  Number 0000
Y_NUM				  Number 0001
__DIGIT				  Near	 DGROUP:03DB
__END				  Near	 DGROUP:01A2
__END				  Near	 DGROUP:01DF
__END				  Near	 DGROUP:02E2
__END				  Near	 DGROUP:0307
__END				  Near	 DGROUP:0347
__END				  Near	 DGROUP:039A
__END				  Near	 DGROUP:03CE
__ENDARGSCHECK			  Near	 DGROUP:0320
Turbo Assembler	 Version 4.1	    02/23/23 21:11:36	    Page 18
Symbol Table



__ENDNUM			  Near	 DGROUP:032D
__ENDPRINTING			  Near	 DGROUP:019E
__ENDPRINTING			  Near	 DGROUP:01DB
__MUL				  Near	 DGROUP:0369
__NEXT				  Near	 DGROUP:0142
__NEXT				  Near	 DGROUP:0191
__NEXT				  Near	 DGROUP:01CE
__NEXT				  Near	 DGROUP:02C9
__NEXT				  Near	 DGROUP:02EF
__NEXT				  Near	 DGROUP:0334
__NEXT				  Near	 DGROUP:0350
__NEXT				  Near	 DGROUP:038E
__NEXT				  Near	 DGROUP:03BA
__NEXT				  Near	 DGROUP:0412
__NEXTNUM			  Near	 DGROUP:02ED
__NOMUL				  Near	 DGROUP:0371
__ONE				  Near	 DGROUP:0398
__ONE				  Near	 DGROUP:03C5
__PRINT				  Near	 DGROUP:03EB
__SHIFT				  Near	 DGROUP:03C1
__SYM				  Near	 DGROUP:03E3
__ZERO				  Near	 DGROUP:0393

Macro Name

EXIT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0444 Word	  Public  CODE
