Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 1
main.asm



      1
      2				     .186
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals __
      8
      9				     include	     TOOLS.ASM			     ; Exit
1    10
1    11				     ;------------------------------------------------
1    12				     ;	     EXIT PROGRAM
1    13				     ;------------------------------------------------
1    14				     ; Entry:	     NONE
1    15				     ; EXIT:	     NONE
1    16				     ; DESTROYS: AX
1    17				     ;------------------------------------------------
1    18
1    19				     EXIT	     macro
1    20							     nop
1    21							     mov ax, 4c00h
1    22							     int 21h
1    23							     nop
1    24							     endm
1    25
1    26				     ;------------------------------------------------
     27
     28				     ;------------------------------------------------
     29
     30	0100  BB B800		     Start:	     mov bx, 0b800h	     ; ES = VideoSeg
     31	0103  8E C3					     mov es, bx
     32
     33	0105  E8 01FF					     call Input
     34	0108  8B CA					     mov cx, dx
     35	010A  BB 02A3r					     mov bx, offset InputStr
     36	010D  E8 022F					     call Atoi
     37
     38							     ; mov bx, offset NameStr
     39							     ; scall StrLen
     40
     41	0110  B7 01					     mov bh, 1d		     ; X
     42	0112  B3 05					     mov bl, 5d		     ; Y
     43	0114  E8 0308					     call PrintNum
     44
     45	0117  E8 01ED					     call Input
     46
     47	011A  B8 0020					     mov byte ptr ax, '	'
     48	011D  E8 0085					     call ClrScrn
     49
     50	0120  B7 00					     mov bh, 0d		     ; X
     51	0122  B3 04					     mov bl, 4d		     ; Y
     52	0124  B5 32					     mov ch, 50d	     ; WIDTH
     53	0126  B1 0A					     mov cl, 10d	     ; HEIGHT
     54	0128  E8 00D5					     call PrintBox
     55
     56	012B  B7 01					     mov bh, 1d		     ; X
     57	012D  B3 05					     mov bl, 5d		     ; Y
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 2
main.asm



     58	012F  B8 05B0					     mov ax, 1456d   ; NUM
     59	0132  E8 02EA					     call PrintNum
     60
     61							     EXIT
1    62	0135  90					     nop
1    63	0136  B8 4C00					     mov ax, 4c00h
1    64	0139  CD 21					     int 21h
1    65	013B  90					     nop
     66
     67				     ;------------------------------------------------
     68
     69	013C  56 6C 61 64 00	     NameStr db	     "Vlad", 0
     70	0141  64*(00)		     Msg     db	     100 dup (0)
     71
     72				     include	     SCR_HNDL.ASM    ; Clear screen function
1    73
1    74				     ; SCREEN HANDLER
1    75
1    76				     ;------------------------------------------------
1    77				     ;	     CLEAR SCREEN BY SYM
1    78				     ;------------------------------------------------
1    79				     ; ENTRY:	     AH	= COLOR	ATTR
1    80				     ;			     Al	= SYM
1    81				     ; EXIT:	     NONE
1    82				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1    83				     ; DESTROYS:     BX	CX
1    84				     ;------------------------------------------------
1    85
1    86	01A5			     ClrScrn		     proc
1    87
1    88	01A5  BB 0000						     mov bx, 0			     ; bx = 0
1    89	01A8  B9 07D0						     mov cx, 80d * 25d
1    90
1    91	01AB  26: 89 07						     __Next:		     mov es:[bx], ax
1    92	01AE  83 C3 02										     add bx, 2
1    93
1    94	01B1  E2 F8										     loop __Next
1    95
1    96	01B3  C3						     ret
1    97	01B4							     endp
1    98
1    99				     ;------------------------------------------------
1   100				     ;	     GET VIDEO POS FROM	(X; Y)
1   101				     ;------------------------------------------------
1   102				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1   103				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   104				     ; EXIT:	     AX	= POS
1   105				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   106				     ; DESTROYS:     AX
1   107				     ;------------------------------------------------
1   108
1   109	01B4			     GetVideoPos	     proc
1   110
1   111	01B4  D0 E7						     shl bh, 1		     ; bh /= 2
1   112
1   113	01B6  52						     push dx		     ; push (1)
1   114
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 3
main.asm



1   115	01B7  B0 A0						     mov al, 160d    ; ax = 160	* Y + 2	* X
1   116	01B9  F6 E3						     mul bl
1   117	01BB  BA 0000						     mov dx, 0
1   118	01BE  02 D7						     add dl, bh
1   119	01C0  03 C2						     add ax, dx
1   120
1   121	01C2  5A						     pop dx		     ; pop  (1)
1   122
1   123	01C3  D0 EF						     shr bh, 1		     ; bh *= 2
1   124
1   125	01C5  C3						     ret
1   126	01C6							     endp
1   127
1   128				     ;------------------------------------------------
1   129				     ;	     PRINT SYM IN (X; Y)
1   130				     ;------------------------------------------------
1   131				     ; ENTRY:	     AH	= SYM COLOR
1   132				     ;			     AL	= SYM CHAR
1   133				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   134				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   135				     ; EXIT:	     NONE
1   136				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   137				     ; DESTROYS:     DI
1   138				     ;------------------------------------------------
1   139
1   140	01C6			     PrintChar		     proc
1   141
1   142	01C6  50						     push ax		     ; push (1)
1   143
1   144	01C7  E8 FFEA						     call GetVideoPos
1   145
1   146	01CA  8B F8						     mov di, ax		     ; print( ax )
1   147	01CC  58						     pop ax		     ; pop  (1)
1   148	01CD  AB						     stosw
1   149
1   150	01CE  C3						     ret
1   151	01CF							     endp
1   152
1   153				     ;------------------------------------------------
1   154				     ;	     PRINT HORIZONTAL LINE IN (X; Y)
1   155				     ;------------------------------------------------
1   156				     ; ENTRY:	     AH	= SYM COLOR
1   157				     ;			     AL	= SYM CHAR
1   158				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   159				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   160				     ;			     CH	= WIDTH
1   161				     ; EXIT:	     NONE
1   162				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   163				     ; DESTROYS:     DX	DI
1   164				     ;------------------------------------------------
1   165
1   166	01CF			     PrintHrzLine    proc
1   167
1   168	01CF  80 FD 00						     cmp ch, 0		     ; if( ch <= 0 ) ret
1   169	01D2  76 0F						     jbe __End
1   170
1   171	01D4  53						     push bx
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 4
main.asm



1   172
1   173	01D5  33 D2						     xor dx, dx		     ; i = 0
1   174
1   175	01D7  E8 FFEC						     __Next:		     call PrintChar
1   176
1   177	01DA  FE C7										     inc bh
1   178	01DC  FE C6										     inc dh
1   179
1   180	01DE  3A F5										     cmp dh, ch
1   181	01E0  75 F5										     jne __Next
1   182	01E2  5B						     pop bx
1   183
1   184	01E3							     __End:
1   185	01E3  C3						     ret
1   186	01E4							     endp
1   187
1   188				     ;------------------------------------------------
1   189				     ;	     PRINT VERTICAL LINE IN (X;	Y)
1   190				     ;------------------------------------------------
1   191				     ; ENTRY:	     AH	= SYM COLOR
1   192				     ;			     AL	= SYM CHAR
1   193				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   194				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   195				     ;			     CL	= HEIGHT
1   196				     ; EXIT:	     NONE
1   197				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   198				     ; DESTROYS:     DX	DI
1   199				     ;------------------------------------------------
1   200
1   201	01E4			     PrintVrtLine    proc
1   202
1   203	01E4  80 F9 00						     cmp cl, 0		     ; if( cl <= 0 ) ret
1   204	01E7  76 0F						     jbe __End
1   205
1   206	01E9  53						     push bx
1   207
1   208	01EA  33 D2						     xor dx, dx		     ; i = 0
1   209
1   210	01EC  E8 FFD7						     __Next:		     call PrintChar
1   211
1   212	01EF  FE C3										     inc bl
1   213	01F1  FE C2										     inc dl
1   214
1   215	01F3  3A D1										     cmp dl, cl
1   216	01F5  75 F5										     jne __Next
1   217	01F7  5B						     pop bx
1   218
1   219	01F8							     __End:
1   220	01F8  C3						     ret
1   221	01F9							     endp
1   222
1   223				     ;------------------------------------------------
1   224				     ;	     PRINT BOX
1   225				     ;------------------------------------------------
1   226				     ; ENTRY:	     BH	= X LEFT CORNER	COORDS [0; 79]
1   227				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   228				     ;			     CH	= WIDTH
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 5
main.asm



1   229				     ;			     CL	= HEIGHT
1   230				     ; EXIT:	     NONE
1   231				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   232				     ; DESTROYS:     AX	DX DI
1   233				     ;------------------------------------------------
1   234
1   235	01F9  1F		     box_clr db		     01fh    ; yellow on red
1   236
1   237	01FA  C9		     lt_ch   db		     0c9h    ; left  top  char
1   238	01FB  C8		     ld_ch   db		     0c8h    ; left  down char
1   239	01FC  BB		     rt_ch   db		     0bbh    ; right top  char
1   240	01FD  BC		     rd_ch   db		     0bch    ; rigth down char
1   241
1   242	01FE  BA		     v_ch    db		     0bah    ; vertical	      char
1   243	01FF  CD		     h_ch    db		     0cdh    ; horizontal char
1   244
1   245	0200			     PrintBox		     proc
1   246
1   247	0200  53						     push bx			     ; print left top char
1   248	0201  A0 01FAr						     mov al, lt_ch
1   249	0204  8A 26 01F9r					     mov ah, box_clr
1   250	0208  E8 FFBB						     call PrintChar
1   251	020B  5B						     pop bx
1   252
1   253	020C  53						     push bx			     ; print left down char
1   254	020D  02 D9						     add bl, cl
1   255	020F  80 EB 01						     sub bl, 1
1   256	0212  A0 01FBr						     mov al, ld_ch
1   257	0215  8A 26 01F9r					     mov ah, box_clr
1   258	0219  E8 FFAA						     call PrintChar
1   259	021C  5B						     pop bx
1   260
1   261	021D  53						     push bx			     ; print right top char
1   262	021E  02 FD						     add bh, ch
1   263	0220  80 EF 01						     sub bh, 1
1   264	0223  A0 01FCr						     mov al, rt_ch
1   265	0226  8A 26 01F9r					     mov ah, box_clr
1   266	022A  E8 FF99						     call PrintChar
1   267	022D  5B						     pop bx
1   268
1   269	022E  53						     push bx			     ; print right down	char
1   270	022F  02 FD						     add bh, ch
1   271	0231  80 EF 01						     sub bh, 1
1   272	0234  02 D9						     add bl, cl
1   273	0236  80 EB 01						     sub bl, 1
1   274	0239  A0 01FDr						     mov al, rd_ch
1   275	023C  8A 26 01F9r					     mov ah, box_clr
1   276	0240  E8 FF83						     call PrintChar
1   277	0243  5B						     pop bx
1   278
1   279	0244  53						     push bx			     ; print top horizontal line
1   280	0245  80 C7 01						     add bh, 1
1   281	0248  A0 01FFr						     mov al, h_ch
1   282	024B  8A 26 01F9r					     mov ah, box_clr
1   283	024F  80 ED 02						     sub ch, 2
1   284	0252  E8 FF7A						     call PrintHrzLine
1   285	0255  80 C5 02						     add ch, 2
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 6
main.asm



1   286	0258  5B						     pop bx
1   287
1   288	0259  53						     push bx			     ; print down horizontal line
1   289	025A  80 C7 01						     add bh, 1
1   290	025D  02 D9						     add bl, cl
1   291	025F  80 EB 01						     sub bl, 1
1   292	0262  A0 01FFr						     mov al, h_ch
1   293	0265  8A 26 01F9r					     mov ah, box_clr
1   294	0269  80 ED 02						     sub ch, 2
1   295	026C  E8 FF60						     call PrintHrzLine
1   296	026F  80 C5 02						     add ch, 2
1   297	0272  5B						     pop bx
1   298
1   299	0273  53						     push bx			     ; print left vertical line
1   300	0274  80 C3 01						     add bl, 1
1   301	0277  A0 01FEr						     mov al, v_ch
1   302	027A  8A 26 01F9r					     mov ah, box_clr
1   303	027E  80 E9 02						     sub cl, 2
1   304	0281  E8 FF60						     call PrintVrtLine
1   305	0284  80 C1 02						     add cl, 2
1   306	0287  5B						     pop bx
1   307
1   308	0288  53						     push bx			     ; print right vertical line
1   309	0289  80 C3 01						     add bl, 1
1   310	028C  02 FD						     add bh, ch
1   311	028E  80 EF 01						     sub bh, 1
1   312	0291  A0 01FEr						     mov al, v_ch
1   313	0294  8A 26 01F9r					     mov ah, box_clr
1   314	0298  80 E9 02						     sub cl, 2
1   315	029B  E8 FF46						     call PrintVrtLine
1   316	029E  80 C1 02						     add cl, 2
1   317	02A1  5B						     pop bx
1   318
1   319	02A2  C3						     ret
1   320	02A3							     endp
1   321
1   322				     ;------------------------------------------------
1   323				     ;	     INPUT STR
1   324				     ;------------------------------------------------
1   325				     ; ENTRY:	     NONE
1   326				     ; EXIT:	     DX	= STR LEN
1   327				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   328				     ; DESTROYS:     DX
1   329				     ;------------------------------------------------
1   330
1   331	      =0064		     InputLen =	100
1   332	02A3  64*(00)		     InputStr db     InputLen dup (0)
1   333
1   334	0307			     Input		     proc
1   335
1   336	0307  50						     push ax		     ; push (1)
1   337
1   338	0308  33 D2						     xor dx, dx		     ; i++
1   339
1   340	030A  B4 01						     __Next:		     mov ah, 01h
1   341	030C  CD 21										     int 21h
1   342
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 7
main.asm



1   343	030E  56										     push si			    +
    344				     ; push (2)
1   345
1   346	030F  33 F6										     xor si, si			    +
    347				     ; SI = 0
1   348
1   349	0311  BE 02A3r										     mov si, offset InputStr	    +
    350				     ; SI = InputStr + DX
1   351	0314  03 F2										     add si, dx
1   352
1   353	0316  88 04										     mov [si], al
1   354
1   355	0318  5E										     pop si			    +
    356				     ; pop  (2)
1   357
1   358	0319  3C 0D										     cmp al, 13d		    +
    359				     ; if( al == '\r' )
1   360	031B  74 06										     je	__End
1   361
1   362	031D  42										     inc dx			    +
    363				     ; i++
1   364	031E  83 FA 64										     cmp dx, InputLen		    +
    365				     ; if( i ==	InputLen )
1   366	0321  75 E7										     jne __Next
1   367
1   368	0323							     __End:
1   369	0323  58						     pop ax		     ; pop  (1)
1   370	0324  C3						     ret
1   371	0325							     endp
1   372
1   373				     ;------------------------------------------------
1   374
    375				     include	     STR_HNDL.ASM    ; Str handler
1   376
1   377				     ;------------------------------------------------
1   378				     ;	     GET STR LEN
1   379				     ;------------------------------------------------
1   380				     ; ENTRY:	     BX	= STR ADDR
1   381				     ; EXIT:	     AX	= LEN
1   382				     ; EXPECTS:	 END SYM = '$' or '\0'
1   383				     ; DESTROYS: NONE
1   384				     ;------------------------------------------------
1   385
1   386	0325			     StrLen	     proc
1   387
1   388	0325  33 C0				     xor ax, ax	     ; i = 0
1   389
1   390	0327  51						     push cx		     ; push (1)
1   391	0328  56						     push si		     ; push (2)
1   392
1   393	0329  8B F3				     __Next:		     mov  si, bx     ; SI = BX + i
1   394	032B  03 F0										 add  si, ax
1   395
1   396	032D  40										     inc  ax		     ; i++
1   397	032E  8B 0C										     mov  cx, [si]   ; CX = current +
    398				     symbol
1   399
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 8
main.asm



1   400	0330  80 FD 24										     cmp  ch, '$'    ; if( ch == '$'+
    401				     )
1   402	0333  74 07										     je	__End
1   403	0335  80 FD 00										     cmp  ch, 0d     ; if( ch ==    +
    404				     '\0' )
1   405	0338  74 02										     je	__End
1   406
1   407	033A  EB ED										     jmp __Next
1   408
1   409	033C							     __End:
1   410	033C  5E						     pop si		     ; pop  (2)
1   411	033D  59						     pop cx		     ; pop  (1)
1   412
1   413	033E  C3				     ret
1   414	033F					     endp
1   415
1   416				     ;------------------------------------------------
1   417				     ;	     TRANSLATE STR TO NUMBER
1   418				     ;------------------------------------------------
1   419				     ; ENTRY:	     BX	= STR ADDR
1   420				     ; EXIT:	     AX	= NUM
1   421				     ; EXPECTS:	     CX	= STR LEN
1   422				     ; DESTROYS:     AX
1   423				     ;------------------------------------------------
1   424
1   425	033F			     Atoi		     proc
1   426
1   427	033F  52						     push dx		     ; push (1)
1   428
1   429	0340  33 D2						     xor dx, dx		     ; i = 0
1   430
1   431	0342  8B F3						     __Next:		     mov si, bx		     ; SI = BX + CX +
    432				     - i
1   433	0344  03 F1										     add si, cx
1   434	0346  2B F2										     sub si, dx
1   435	0348  83 EE 01										     sub si, 1
1   436
1   437	034B  51										     push cx		     ; push +
    438				     (2)
1   439
1   440	034C  50										     push ax		     ; push +
    441				     (3)
1   442	034D  33 C0										     xor  ax, ax     ; AX = 0
1   443	034F  8A 04										     mov  al, [si]   ; AX = [SI] -  +
    444				     '0'
1   445	0351  2C 30										     sub  al, 48d
1   446
1   447	0353  52										     push dx		     ; push +
    448				     (4)
1   449	0354  8B CA										     mov  cx, dx	     ; AX = +
    450				     AX	* 10^DX
1   451	0356  BE 000A										     mov  si, 10d
1   452	0359  E3 08										     jcxz __NoMul
1   453
1   454	035B  F7 E6										     __Mul:		     mul si
1   455
1   456	035D  49														    +
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 9
main.asm



    457				     dec cx
1   458	035E  83 F9 00														    +
    459				     cmp cx, 0
1   460	0361  75 F8														    +
    461				     jne __Mul
1   462
1   463	0363											     __NoMul:
1   464	0363  5A										     pop  dx		     ; pop  +
    465				     (4)
1   466	0364  8B C8										     mov  cx, ax
1   467
1   468	0366  58										     pop ax		     ; pop  +
    469				     (3)
1   470	0367  03 C1										     add ax, cx
1   471	0369  59										     pop cx		     ; pop  +
    472				     (2)
1   473
1   474	036A  42										     inc dx		     ; i++
1   475
1   476	036B  3B D1										     cmp dx, cx		     ; if( i+
    477				     ==	CX )
1   478	036D  75 D3										     jne __Next
1   479
1   480	036F  5A						     pop dx		     ; pop  (1)
1   481
1   482	0370  C3						     ret
1   483	0371							     endp
1   484
1   485				     ;------------------------------------------------
    486				     include	     NUM_CNVR.ASM    ; Print AX	in BIN/DEC/HEX
1   487
1   488				     ;------------------------------------------------
1   489				     ;	     PRINT AX IN BIN
1   490				     ;------------------------------------------------
1   491				     ; ENTRY:	     AX	= NUM
1   492				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   493				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   494				     ; EXIT:	     NONE
1   495				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   496				     ; DESTROYS:     DX	DI
1   497				     ;------------------------------------------------
1   498
1   499	      =0010		     bin_len = 16d						     ; len of bin str
1   500
1   501	0371			     PrintBin		     proc
1   502	0371  50						     push ax				     ; push (1)
1   503
1   504	0372  E8 FE3F						     call GetVideoPos		     ; AX = Video position from	(X; +
    505				     Y)
1   506	0375  BF 0020						     mov di, bin_len * 2d    ; i = bin_len * 2 + AX
1   507	0378  03 F8						     add di, ax
1   508	037A  FD						     std
1   509
1   510	037B  58						     pop  ax				     ; pop  (1)
1   511
1   512	037C  33 D2						     xor dx, dx				     ; i = 0
1   513
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 10
main.asm



1   514	037E  50						     push ax				     ; push (2)
1   515
1   516	037F  D1 E8						     __Next:		     shr ax, 1				    +
    517				     ; AX /= 2
1   518
1   519	0381  50										     push ax			    +
    520				     ; push (3)
1   521
1   522	0382  72 05										     jc	__One
1   523
1   524	0384  B0 30										     __Zero:		     mov al,+
    525				     '0'		     ; '0'
1   526	0386  EB 03 90														    +
    527				     jmp __End
1   528
1   529	0389  B0 31										     __One:		     mov al,+
    530				     '1'		     ; '1'
1   531
1   532	038B  B4 70						     __End:		     mov ah, 70h			    +
    533				     ; black on	white
1   534
1   535	038D  83 EF 02										     sub di, 2			    +
    536				     ; print( ax ) // with 1 sym left( 2 bytes )
1   537	0390  AB										     stosw
1   538	0391  83 C7 02										     add di, 2
1   539
1   540	0394  58										     pop ax			    +
    541				     ; pop (3)
1   542
1   543	0395  42										     inc dx
1   544
1   545	0396  83 FA 10										     cmp dx, bin_len		    +
    546				     ; if( dx == bin_len )
1   547	0399  75 E4										     jne __Next
1   548
1   549	039B  58						     pop ax				     ; pop  (2)
1   550
1   551	039C  C3						     ret
1   552	039D							     endp
1   553
1   554				     ;------------------------------------------------
1   555				     ;	     PRINT AX IN HEX
1   556				     ;------------------------------------------------
1   557				     ; ENTRY:	     AX	= NUM
1   558				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   559				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   560				     ; EXIT:	     NONE
1   561				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   562				     ; DESTROYS:     CX	DX DI
1   563				     ;------------------------------------------------
1   564
1   565	      =0010		     hex_len = 16d						     ; len of hex str
1   566
1   567	039D			     PrintHex		     proc
1   568
1   569	039D  50						     push ax				     ; push (1)
1   570
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 11
main.asm



1   571	039E  E8 FE13						     call GetVideoPos		     ; AX = Video position from	(X; +
    572				     Y)
1   573	03A1  BF 0020						     mov di, hex_len * 2d    ; i = hex_len * 2 + AX
1   574	03A4  03 F8						     add di, ax
1   575	03A6  FD						     std
1   576
1   577	03A7  58						     pop  ax				     ; pop  (1)
1   578
1   579	03A8  33 D2						     xor dx, dx				     ; i = 0
1   580
1   581	03AA  50						     push ax				     ; push (2)
1   582
1   583	03AB  B9 0000						     __Next:		     mov cx, 0			     ;	    +
    584				     shifts counter
1   585
1   586	03AE  52										     push dx			    +
    587				     ; push (4)
1   588	03AF  BA 0000										     mov  dx, 0			    +
    589				     ; DX = 0
1   590
1   591	03B2  D1 E8										     __Shift:		     shr ax,+
    592				     1		     ; AX /= 2
1   593
1   594	03B4  73 09														    +
    595				     jnc __End
1   596
1   597	03B6  50														    +
    598				     __One:		     push ax		     ; push (3)
1   599	03B7  B8 0001														    +
    600				     mov  ax, 1		     ; AX = 0001b
1   601	03BA  D3 E0														    +
    602				     shl  ax, cl	     ; DX += 2^CX
1   603	03BC  03 D0														    +
    604				     add  dx, ax
1   605	03BE  58														    +
    606				     pop      ax		     ; pop  (3)
1   607
1   608	03BF  41										     __End:		     inc cx +
    609				     ; shifts counter ++
1   610	03C0  83 F9 04														    +
    611				     cmp cx, 4d		     ; if( numShifts ==	4 )
1   612	03C3  75 ED														    +
    613				     jne __Shift
1   614
1   615	03C5  8B C8										     mov cx, ax			    +
    616				     ; CX = AX
1   617
1   618	03C7  83 FA 0A										     cmp dx, 10d		    +
    619				     ; if( DX >= 10 )
1   620	03CA  7D 08										     jge __Sym
1   621
1   622	03CC  83 C2 30										     __Digit:		     add dx,+
    623				     48d	     ; print( DX + '0' )
1   624	03CF  8A C2														    +
    625				     mov al, dl
1   626	03D1  EB 09 90														    +
    627				     jmp __Print
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 12
main.asm



1   628
1   629	03D4  83 EA 0A										     __Sym:		     sub dx,+
    630				     10		     ; print( DX - 10 +	'A' )
1   631	03D7  83 C2 41														    +
    632				     add dx, 65d
1   633	03DA  8A C2														    +
    634				     mov al, dl
1   635
1   636	03DC  5A						     __Print:		     pop dx			     ; pop  +
    637				     (4)
1   638
1   639	03DD  B4 70										     mov ah, 70h		    +
    640				     ; black on	white
1   641
1   642	03DF  83 EF 02										     sub di, 2			    +
    643				     ; print( ax ) // with 1 sym left( 2 bytes )
1   644	03E2  AB										     stosw
1   645	03E3  83 C7 02										     add di, 2
1   646
1   647	03E6  8B C1										     mov ax, cx			    +
    648				     ; AX = CX
1   649
1   650	03E8  42										     inc dx			    +
    651				     ; i++
1   652
1   653	03E9  83 FA 10										     cmp dx, hex_len	     ; if(  +
    654				     dx	== hex_len )
1   655	03EC  75 BD										     jne __Next
1   656
1   657	03EE  58						     pop ax				     ; pop  (2)
1   658
1   659	03EF  C3						     ret
1   660	03F0							     endp
1   661
1   662				     ;------------------------------------------------
1   663				     ;	     PRINT AX IN DEC
1   664				     ;------------------------------------------------
1   665				     ; ENTRY:	     AX	= NUM
1   666				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   667				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   668				     ; EXIT:	     NONE
1   669				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   670				     ; DESTROYS:     CX	DX DI
1   671				     ;------------------------------------------------
1   672
1   673	      =0005		     dec_len = 5d
1   674
1   675	03F0			     PrintDec		     proc
1   676
1   677	03F0  50						     push ax				     ; push (1)
1   678
1   679	03F1  E8 FDC0						     call GetVideoPos		     ; AX = Video position from	(X; +
    680				     Y)
1   681	03F4  BF 000A						     mov di, dec_len * 2d    ; i = dec_len * 2 + AX
1   682	03F7  03 F8						     add di, ax
1   683	03F9  FD						     std
1   684
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 13
main.asm



1   685	03FA  58						     pop  ax				     ; pop  (1)
1   686
1   687	03FB  33 D2						     xor dx, dx				     ; i = 0
1   688
1   689	03FD  50						     push ax				     ; push (2)
1   690
1   691	03FE  B9 000A						     mov cx, 10d			     ; CX = 10
1   692
1   693	0401  52						     __Next:		     push dx			     ; push +
    694				     (3)
1   695
1   696	0402  33 D2										     xor dx, dx			    +
    697				     ; DX = 0
1   698
1   699	0404  F7 F1										     div  cx			    +
    700				     ; AX /= 10
1   701
1   702	0406  50										     push ax			    +
    703				     ; push (4)
1   704
1   705	0407  80 C2 30										     add  dl, 48d	     ; print+
    706				     ( DL + '0'	)
1   707	040A  8A C2										     mov  al, dl
1   708
1   709	040C  B4 70										     mov  ah, 70h	     ; black+
    710				     on	white
1   711
1   712	040E  83 EF 02										     sub di, 2			    +
    713				     ; print( ax ) // with 1 sym left( 2 bytes )
1   714	0411  AB										     stosw
1   715	0412  83 C7 02										     add di, 2
1   716
1   717	0415  58										     pop ax			    +
    718				     ; pop  (4)
1   719	0416  5A										     pop dx			    +
    720				     ; pop  (3)
1   721
1   722	0417  42										     inc dx
1   723
1   724	0418  83 FA 05										     cmp dx, dec_len	     ; if(  +
    725				     DX	== dec_len )
1   726	041B  75 E4										     jne __Next
1   727
1   728	041D  58						     pop ax				     ; pop  (2)
1   729
1   730	041E  C3						     ret
1   731	041F							     endp
1   732
1   733				     ;------------------------------------------------
1   734				     ;	     PRINT AX IN BIN/HEX/DEC
1   735				     ;------------------------------------------------
1   736				     ; ENTRY:	     AX	= NUM
1   737				     ;			     BH	= X LEFT CORNER	COORDS [0; 79]
1   738				     ;			     BL	= Y LEFT CORNER	COORDS [0; 24]
1   739				     ; EXIT:	     NONE
1   740				     ; EXPECTS:	     ES	= 0b800h (VIDEO	SEGMENT)
1   741				     ; DESTROYS:     CX	DX DI
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 14
main.asm



1   742				     ;------------------------------------------------
1   743
1   744	041F			     PrintNum		     proc
1   745
1   746	041F  53						     push bx				     ; push (1)
1   747
1   748	0420  E8 FF4E						     call PrintBin
1   749
1   750	0423  80 C7 11						     add bh, bin_len + 1d    ; X
1   751	0426  E8 FF74						     call PrintHex
1   752
1   753	0429  80 C7 11						     add bh, hex_len + 1d    ; X
1   754	042C  E8 FFC1						     call PrintDec
1   755
1   756	042F  5B						     pop bx				     ; pop  (1)
1   757
1   758	0430  C3						     ret
1   759	0431							     endp
1   760
1   761				     ;------------------------------------------------
    762
    763				     end		     Start
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 15
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "17:28:44"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI				  Near	 DGROUP:033F
BIN_LEN				  Number 0010
BOX_CLR				  Byte	 DGROUP:01F9
CLRSCRN				  Near	 DGROUP:01A5
DEC_LEN				  Number 0005
GETVIDEOPOS			  Near	 DGROUP:01B4
HEX_LEN				  Number 0010
H_CH				  Byte	 DGROUP:01FF
INPUT				  Near	 DGROUP:0307
INPUTLEN			  Number 0064
INPUTSTR			  Byte	 DGROUP:02A3
LD_CH				  Byte	 DGROUP:01FB
LT_CH				  Byte	 DGROUP:01FA
MSG				  Byte	 DGROUP:0141
NAMESTR				  Byte	 DGROUP:013C
PRINTBIN			  Near	 DGROUP:0371
PRINTBOX			  Near	 DGROUP:0200
PRINTCHAR			  Near	 DGROUP:01C6
PRINTDEC			  Near	 DGROUP:03F0
PRINTHEX			  Near	 DGROUP:039D
PRINTHRZLINE			  Near	 DGROUP:01CF
PRINTNUM			  Near	 DGROUP:041F
PRINTVRTLINE			  Near	 DGROUP:01E4
RD_CH				  Byte	 DGROUP:01FD
RT_CH				  Byte	 DGROUP:01FC
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:0325
V_CH				  Byte	 DGROUP:01FE
__DIGIT				  Near	 DGROUP:03CC
__END				  Near	 DGROUP:01E3
__END				  Near	 DGROUP:01F8
__END				  Near	 DGROUP:0323
__END				  Near	 DGROUP:033C
__END				  Near	 DGROUP:038B
__END				  Near	 DGROUP:03BF
__MUL				  Near	 DGROUP:035B
__NEXT				  Near	 DGROUP:01AB
__NEXT				  Near	 DGROUP:01D7
Turbo Assembler	 Version 4.1	    02/20/23 17:28:44	    Page 16
Symbol Table



__NEXT				  Near	 DGROUP:01EC
__NEXT				  Near	 DGROUP:030A
__NEXT				  Near	 DGROUP:0329
__NEXT				  Near	 DGROUP:0342
__NEXT				  Near	 DGROUP:037F
__NEXT				  Near	 DGROUP:03AB
__NEXT				  Near	 DGROUP:0401
__NOMUL				  Near	 DGROUP:0363
__ONE				  Near	 DGROUP:0389
__ONE				  Near	 DGROUP:03B6
__PRINT				  Near	 DGROUP:03DC
__SHIFT				  Near	 DGROUP:03B2
__SYM				  Near	 DGROUP:03D4
__ZERO				  Near	 DGROUP:0384

Macro Name

EXIT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0431 Word	  Public  CODE
